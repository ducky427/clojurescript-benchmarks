Version,Engine,Section,Name,Mean,Deviation,MOE,RME,SEM
1.9.36,V8,identity,[x 1] (identity x),9.18e-06,,,,
1.9.36,V8,symbol construction,[] (symbol (quote foo)),2.2e-05,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.26,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.21,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.9.36,V8,instance?,[coll []] (instance? PersistentVector coll),0.000528,,,,
1.9.36,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000505,,,,
1.9.36,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000508,,,,
1.9.36,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.7e-05,,,,
1.9.36,V8,array & string ops,"[coll ""foobar""] (seq coll)",0.000101,,,,
1.9.36,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.9.36,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000116,,,,
1.9.36,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.1e-05,,,,
1.9.36,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.9.36,V8,cloning & specify,[coll [1 2 3]] (clone coll),3e-05,,,,
1.9.36,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000568,,,,
1.9.36,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (first coll),2e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.7e-05,,,,
1.9.36,V8,list ops,[] (list),4e-06,,,,
1.9.36,V8,list ops,[] (list 1 2 3),0.000557,,,,
1.9.36,V8,vector ops,[] [],4e-06,,,,
1.9.36,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000563,,,,
1.9.36,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000563,,,,
1.9.36,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000561,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (coll 0),0.000512,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (conj coll 4),5e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.9.36,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.9.36,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.9.36,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (seq coll),3.8e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.2e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.5e-05,,,,
1.9.36,V8,large vector ops,[] (reduce conj [] (range 40000)),6.3,,,,
1.9.36,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00033,,,,
1.9.36,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00067,,,,
1.9.36,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.9.36,V8,chunked seqs,[] (-first v),1.8e-05,,,,
1.9.36,V8,chunked seqs,[] (-next v),2.9e-05,,,,
1.9.36,V8,chunked seqs,[] (-rest v),3.1e-05,,,,
1.9.36,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),552.0,,,,
1.9.36,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),3.8,,,,
1.9.36,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.08,,,,
1.9.36,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.58,,,,
1.9.36,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),94.0,,,,
1.9.36,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),2.1,,,,
1.9.36,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.5,,,,
1.9.36,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.1,,,,
1.9.36,V8,apply,[] (list 1 2 3 4 5),0.000122,,,,
1.9.36,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000142,,,,
1.9.36,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00044,,,,
1.9.36,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000144,,,,
1.9.36,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000241,,,,
1.9.36,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000801,,,,
1.9.36,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000348,,,,
1.9.36,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000345,,,,
1.9.36,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000249,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.5e-05,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001465,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.9.36,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001136,,,,
1.9.36,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.1e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.2e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.2e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.1e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.1e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),9.7e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.4e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.9e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.5e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),9.8e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8.5e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.2e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.6e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.1e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.8e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.5e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.6e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",5.0,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.9e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.4e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.9.36,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00302,,,,
1.9.36,V8,persistent hash maps,[key :f0] (hash key),2e-05,,,,
1.9.36,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.2e-05,,,,
1.9.36,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.9.36,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.15,,,,
1.9.36,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.06,,,,
1.9.36,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.79,,,,
1.9.36,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (:f0 coll),6.8e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (get coll :f0),4.9e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.4e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000248,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00034,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),77.0,,,,
1.9.36,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00012,,,,
1.9.36,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),55.0,,,,
1.9.36,V8,set ops,[] #{},4e-06,,,,
1.9.36,V8,set ops,[] #{1 3 2},3e-06,,,,
1.9.36,V8,set ops,[v [1 2 3]] (set v),0.000307,,,,
1.9.36,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000281,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (get coll 2),7e-05,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.9e-05,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (coll 2),7.1e-05,,,,
1.9.36,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.9.36,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.9.36,V8,reader,[s big-str-data] (reader/read-string s),0.742,,,,
1.9.36,V8,range,[r (range 100000)] (last r),3.7,,,,
1.9.36,V8,lazy-seq - first run,[r r] (last r),482.0,,,,
1.9.36,V8,lazy-seq - second run,[r r] (last r),83.0,,,,
1.9.36,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.462,,,,
1.9.36,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.127,,,,
1.9.36,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),315.0,,,,
1.9.36,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),58.0,,,,
1.9.36,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.25,,,,
1.9.36,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.9.36,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),7.7,,,,
1.9.36,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),11.9,,,,
1.9.36,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),176.0,,,,
1.9.36,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),177.7,,,,
1.9.36,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),8.2,,,,
1.9.36,V8,multimethods,[] (simple-multi :foo),0.000156,,,,
1.9.36,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.9.36,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00037,,,,
1.9.36,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00111,,,,
1.9.36,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),11.2,,,,
1.9.36,SM,identity,[x 1] (identity x),8.34e-06,,,,
1.9.36,SM,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.77,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.18,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.9.36,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.9.36,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),2e-05,,,,
1.9.36,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3.2e-05,,,,
1.9.36,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000575,,,,
1.9.36,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001412,,,,
1.9.36,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.00093,,,,
1.9.36,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001198,,,,
1.9.36,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000175,,,,
1.9.36,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000917,,,,
1.9.36,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000421,,,,
1.9.36,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001792,,,,
1.9.36,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.2e-05,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (first coll),0.000121,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (-first coll),8.1e-05,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (rest coll),0.000104,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (-rest coll),6.7e-05,,,,
1.9.36,SM,list ops,[] (list),1.1e-05,,,,
1.9.36,SM,list ops,[] (list 1 2 3),0.001315,,,,
1.9.36,SM,vector ops,[] [],9e-06,,,,
1.9.36,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000567,,,,
1.9.36,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000724,,,,
1.9.36,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000594,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (transient coll),0.00185,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000245,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000167,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.00017,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (coll 0),0.000194,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000867,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000838,,,,
1.9.36,SM,vector ops,[coll []] (-conj coll 1),0.000726,,,,
1.9.36,SM,vector ops,[coll [1]] (-conj coll 2),0.00076,,,,
1.9.36,SM,vector ops,[coll [1 2]] (-conj coll 3),0.00079,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (seq coll),0.000537,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000581,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000181,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000169,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000174,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000173,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.00018,,,,
1.9.36,SM,large vector ops,[] (reduce conj [] (range 40000)),8.3,,,,
1.9.36,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00162,,,,
1.9.36,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00237,,,,
1.9.36,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00168,,,,
1.9.36,SM,chunked seqs,[] (-first v),0.000167,,,,
1.9.36,SM,chunked seqs,[] (-next v),0.000184,,,,
1.9.36,SM,chunked seqs,[] (-rest v),0.000178,,,,
1.9.36,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),225.0,,,,
1.9.36,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.6,,,,
1.9.36,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.5,,,,
1.9.36,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.66,,,,
1.9.36,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),74.0,,,,
1.9.36,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.9.36,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.5,,,,
1.9.36,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.2,,,,
1.9.36,SM,apply,[] (list 1 2 3 4 5),0.000364,,,,
1.9.36,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000307,,,,
1.9.36,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000387,,,,
1.9.36,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000347,,,,
1.9.36,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000353,,,,
1.9.36,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000826,,,,
1.9.36,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000348,,,,
1.9.36,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000327,,,,
1.9.36,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000405,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000178,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002062,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000177,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000174,,,,
1.9.36,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002689,,,,
1.9.36,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000253,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000202,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000331,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000204,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000232,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000257,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000205,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000327,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000222,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000225,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000258,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000205,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000331,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000203,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000228,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000214,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.00021,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000208,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000204,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000211,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.00023,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000206,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000206,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",170.0,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000179,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000176,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000215,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000222,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),234.0,,,,
1.9.36,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00341,,,,
1.9.36,SM,persistent hash maps,[key :f0] (hash key),0.000178,,,,
1.9.36,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000176,,,,
1.9.36,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000175,,,,
1.9.36,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.52,,,,
1.9.36,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.3,,,,
1.9.36,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.99,,,,
1.9.36,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.87,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000233,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000233,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000199,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000252,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000582,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000534,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),272.0,,,,
1.9.36,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000288,,,,
1.9.36,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),490.0,,,,
1.9.36,SM,set ops,[] #{},0.000146,,,,
1.9.36,SM,set ops,[] #{1 3 2},0.000137,,,,
1.9.36,SM,set ops,[v [1 2 3]] (set v),0.000392,,,,
1.9.36,SM,set ops,[] (hash-set 1 2 3),0.00014,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000409,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000214,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000196,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (coll 2),0.000196,,,,
1.9.36,SM,seq ops,[coll (range 500000)] (reduce + coll),14.0,,,,
1.9.36,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.079,,,,
1.9.36,SM,reader,[s big-str-data] (reader/read-string s),1.75,,,,
1.9.36,SM,range,[r (range 100000)] (last r),5.1,,,,
1.9.36,SM,lazy-seq - first run,[r r] (last r),423.0,,,,
1.9.36,SM,lazy-seq - second run,[r r] (last r),56.0,,,,
1.9.36,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.581,,,,
1.9.36,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.439,,,,
1.9.36,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),216.0,,,,
1.9.36,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),41.75,,,,
1.9.36,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),213.25,,,,
1.9.36,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),118.5,,,,
1.9.36,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),2.9,,,,
1.9.36,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.3,,,,
1.9.36,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),22.5,,,,
1.9.36,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),177.4,,,,
1.9.36,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),2.6,,,,
1.9.36,SM,multimethods,[] (simple-multi :foo),0.000275,,,,
1.9.36,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00327,,,,
1.9.36,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00189,,,,
1.9.36,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00255,,,,
1.9.36,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),51.5,,,,
1.9.36,JSC,identity,[x 1] (identity x),9.16e-06,,,,
1.9.36,JSC,symbol construction,[] (symbol (quote foo)),4.8e-05,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.64,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.9.36,JSC,instance?,[coll []] (instance? PersistentVector coll),4.8e-05,,,,
1.9.36,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.9.36,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.9.36,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000137,,,,
1.9.36,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6.1e-05,,,,
1.9.36,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000184,,,,
1.9.36,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.6e-05,,,,
1.9.36,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.9.36,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.9e-05,,,,
1.9.36,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.1e-05,,,,
1.9.36,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000221,,,,
1.9.36,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),4e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (first coll),4.7e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (rest coll),4.2e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (-rest coll),4.1e-05,,,,
1.9.36,JSC,list ops,[] (list),3.2e-05,,,,
1.9.36,JSC,list ops,[] (list 1 2 3),9.8e-05,,,,
1.9.36,JSC,vector ops,[] [],3.8e-05,,,,
1.9.36,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.7e-05,,,,
1.9.36,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.9e-05,,,,
1.9.36,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.5e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.8e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.6e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.6e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.9.36,JSC,vector ops,[coll []] (-conj coll 1),7.7e-05,,,,
1.9.36,JSC,vector ops,[coll [1]] (-conj coll 2),7.3e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2]] (-conj coll 3),8.1e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (seq coll),6e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.6e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000182,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.1e-05,,,,
1.9.36,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.0,,,,
1.9.36,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00037,,,,
1.9.36,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.9.36,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.9.36,JSC,chunked seqs,[] (-first v),5.9e-05,,,,
1.9.36,JSC,chunked seqs,[] (-next v),0.00019,,,,
1.9.36,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.9.36,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),74.0,,,,
1.9.36,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),2.0,,,,
1.9.36,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.19,,,,
1.9.36,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.35,,,,
1.9.36,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),42.0,,,,
1.9.36,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.9.36,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.9.36,JSC,apply,[coll (into [] (range 100000))] (apply + coll),3.9,,,,
1.9.36,JSC,apply,[] (list 1 2 3 4 5),0.000172,,,,
1.9.36,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000167,,,,
1.9.36,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000235,,,,
1.9.36,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000174,,,,
1.9.36,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000163,,,,
1.9.36,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000524,,,,
1.9.36,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000235,,,,
1.9.36,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000229,,,,
1.9.36,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00029,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000957,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.9.36,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001088,,,,
1.9.36,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000102,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.8e-05,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000108,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000109,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.8e-05,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000113,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.2e-05,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.5e-05,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000111,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000118,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.5e-05,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.6e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.7e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.2e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000122,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8.7e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.3e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.1e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),75.0,,,,
1.9.36,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00187,,,,
1.9.36,JSC,persistent hash maps,[key :f0] (hash key),5e-05,,,,
1.9.36,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.9.36,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.7e-05,,,,
1.9.36,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.36,,,,
1.9.36,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.25,,,,
1.9.36,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.63,,,,
1.9.36,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.71,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.0001,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.7e-05,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.3e-05,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000112,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000171,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000248,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),124.0,,,,
1.9.36,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000154,,,,
1.9.36,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),40.0,,,,
1.9.36,JSC,set ops,[] #{},3.8e-05,,,,
1.9.36,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.9.36,JSC,set ops,[v [1 2 3]] (set v),0.000369,,,,
1.9.36,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000163,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.3e-05,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),8.1e-05,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (coll 2),9.5e-05,,,,
1.9.36,JSC,seq ops,[coll (range 500000)] (reduce + coll),18.0,,,,
1.9.36,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.022,,,,
1.9.36,JSC,reader,[s big-str-data] (reader/read-string s),0.634,,,,
1.9.36,JSC,range,[r (range 100000)] (last r),2.6,,,,
1.9.36,JSC,lazy-seq - first run,[r r] (last r),208.0,,,,
1.9.36,JSC,lazy-seq - second run,[r r] (last r),68.0,,,,
1.9.36,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.621,,,,
1.9.36,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.198,,,,
1.9.36,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),144.0,,,,
1.9.36,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.5,,,,
1.9.36,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.0,,,,
1.9.36,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.75,,,,
1.9.36,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.9,,,,
1.9.36,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.7,,,,
1.9.36,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),9.7,,,,
1.9.36,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),55.5,,,,
1.9.36,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.9,,,,
1.9.36,JSC,multimethods,[] (simple-multi :foo),0.000257,,,,
1.9.36,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0012,,,,
1.9.36,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00027,,,,
1.9.36,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00077,,,,
1.9.36,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),10.3,,,,
1.9.35,V8,identity,[x 1] (identity x),9.23e-06,,,,
1.9.35,V8,symbol construction,[] (symbol (quote foo)),2.2e-05,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.28,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.22,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.9.35,V8,instance?,[coll []] (instance? PersistentVector coll),0.00052,,,,
1.9.35,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000508,,,,
1.9.35,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000509,,,,
1.9.35,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.7e-05,,,,
1.9.35,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.7e-05,,,,
1.9.35,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.9.35,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000118,,,,
1.9.35,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.9e-05,,,,
1.9.35,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.9.35,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.3e-05,,,,
1.9.35,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000569,,,,
1.9.35,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (first coll),2.1e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (-first coll),1.5e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.9.35,V8,list ops,[] (list),3e-06,,,,
1.9.35,V8,list ops,[] (list 1 2 3),0.000554,,,,
1.9.35,V8,vector ops,[] [],6e-06,,,,
1.9.35,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000569,,,,
1.9.35,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00056,,,,
1.9.35,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000568,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (coll 0),0.000509,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.9.35,V8,vector ops,[coll []] (-conj coll 1),4.4e-05,,,,
1.9.35,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.9.35,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (first coll),4e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.3e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.5e-05,,,,
1.9.35,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.9.35,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.0003,,,,
1.9.35,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00071,,,,
1.9.35,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00022,,,,
1.9.35,V8,chunked seqs,[] (-first v),1.9e-05,,,,
1.9.35,V8,chunked seqs,[] (-next v),2.9e-05,,,,
1.9.35,V8,chunked seqs,[] (-rest v),3.1e-05,,,,
1.9.35,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),548.0,,,,
1.9.35,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),3.9,,,,
1.9.35,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.0,,,,
1.9.35,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.74,,,,
1.9.35,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),88.0,,,,
1.9.35,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),2.1,,,,
1.9.35,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.6,,,,
1.9.35,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.3,,,,
1.9.35,V8,apply,[] (list 1 2 3 4 5),0.000125,,,,
1.9.35,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000145,,,,
1.9.35,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00045,,,,
1.9.35,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000143,,,,
1.9.35,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000235,,,,
1.9.35,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000934,,,,
1.9.35,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000354,,,,
1.9.35,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000351,,,,
1.9.35,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000252,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001437,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.7e-05,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.9.35,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001167,,,,
1.9.35,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.1e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.5e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.3e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.8e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.2e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.2e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),9.9e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.2e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.1e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.7e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000107,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8.1e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.4e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.9e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.2e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000104,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.6e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.5e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.2e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.6e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),41.0,,,,
1.9.35,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0032,,,,
1.9.35,V8,persistent hash maps,[key :f0] (hash key),2.1e-05,,,,
1.9.35,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.9.35,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.9.35,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.2,,,,
1.9.35,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.11,,,,
1.9.35,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.79,,,,
1.9.35,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.01,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (:f0 coll),6.9e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (get coll :f0),5.6e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.4e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.3e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000258,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000344,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),82.0,,,,
1.9.35,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00011,,,,
1.9.35,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),62.0,,,,
1.9.35,V8,set ops,[] #{},4e-06,,,,
1.9.35,V8,set ops,[] #{1 3 2},5e-06,,,,
1.9.35,V8,set ops,[v [1 2 3]] (set v),0.000304,,,,
1.9.35,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000295,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (get coll 2),7.4e-05,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (coll 2),7.9e-05,,,,
1.9.35,V8,seq ops,[coll (range 500000)] (reduce + coll),24.0,,,,
1.9.35,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.9.35,V8,reader,[s big-str-data] (reader/read-string s),0.739,,,,
1.9.35,V8,range,[r (range 100000)] (last r),3.9,,,,
1.9.35,V8,lazy-seq - first run,[r r] (last r),480.0,,,,
1.9.35,V8,lazy-seq - second run,[r r] (last r),103.0,,,,
1.9.35,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.466,,,,
1.9.35,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.126,,,,
1.9.35,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),322.0,,,,
1.9.35,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),55.5,,,,
1.9.35,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),54.75,,,,
1.9.35,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.9.35,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.4,,,,
1.9.35,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),10.4,,,,
1.9.35,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),202.1,,,,
1.9.35,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),171.1,,,,
1.9.35,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),7.8,,,,
1.9.35,V8,multimethods,[] (simple-multi :foo),0.00015,,,,
1.9.35,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.9.35,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00033,,,,
1.9.35,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00107,,,,
1.9.35,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),13.1,,,,
1.9.35,SM,identity,[x 1] (identity x),8.84e-06,,,,
1.9.35,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.56,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),2.69,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.38,,,,
1.9.35,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.9.35,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.9.35,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.8e-05,,,,
1.9.35,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.00051,,,,
1.9.35,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001272,,,,
1.9.35,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000704,,,,
1.9.35,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001142,,,,
1.9.35,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000162,,,,
1.9.35,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000902,,,,
1.9.35,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000439,,,,
1.9.35,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001792,,,,
1.9.35,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (first coll),0.000111,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (rest coll),7.6e-05,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.5e-05,,,,
1.9.35,SM,list ops,[] (list),9e-06,,,,
1.9.35,SM,list ops,[] (list 1 2 3),0.001243,,,,
1.9.35,SM,vector ops,[] [],1e-05,,,,
1.9.35,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000601,,,,
1.9.35,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000645,,,,
1.9.35,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.00051,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (transient coll),0.00198,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000237,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000204,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000182,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (coll 0),0.000234,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000931,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000809,,,,
1.9.35,SM,vector ops,[coll []] (-conj coll 1),0.000708,,,,
1.9.35,SM,vector ops,[coll [1]] (-conj coll 2),0.00077,,,,
1.9.35,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000821,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (seq coll),0.000545,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000421,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.5e-05,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (-first coll),7.8e-05,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000577,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000181,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000183,,,,
1.9.35,SM,large vector ops,[] (reduce conj [] (range 40000)),8.0,,,,
1.9.35,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00165,,,,
1.9.35,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00247,,,,
1.9.35,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00167,,,,
1.9.35,SM,chunked seqs,[] (-first v),0.000174,,,,
1.9.35,SM,chunked seqs,[] (-next v),0.000185,,,,
1.9.35,SM,chunked seqs,[] (-rest v),0.000179,,,,
1.9.35,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),225.0,,,,
1.9.35,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.4,,,,
1.9.35,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.61,,,,
1.9.35,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.81,,,,
1.9.35,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.9.35,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.9.35,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.5,,,,
1.9.35,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.2,,,,
1.9.35,SM,apply,[] (list 1 2 3 4 5),0.000364,,,,
1.9.35,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.00031,,,,
1.9.35,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000444,,,,
1.9.35,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.00037,,,,
1.9.35,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000353,,,,
1.9.35,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000905,,,,
1.9.35,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000369,,,,
1.9.35,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000332,,,,
1.9.35,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000405,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000185,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002074,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000174,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000175,,,,
1.9.35,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002623,,,,
1.9.35,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000253,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000193,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.00032,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.00021,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000224,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000259,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000209,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000329,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000225,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000222,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000248,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000206,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000333,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000215,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000223,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000215,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000215,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000208,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000206,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000206,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000234,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000205,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000204,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",164.0,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000191,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000185,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000216,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000224,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),233.0,,,,
1.9.35,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00327,,,,
1.9.35,SM,persistent hash maps,[key :f0] (hash key),0.000182,,,,
1.9.35,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000166,,,,
1.9.35,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.00017,,,,
1.9.35,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.59,,,,
1.9.35,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.29,,,,
1.9.35,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.02,,,,
1.9.35,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.04,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000232,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (get coll :f0),0.00023,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000206,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000256,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000596,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00055,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),291.0,,,,
1.9.35,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000273,,,,
1.9.35,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),467.0,,,,
1.9.35,SM,set ops,[] #{},0.000144,,,,
1.9.35,SM,set ops,[] #{1 3 2},0.000138,,,,
1.9.35,SM,set ops,[v [1 2 3]] (set v),0.000363,,,,
1.9.35,SM,set ops,[] (hash-set 1 2 3),0.000137,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000414,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (get coll 2),0.00022,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000197,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (coll 2),0.000196,,,,
1.9.35,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.9.35,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.082,,,,
1.9.35,SM,reader,[s big-str-data] (reader/read-string s),1.774,,,,
1.9.35,SM,range,[r (range 100000)] (last r),5.2,,,,
1.9.35,SM,lazy-seq - first run,[r r] (last r),431.0,,,,
1.9.35,SM,lazy-seq - second run,[r r] (last r),53.0,,,,
1.9.35,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.574,,,,
1.9.35,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.447,,,,
1.9.35,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),218.0,,,,
1.9.35,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.0,,,,
1.9.35,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),226.75,,,,
1.9.35,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),116.0,,,,
1.9.35,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.0,,,,
1.9.35,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.3,,,,
1.9.35,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),22.2,,,,
1.9.35,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),176.4,,,,
1.9.35,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),2.9,,,,
1.9.35,SM,multimethods,[] (simple-multi :foo),0.000281,,,,
1.9.35,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00322,,,,
1.9.35,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00193,,,,
1.9.35,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00264,,,,
1.9.35,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),51.3,,,,
1.9.35,JSC,identity,[x 1] (identity x),9.86e-06,,,,
1.9.35,JSC,symbol construction,[] (symbol (quote foo)),4.8e-05,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.69,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.64,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.9.35,JSC,instance?,[coll []] (instance? PersistentVector coll),5.1e-05,,,,
1.9.35,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.9.35,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.9.35,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000137,,,,
1.9.35,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.8e-05,,,,
1.9.35,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000181,,,,
1.9.35,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.9e-05,,,,
1.9.35,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.9.35,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.9e-05,,,,
1.9.35,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.3e-05,,,,
1.9.35,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000222,,,,
1.9.35,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (first coll),5e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.9.35,JSC,list ops,[] (list),3.2e-05,,,,
1.9.35,JSC,list ops,[] (list 1 2 3),0.000103,,,,
1.9.35,JSC,vector ops,[] [],3.6e-05,,,,
1.9.35,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000107,,,,
1.9.35,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000102,,,,
1.9.35,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.9e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.6e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.6e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8.1e-05,,,,
1.9.35,JSC,vector ops,[coll []] (-conj coll 1),7.6e-05,,,,
1.9.35,JSC,vector ops,[coll [1]] (-conj coll 2),7.7e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.7e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (seq coll),5.9e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.4e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000183,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.6e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.9.35,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.9.35,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.9.35,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00058,,,,
1.9.35,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.9.35,JSC,chunked seqs,[] (-first v),5e-05,,,,
1.9.35,JSC,chunked seqs,[] (-next v),0.000185,,,,
1.9.35,JSC,chunked seqs,[] (-rest v),6.2e-05,,,,
1.9.35,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),69.0,,,,
1.9.35,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),2.1,,,,
1.9.35,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.14,,,,
1.9.35,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.39,,,,
1.9.35,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),47.0,,,,
1.9.35,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.9.35,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.9.35,JSC,apply,[coll (into [] (range 100000))] (apply + coll),3.8,,,,
1.9.35,JSC,apply,[] (list 1 2 3 4 5),0.000179,,,,
1.9.35,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000168,,,,
1.9.35,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000234,,,,
1.9.35,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000168,,,,
1.9.35,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.00017,,,,
1.9.35,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000526,,,,
1.9.35,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000229,,,,
1.9.35,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000231,,,,
1.9.35,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000281,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000942,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.6e-05,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.9.35,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001106,,,,
1.9.35,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000106,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000112,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.8e-05,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.2e-05,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000114,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.9e-05,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000118,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.1e-05,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.5e-05,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000106,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000116,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.3e-05,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.7e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000125,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.9e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.7e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.2e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),77.0,,,,
1.9.35,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00192,,,,
1.9.35,JSC,persistent hash maps,[key :f0] (hash key),5.4e-05,,,,
1.9.35,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.9.35,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.7e-05,,,,
1.9.35,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.36,,,,
1.9.35,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.25,,,,
1.9.35,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.68,,,,
1.9.35,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.7,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000103,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (get coll :f0),0.000104,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.6e-05,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000114,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000168,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000245,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),120.0,,,,
1.9.35,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000147,,,,
1.9.35,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),40.0,,,,
1.9.35,JSC,set ops,[] #{},3.7e-05,,,,
1.9.35,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.9.35,JSC,set ops,[v [1 2 3]] (set v),0.000387,,,,
1.9.35,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000159,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.4e-05,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (coll 2),9.5e-05,,,,
1.9.35,JSC,seq ops,[coll (range 500000)] (reduce + coll),18.0,,,,
1.9.35,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.022,,,,
1.9.35,JSC,reader,[s big-str-data] (reader/read-string s),0.615,,,,
1.9.35,JSC,range,[r (range 100000)] (last r),2.6,,,,
1.9.35,JSC,lazy-seq - first run,[r r] (last r),225.0,,,,
1.9.35,JSC,lazy-seq - second run,[r r] (last r),69.0,,,,
1.9.35,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.62,,,,
1.9.35,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.197,,,,
1.9.35,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),141.0,,,,
1.9.35,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),29.5,,,,
1.9.35,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),44.75,,,,
1.9.35,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.9.35,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.7,,,,
1.9.35,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.8,,,,
1.9.35,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),9.4,,,,
1.9.35,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),52.6,,,,
1.9.35,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),5.1,,,,
1.9.35,JSC,multimethods,[] (simple-multi :foo),0.000277,,,,
1.9.35,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00013,,,,
1.9.35,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0003,,,,
1.9.35,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00082,,,,
1.9.35,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),10.8,,,,
1.9.14,V8,identity,[x 1] (identity x),9.12e-06,,,,
1.9.14,V8,symbol construction,[] (symbol (quote foo)),2.4e-05,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.22,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.22,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.13,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.1,,,,
1.9.14,V8,instance?,[coll []] (instance? PersistentVector coll),0.000524,,,,
1.9.14,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000511,,,,
1.9.14,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000516,,,,
1.9.14,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3.3e-05,,,,
1.9.14,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.6e-05,,,,
1.9.14,V8,array & string ops,[coll (array 1 2 3)] (first coll),4e-05,,,,
1.9.14,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000113,,,,
1.9.14,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.9.14,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.9.14,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.3e-05,,,,
1.9.14,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000568,,,,
1.9.14,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (first coll),2.1e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.9.14,V8,list ops,[] (list),3e-06,,,,
1.9.14,V8,list ops,[] (list 1 2 3),0.000545,,,,
1.9.14,V8,vector ops,[] [],4e-06,,,,
1.9.14,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000557,,,,
1.9.14,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000558,,,,
1.9.14,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000555,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (transient coll),0.00025,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.1e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (coll 0),0.000501,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.9.14,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.9.14,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.9.14,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (seq coll),3.8e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.5e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.5e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.4e-05,,,,
1.9.14,V8,large vector ops,[] (reduce conj [] (range 40000)),6.4,,,,
1.9.14,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00028,,,,
1.9.14,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00067,,,,
1.9.14,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.9.14,V8,chunked seqs,[] (-first v),1.5e-05,,,,
1.9.14,V8,chunked seqs,[] (-next v),2.9e-05,,,,
1.9.14,V8,chunked seqs,[] (-rest v),3.4e-05,,,,
1.9.14,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),572.0,,,,
1.9.14,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),4.1,,,,
1.9.14,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.44,,,,
1.9.14,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.53,,,,
1.9.14,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),102.0,,,,
1.9.14,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.4,,,,
1.9.14,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.7,,,,
1.9.14,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.5,,,,
1.9.14,V8,apply,[] (list 1 2 3 4 5),0.000124,,,,
1.9.14,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000141,,,,
1.9.14,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000486,,,,
1.9.14,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000146,,,,
1.9.14,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000233,,,,
1.9.14,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000819,,,,
1.9.14,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000309,,,,
1.9.14,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000299,,,,
1.9.14,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000249,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.7e-05,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00153,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.9.14,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001126,,,,
1.9.14,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.2e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.3e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.3e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.8e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.8e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),8.4e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.1e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),9.9e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.3e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.8e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.3e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.6e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.0001,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.7e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.8e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.5e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.3e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.1e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000103,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.7e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.2e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.3e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.9.14,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00313,,,,
1.9.14,V8,persistent hash maps,[key :f0] (hash key),2.1e-05,,,,
1.9.14,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.6e-05,,,,
1.9.14,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.9.14,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.11,,,,
1.9.14,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.0,,,,
1.9.14,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.76,,,,
1.9.14,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (:f0 coll),7.4e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (get coll :f0),5.1e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),9.1e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000254,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000342,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),80.0,,,,
1.9.14,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000103,,,,
1.9.14,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),52.0,,,,
1.9.14,V8,set ops,[] #{},4e-06,,,,
1.9.14,V8,set ops,[] #{1 3 2},4e-06,,,,
1.9.14,V8,set ops,[v [1 2 3]] (set v),0.000331,,,,
1.9.14,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000268,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (get coll 2),7.5e-05,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.7e-05,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (coll 2),6.7e-05,,,,
1.9.14,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.9.14,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.028,,,,
1.9.14,V8,reader,[s big-str-data] (reader/read-string s),0.752,,,,
1.9.14,V8,range,[r (range 100000)] (last r),3.9,,,,
1.9.14,V8,lazy-seq - first run,[r r] (last r),471.0,,,,
1.9.14,V8,lazy-seq - second run,[r r] (last r),88.0,,,,
1.9.14,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.547,,,,
1.9.14,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.129,,,,
1.9.14,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),311.0,,,,
1.9.14,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),53.5,,,,
1.9.14,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),50.25,,,,
1.9.14,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.9.14,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.2,,,,
1.9.14,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),10.3,,,,
1.9.14,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),177.3,,,,
1.9.14,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),164.4,,,,
1.9.14,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),8.1,,,,
1.9.14,V8,multimethods,[] (simple-multi :foo),0.000149,,,,
1.9.14,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.9.14,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00036,,,,
1.9.14,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00104,,,,
1.9.14,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),17.4,,,,
1.9.14,SM,identity,[x 1] (identity x),8.86e-06,,,,
1.9.14,SM,symbol construction,[] (symbol (quote foo)),4.8e-05,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.59,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.06,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.34,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.9.14,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.9.14,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.9.14,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3.1e-05,,,,
1.9.14,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000486,,,,
1.9.14,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001188,,,,
1.9.14,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000712,,,,
1.9.14,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001135,,,,
1.9.14,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000173,,,,
1.9.14,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000857,,,,
1.9.14,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000437,,,,
1.9.14,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001858,,,,
1.9.14,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (first coll),0.00011,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (rest coll),7.4e-05,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (-rest coll),6.6e-05,,,,
1.9.14,SM,list ops,[] (list),1.1e-05,,,,
1.9.14,SM,list ops,[] (list 1 2 3),0.001258,,,,
1.9.14,SM,vector ops,[] [],1e-05,,,,
1.9.14,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000556,,,,
1.9.14,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000672,,,,
1.9.14,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000543,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (transient coll),0.00181,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000236,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000173,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000176,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (coll 0),0.000199,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.00084,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000826,,,,
1.9.14,SM,vector ops,[coll []] (-conj coll 1),0.000729,,,,
1.9.14,SM,vector ops,[coll [1]] (-conj coll 2),0.000767,,,,
1.9.14,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000802,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (seq coll),0.000518,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000392,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.4e-05,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (-first coll),7.8e-05,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000705,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000174,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000178,,,,
1.9.14,SM,large vector ops,[] (reduce conj [] (range 40000)),7.9,,,,
1.9.14,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.0017,,,,
1.9.14,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00243,,,,
1.9.14,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00172,,,,
1.9.14,SM,chunked seqs,[] (-first v),0.00017,,,,
1.9.14,SM,chunked seqs,[] (-next v),0.000183,,,,
1.9.14,SM,chunked seqs,[] (-rest v),0.000183,,,,
1.9.14,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),222.0,,,,
1.9.14,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.4,,,,
1.9.14,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.55,,,,
1.9.14,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.18,,,,
1.9.14,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),81.0,,,,
1.9.14,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.2,,,,
1.9.14,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.5,,,,
1.9.14,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.3,,,,
1.9.14,SM,apply,[] (list 1 2 3 4 5),0.000367,,,,
1.9.14,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000325,,,,
1.9.14,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000386,,,,
1.9.14,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000371,,,,
1.9.14,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000382,,,,
1.9.14,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000828,,,,
1.9.14,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000415,,,,
1.9.14,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000361,,,,
1.9.14,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000374,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000181,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001818,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000178,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000174,,,,
1.9.14,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002956,,,,
1.9.14,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000246,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000193,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000355,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000211,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000233,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000264,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000205,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00037,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000223,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000225,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000255,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000207,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000326,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000203,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000224,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000218,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.00022,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000209,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000207,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000207,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000224,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.0002,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000205,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",165.0,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000177,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000172,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.00022,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000218,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),226.0,,,,
1.9.14,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00335,,,,
1.9.14,SM,persistent hash maps,[key :f0] (hash key),0.000177,,,,
1.9.14,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000173,,,,
1.9.14,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000169,,,,
1.9.14,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.51,,,,
1.9.14,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.25,,,,
1.9.14,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.01,,,,
1.9.14,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.98,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000245,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000223,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000203,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000238,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000591,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000534,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),289.0,,,,
1.9.14,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000271,,,,
1.9.14,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),506.0,,,,
1.9.14,SM,set ops,[] #{},0.000146,,,,
1.9.14,SM,set ops,[] #{1 3 2},0.000139,,,,
1.9.14,SM,set ops,[v [1 2 3]] (set v),0.000354,,,,
1.9.14,SM,set ops,[] (hash-set 1 2 3),0.000135,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000404,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000215,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000201,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (coll 2),0.000188,,,,
1.9.14,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.9.14,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.094,,,,
1.9.14,SM,reader,[s big-str-data] (reader/read-string s),1.782,,,,
1.9.14,SM,range,[r (range 100000)] (last r),5.5,,,,
1.9.14,SM,lazy-seq - first run,[r r] (last r),435.0,,,,
1.9.14,SM,lazy-seq - second run,[r r] (last r),53.0,,,,
1.9.14,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.636,,,,
1.9.14,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.424,,,,
1.9.14,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),211.0,,,,
1.9.14,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),41.75,,,,
1.9.14,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),193.5,,,,
1.9.14,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),117.5,,,,
1.9.14,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.4,,,,
1.9.14,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.4,,,,
1.9.14,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),23.5,,,,
1.9.14,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),177.5,,,,
1.9.14,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.5,,,,
1.9.14,SM,multimethods,[] (simple-multi :foo),0.000281,,,,
1.9.14,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00325,,,,
1.9.14,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00191,,,,
1.9.14,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00257,,,,
1.9.14,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),54.3,,,,
1.9.14,JSC,identity,[x 1] (identity x),1.013e-05,,,,
1.9.14,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.61,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.05,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.9.14,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.9.14,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.9.14,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.9.14,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000137,,,,
1.9.14,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.7e-05,,,,
1.9.14,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000183,,,,
1.9.14,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.7e-05,,,,
1.9.14,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.9.14,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.2e-05,,,,
1.9.14,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.8e-05,,,,
1.9.14,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000223,,,,
1.9.14,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (first coll),4.7e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.9.14,JSC,list ops,[] (list),3.3e-05,,,,
1.9.14,JSC,list ops,[] (list 1 2 3),0.0001,,,,
1.9.14,JSC,vector ops,[] [],3.4e-05,,,,
1.9.14,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.9e-05,,,,
1.9.14,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.8e-05,,,,
1.9.14,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.9e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (coll 0),5.3e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.7e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.9.14,JSC,vector ops,[coll []] (-conj coll 1),7.7e-05,,,,
1.9.14,JSC,vector ops,[coll [1]] (-conj coll 2),7.7e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (seq coll),5.5e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.2e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.7e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000185,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.4e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.6e-05,,,,
1.9.14,JSC,large vector ops,[] (reduce conj [] (range 40000)),4.9,,,,
1.9.14,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00035,,,,
1.9.14,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00055,,,,
1.9.14,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.9.14,JSC,chunked seqs,[] (-first v),5.8e-05,,,,
1.9.14,JSC,chunked seqs,[] (-next v),0.000191,,,,
1.9.14,JSC,chunked seqs,[] (-rest v),5.8e-05,,,,
1.9.14,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),67.0,,,,
1.9.14,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),2.0,,,,
1.9.14,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.11,,,,
1.9.14,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.28,,,,
1.9.14,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),46.0,,,,
1.9.14,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.9.14,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.9.14,JSC,apply,[coll (into [] (range 100000))] (apply + coll),3.8,,,,
1.9.14,JSC,apply,[] (list 1 2 3 4 5),0.000173,,,,
1.9.14,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000165,,,,
1.9.14,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000231,,,,
1.9.14,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000169,,,,
1.9.14,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000172,,,,
1.9.14,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000538,,,,
1.9.14,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000227,,,,
1.9.14,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000225,,,,
1.9.14,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000282,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00095,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.8e-05,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.9.14,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001071,,,,
1.9.14,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000101,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000108,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.3e-05,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000109,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),9.2e-05,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000111,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.2e-05,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.6e-05,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000106,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000112,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.3e-05,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.9e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.6e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000125,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8.1e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.2e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.7e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.5e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.8e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),72.0,,,,
1.9.14,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00181,,,,
1.9.14,JSC,persistent hash maps,[key :f0] (hash key),5.4e-05,,,,
1.9.14,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.9.14,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.7e-05,,,,
1.9.14,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.36,,,,
1.9.14,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.9.14,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.61,,,,
1.9.14,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.66,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000101,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.3e-05,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.3e-05,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000109,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000169,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000253,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),122.0,,,,
1.9.14,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000149,,,,
1.9.14,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),40.0,,,,
1.9.14,JSC,set ops,[] #{},4e-05,,,,
1.9.14,JSC,set ops,[] #{1 3 2},3.6e-05,,,,
1.9.14,JSC,set ops,[v [1 2 3]] (set v),0.000373,,,,
1.9.14,JSC,set ops,[] (hash-set 1 2 3),3.7e-05,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000163,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.3e-05,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (coll 2),9.5e-05,,,,
1.9.14,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.9.14,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.022,,,,
1.9.14,JSC,reader,[s big-str-data] (reader/read-string s),0.629,,,,
1.9.14,JSC,range,[r (range 100000)] (last r),2.5,,,,
1.9.14,JSC,lazy-seq - first run,[r r] (last r),205.0,,,,
1.9.14,JSC,lazy-seq - second run,[r r] (last r),65.0,,,,
1.9.14,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.619,,,,
1.9.14,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.189,,,,
1.9.14,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),140.0,,,,
1.9.14,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),39.0,,,,
1.9.14,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.5,,,,
1.9.14,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.9.14,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.8,,,,
1.9.14,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.8,,,,
1.9.14,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),10.2,,,,
1.9.14,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),54.6,,,,
1.9.14,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.9,,,,
1.9.14,JSC,multimethods,[] (simple-multi :foo),0.000265,,,,
1.9.14,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00124,,,,
1.9.14,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00028,,,,
1.9.14,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00079,,,,
1.9.14,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),14.5,,,,
1.8.51,V8,identity,[x 1] (identity x),9.11e-06,,,,
1.8.51,V8,symbol construction,[] (symbol (quote foo)),2.6e-05,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.23,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.23,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.8.51,V8,instance?,[coll []] (instance? PersistentVector coll),0.000523,,,,
1.8.51,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000506,,,,
1.8.51,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000505,,,,
1.8.51,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3.2e-05,,,,
1.8.51,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.3e-05,,,,
1.8.51,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.8.51,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000114,,,,
1.8.51,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.8.51,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.8.51,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.7e-05,,,,
1.8.51,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000569,,,,
1.8.51,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (first coll),2.4e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (-first coll),1.7e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (rest coll),1.3e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.8.51,V8,list ops,[] (list),3e-06,,,,
1.8.51,V8,list ops,[] (list 1 2 3),0.000546,,,,
1.8.51,V8,vector ops,[] [],4e-06,,,,
1.8.51,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000567,,,,
1.8.51,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000563,,,,
1.8.51,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000566,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (transient coll),0.00025,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.2e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (coll 0),0.000501,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.8.51,V8,vector ops,[coll []] (-conj coll 1),4.1e-05,,,,
1.8.51,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.8.51,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (seq coll),3.8e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.6e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.5e-05,,,,
1.8.51,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.8.51,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00031,,,,
1.8.51,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00067,,,,
1.8.51,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.8.51,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.8.51,V8,chunked seqs,[] (-next v),3.3e-05,,,,
1.8.51,V8,chunked seqs,[] (-rest v),3.1e-05,,,,
1.8.51,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),562.0,,,,
1.8.51,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),3.9,,,,
1.8.51,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.5,,,,
1.8.51,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.43,,,,
1.8.51,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),103.0,,,,
1.8.51,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.5,,,,
1.8.51,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.5,,,,
1.8.51,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.3,,,,
1.8.51,V8,apply,[] (list 1 2 3 4 5),0.000124,,,,
1.8.51,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000143,,,,
1.8.51,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000441,,,,
1.8.51,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000143,,,,
1.8.51,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000251,,,,
1.8.51,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000818,,,,
1.8.51,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000317,,,,
1.8.51,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000297,,,,
1.8.51,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000252,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001386,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.8.51,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001141,,,,
1.8.51,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.2e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.3e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.8e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),8.7e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.1e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000106,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.7e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.5e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.6e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),9.9e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8.1e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.2e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.7e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.4e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.6e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.1e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000101,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.4e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.1e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),5.4e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),5.2e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),38.0,,,,
1.8.51,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00327,,,,
1.8.51,V8,persistent hash maps,[key :f0] (hash key),2e-05,,,,
1.8.51,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.2e-05,,,,
1.8.51,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.8.51,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.09,,,,
1.8.51,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.99,,,,
1.8.51,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.77,,,,
1.8.51,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.1,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (:f0 coll),9.4e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (get coll :f0),4.9e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.2e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000253,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000352,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),76.0,,,,
1.8.51,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000103,,,,
1.8.51,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),53.0,,,,
1.8.51,V8,set ops,[] #{},4e-06,,,,
1.8.51,V8,set ops,[] #{1 3 2},4e-06,,,,
1.8.51,V8,set ops,[v [1 2 3]] (set v),0.000318,,,,
1.8.51,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000268,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (get coll 2),7.2e-05,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (contains? coll 2),5.1e-05,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (coll 2),7e-05,,,,
1.8.51,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.8.51,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.8.51,V8,reader,[s big-str-data] (reader/read-string s),0.782,,,,
1.8.51,V8,range,[r (range 100000)] (last r),3.7,,,,
1.8.51,V8,lazy-seq - first run,[r r] (last r),478.0,,,,
1.8.51,V8,lazy-seq - second run,[r r] (last r),89.0,,,,
1.8.51,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.454,,,,
1.8.51,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.134,,,,
1.8.51,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),310.0,,,,
1.8.51,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.75,,,,
1.8.51,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),52.0,,,,
1.8.51,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.8.51,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.1,,,,
1.8.51,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),10.2,,,,
1.8.51,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),180.9,,,,
1.8.51,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),174.0,,,,
1.8.51,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),7.7,,,,
1.8.51,V8,multimethods,[] (simple-multi :foo),0.000154,,,,
1.8.51,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.8.51,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00039,,,,
1.8.51,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.0012,,,,
1.8.51,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),15.5,,,,
1.8.51,SM,identity,[x 1] (identity x),8.63e-06,,,,
1.8.51,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.68,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.08,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.8.51,SM,instance?,[coll []] (instance? PersistentVector coll),1.6e-05,,,,
1.8.51,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.8.51,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3.2e-05,,,,
1.8.51,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000595,,,,
1.8.51,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001261,,,,
1.8.51,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000777,,,,
1.8.51,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001091,,,,
1.8.51,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000173,,,,
1.8.51,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.00082,,,,
1.8.51,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000409,,,,
1.8.51,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001813,,,,
1.8.51,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (first coll),0.000109,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (rest coll),7.4e-05,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.5e-05,,,,
1.8.51,SM,list ops,[] (list),8e-06,,,,
1.8.51,SM,list ops,[] (list 1 2 3),0.001277,,,,
1.8.51,SM,vector ops,[] [],9e-06,,,,
1.8.51,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00058,,,,
1.8.51,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000658,,,,
1.8.51,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000488,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (transient coll),0.00179,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000223,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000163,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000174,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (coll 0),0.000234,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.00096,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.0008,,,,
1.8.51,SM,vector ops,[coll []] (-conj coll 1),0.000785,,,,
1.8.51,SM,vector ops,[coll [1]] (-conj coll 2),0.000758,,,,
1.8.51,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000789,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (seq coll),0.000511,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000415,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.3e-05,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (-first coll),7.8e-05,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000628,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000172,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000182,,,,
1.8.51,SM,large vector ops,[] (reduce conj [] (range 40000)),8.2,,,,
1.8.51,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00164,,,,
1.8.51,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00251,,,,
1.8.51,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00171,,,,
1.8.51,SM,chunked seqs,[] (-first v),0.000174,,,,
1.8.51,SM,chunked seqs,[] (-next v),0.00019,,,,
1.8.51,SM,chunked seqs,[] (-rest v),0.000176,,,,
1.8.51,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),226.0,,,,
1.8.51,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.4,,,,
1.8.51,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.53,,,,
1.8.51,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.94,,,,
1.8.51,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.8.51,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.8.51,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.6,,,,
1.8.51,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.2,,,,
1.8.51,SM,apply,[] (list 1 2 3 4 5),0.00034,,,,
1.8.51,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000306,,,,
1.8.51,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000391,,,,
1.8.51,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000342,,,,
1.8.51,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000362,,,,
1.8.51,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000885,,,,
1.8.51,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000364,,,,
1.8.51,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000361,,,,
1.8.51,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000408,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000177,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00206,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000175,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000175,,,,
1.8.51,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002949,,,,
1.8.51,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.00025,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000204,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000349,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000201,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000224,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000266,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000203,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000329,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000231,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.00023,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000252,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000206,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000328,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000205,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000223,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000217,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000206,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000202,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000198,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000204,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000224,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000202,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000203,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",167.0,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000173,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000175,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000219,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000212,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),228.0,,,,
1.8.51,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00333,,,,
1.8.51,SM,persistent hash maps,[key :f0] (hash key),0.000178,,,,
1.8.51,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000165,,,,
1.8.51,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000172,,,,
1.8.51,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.56,,,,
1.8.51,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.25,,,,
1.8.51,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.01,,,,
1.8.51,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.04,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000237,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000221,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.0002,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000256,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000589,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000533,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),272.0,,,,
1.8.51,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00027,,,,
1.8.51,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),517.0,,,,
1.8.51,SM,set ops,[] #{},0.000141,,,,
1.8.51,SM,set ops,[] #{1 3 2},0.000136,,,,
1.8.51,SM,set ops,[v [1 2 3]] (set v),0.000403,,,,
1.8.51,SM,set ops,[] (hash-set 1 2 3),0.000135,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000396,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000201,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000195,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (coll 2),0.0002,,,,
1.8.51,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.8.51,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.097,,,,
1.8.51,SM,reader,[s big-str-data] (reader/read-string s),1.944,,,,
1.8.51,SM,range,[r (range 100000)] (last r),4.9,,,,
1.8.51,SM,lazy-seq - first run,[r r] (last r),433.0,,,,
1.8.51,SM,lazy-seq - second run,[r r] (last r),56.0,,,,
1.8.51,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.615,,,,
1.8.51,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.437,,,,
1.8.51,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),208.0,,,,
1.8.51,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),41.25,,,,
1.8.51,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),195.5,,,,
1.8.51,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),117.0,,,,
1.8.51,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.1,,,,
1.8.51,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.0,,,,
1.8.51,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),23.7,,,,
1.8.51,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),175.3,,,,
1.8.51,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.1,,,,
1.8.51,SM,multimethods,[] (simple-multi :foo),0.000281,,,,
1.8.51,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00323,,,,
1.8.51,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00184,,,,
1.8.51,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00259,,,,
1.8.51,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),57.1,,,,
1.8.51,JSC,identity,[x 1] (identity x),9.76e-06,,,,
1.8.51,JSC,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.69,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.63,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.8.51,JSC,instance?,[coll []] (instance? PersistentVector coll),4.8e-05,,,,
1.8.51,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.8.51,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.8.51,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000134,,,,
1.8.51,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.9e-05,,,,
1.8.51,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000188,,,,
1.8.51,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.7e-05,,,,
1.8.51,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.8.51,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.9e-05,,,,
1.8.51,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.5e-05,,,,
1.8.51,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000217,,,,
1.8.51,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (first coll),4.9e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.8.51,JSC,list ops,[] (list),3.2e-05,,,,
1.8.51,JSC,list ops,[] (list 1 2 3),0.0001,,,,
1.8.51,JSC,vector ops,[] [],3.6e-05,,,,
1.8.51,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.8.51,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.0001,,,,
1.8.51,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.8e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (coll 0),5.5e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.2e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.8.51,JSC,vector ops,[coll []] (-conj coll 1),8.4e-05,,,,
1.8.51,JSC,vector ops,[coll [1]] (-conj coll 2),7.7e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2]] (-conj coll 3),8.1e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (seq coll),5.9e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.3e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.6e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.00018,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.4e-05,,,,
1.8.51,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.8.51,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00035,,,,
1.8.51,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00057,,,,
1.8.51,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.8.51,JSC,chunked seqs,[] (-first v),5.4e-05,,,,
1.8.51,JSC,chunked seqs,[] (-next v),0.000189,,,,
1.8.51,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.8.51,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),67.0,,,,
1.8.51,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.9,,,,
1.8.51,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.18,,,,
1.8.51,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.46,,,,
1.8.51,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),46.0,,,,
1.8.51,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.8.51,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.8.51,JSC,apply,[coll (into [] (range 100000))] (apply + coll),3.9,,,,
1.8.51,JSC,apply,[] (list 1 2 3 4 5),0.000175,,,,
1.8.51,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000166,,,,
1.8.51,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000236,,,,
1.8.51,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000171,,,,
1.8.51,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000166,,,,
1.8.51,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000542,,,,
1.8.51,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00023,,,,
1.8.51,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000224,,,,
1.8.51,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000294,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000848,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.8e-05,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),5.5e-05,,,,
1.8.51,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001048,,,,
1.8.51,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.0001,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.9e-05,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000112,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.7e-05,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7e-05,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000108,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),8.4e-05,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000118,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.5e-05,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.8e-05,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000112,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000122,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.2e-05,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",7.1e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.2e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.9e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000123,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8.1e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.3e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.7e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),8.1e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.2e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),72.0,,,,
1.8.51,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00185,,,,
1.8.51,JSC,persistent hash maps,[key :f0] (hash key),5.4e-05,,,,
1.8.51,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",5.1e-05,,,,
1.8.51,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.8e-05,,,,
1.8.51,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.37,,,,
1.8.51,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.27,,,,
1.8.51,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.63,,,,
1.8.51,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.67,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000102,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.2e-05,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.4e-05,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000111,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00017,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000243,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),119.0,,,,
1.8.51,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000148,,,,
1.8.51,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),41.0,,,,
1.8.51,JSC,set ops,[] #{},4.3e-05,,,,
1.8.51,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.8.51,JSC,set ops,[v [1 2 3]] (set v),0.000362,,,,
1.8.51,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000156,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.3e-05,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),8.2e-05,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (coll 2),9.6e-05,,,,
1.8.51,JSC,seq ops,[coll (range 500000)] (reduce + coll),21.0,,,,
1.8.51,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.023,,,,
1.8.51,JSC,reader,[s big-str-data] (reader/read-string s),0.653,,,,
1.8.51,JSC,range,[r (range 100000)] (last r),2.6,,,,
1.8.51,JSC,lazy-seq - first run,[r r] (last r),201.0,,,,
1.8.51,JSC,lazy-seq - second run,[r r] (last r),64.0,,,,
1.8.51,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.62,,,,
1.8.51,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.189,,,,
1.8.51,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),138.0,,,,
1.8.51,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.5,,,,
1.8.51,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.0,,,,
1.8.51,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.8.51,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.5,,,,
1.8.51,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.6,,,,
1.8.51,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),10.1,,,,
1.8.51,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),55.9,,,,
1.8.51,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.5,,,,
1.8.51,JSC,multimethods,[] (simple-multi :foo),0.00026,,,,
1.8.51,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00121,,,,
1.8.51,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00029,,,,
1.8.51,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00079,,,,
1.8.51,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),13.8,,,,
1.8.40,V8,identity,[x 1] (identity x),9.09e-06,,,,
1.8.40,V8,symbol construction,[] (symbol (quote foo)),2.7e-05,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.27,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.24,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.8.40,V8,instance?,[coll []] (instance? PersistentVector coll),0.00051,,,,
1.8.40,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000503,,,,
1.8.40,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000501,,,,
1.8.40,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3e-05,,,,
1.8.40,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.5e-05,,,,
1.8.40,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.8.40,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000114,,,,
1.8.40,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.8.40,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.8.40,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.6e-05,,,,
1.8.40,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000563,,,,
1.8.40,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (first coll),2.2e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (-first coll),1.5e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (rest coll),1.3e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.8.40,V8,list ops,[] (list),4e-06,,,,
1.8.40,V8,list ops,[] (list 1 2 3),0.000553,,,,
1.8.40,V8,vector ops,[] [],3e-06,,,,
1.8.40,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000573,,,,
1.8.40,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000562,,,,
1.8.40,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000555,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.1e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.3e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (coll 0),0.000504,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.8.40,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.8.40,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.8.40,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.8e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (-first coll),2.2e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.5e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.5e-05,,,,
1.8.40,V8,large vector ops,[] (reduce conj [] (range 40000)),7.1,,,,
1.8.40,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.8.40,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00066,,,,
1.8.40,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00025,,,,
1.8.40,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.8.40,V8,chunked seqs,[] (-next v),3.4e-05,,,,
1.8.40,V8,chunked seqs,[] (-rest v),3e-05,,,,
1.8.40,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),550.0,,,,
1.8.40,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),3.9,,,,
1.8.40,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.27,,,,
1.8.40,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.55,,,,
1.8.40,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),94.0,,,,
1.8.40,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.9,,,,
1.8.40,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.5,,,,
1.8.40,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.3,,,,
1.8.40,V8,apply,[] (list 1 2 3 4 5),0.000134,,,,
1.8.40,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000139,,,,
1.8.40,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000434,,,,
1.8.40,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.00014,,,,
1.8.40,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000234,,,,
1.8.40,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000834,,,,
1.8.40,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000331,,,,
1.8.40,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000318,,,,
1.8.40,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000247,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001615,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.8.40,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.00118,,,,
1.8.40,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.3e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.1e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.9e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.2e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.7e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),9.9e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.3e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.7e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),7e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.0001,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.4e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.3e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000102,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.4e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.8e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.5e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.8.40,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00314,,,,
1.8.40,V8,persistent hash maps,[key :f0] (hash key),2.5e-05,,,,
1.8.40,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.2e-05,,,,
1.8.40,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.8.40,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.14,,,,
1.8.40,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.95,,,,
1.8.40,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.78,,,,
1.8.40,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.1,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (:f0 coll),6.7e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (get coll :f0),5.1e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),3.9e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.1e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000257,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00034,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),77.0,,,,
1.8.40,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000123,,,,
1.8.40,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),61.0,,,,
1.8.40,V8,set ops,[] #{},4e-06,,,,
1.8.40,V8,set ops,[] #{1 3 2},4e-06,,,,
1.8.40,V8,set ops,[v [1 2 3]] (set v),0.00031,,,,
1.8.40,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000306,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (get coll 2),6.9e-05,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (coll 2),8.9e-05,,,,
1.8.40,V8,seq ops,[coll (range 500000)] (reduce + coll),25.0,,,,
1.8.40,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.03,,,,
1.8.40,V8,reader,[s big-str-data] (reader/read-string s),0.784,,,,
1.8.40,V8,range,[r (range 100000)] (last r),4.1,,,,
1.8.40,V8,lazy-seq - first run,[r r] (last r),460.0,,,,
1.8.40,V8,lazy-seq - second run,[r r] (last r),85.0,,,,
1.8.40,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.483,,,,
1.8.40,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.132,,,,
1.8.40,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),314.0,,,,
1.8.40,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),55.0,,,,
1.8.40,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),41.25,,,,
1.8.40,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.8.40,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.0,,,,
1.8.40,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),10.3,,,,
1.8.40,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),175.8,,,,
1.8.40,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),179.1,,,,
1.8.40,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),8.3,,,,
1.8.40,V8,multimethods,[] (simple-multi :foo),0.000154,,,,
1.8.40,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.8.40,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00036,,,,
1.8.40,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00111,,,,
1.8.40,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),15.4,,,,
1.8.40,SM,identity,[x 1] (identity x),8.52e-06,,,,
1.8.40,SM,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),2.72,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.8.40,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.8.40,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.8.40,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.8e-05,,,,
1.8.40,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000478,,,,
1.8.40,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001352,,,,
1.8.40,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000692,,,,
1.8.40,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001188,,,,
1.8.40,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000172,,,,
1.8.40,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.00084,,,,
1.8.40,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000522,,,,
1.8.40,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001864,,,,
1.8.40,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (first coll),0.00011,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (-first coll),8.5e-05,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (rest coll),9.2e-05,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.8e-05,,,,
1.8.40,SM,list ops,[] (list),1e-05,,,,
1.8.40,SM,list ops,[] (list 1 2 3),0.001268,,,,
1.8.40,SM,vector ops,[] [],1.1e-05,,,,
1.8.40,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000567,,,,
1.8.40,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000666,,,,
1.8.40,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000521,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (transient coll),0.00203,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000274,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000165,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000168,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (coll 0),0.000194,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000975,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.00091,,,,
1.8.40,SM,vector ops,[coll []] (-conj coll 1),0.00076,,,,
1.8.40,SM,vector ops,[coll [1]] (-conj coll 2),0.00079,,,,
1.8.40,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000827,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (seq coll),0.000652,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000409,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.6e-05,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000305,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000178,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.00018,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000179,,,,
1.8.40,SM,large vector ops,[] (reduce conj [] (range 40000)),8.2,,,,
1.8.40,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00167,,,,
1.8.40,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00249,,,,
1.8.40,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00171,,,,
1.8.40,SM,chunked seqs,[] (-first v),0.000179,,,,
1.8.40,SM,chunked seqs,[] (-next v),0.000174,,,,
1.8.40,SM,chunked seqs,[] (-rest v),0.000179,,,,
1.8.40,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),232.0,,,,
1.8.40,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.8,,,,
1.8.40,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.59,,,,
1.8.40,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.27,,,,
1.8.40,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),76.0,,,,
1.8.40,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.1,,,,
1.8.40,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.5,,,,
1.8.40,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.2,,,,
1.8.40,SM,apply,[] (list 1 2 3 4 5),0.00033,,,,
1.8.40,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000308,,,,
1.8.40,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00037,,,,
1.8.40,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000363,,,,
1.8.40,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000378,,,,
1.8.40,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000949,,,,
1.8.40,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000367,,,,
1.8.40,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000382,,,,
1.8.40,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000396,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000178,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002089,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000174,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.00018,,,,
1.8.40,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002677,,,,
1.8.40,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.00025,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000213,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000335,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000203,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000215,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000262,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.00021,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00036,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000224,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000224,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000254,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000202,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000358,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000201,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.00023,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000215,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000219,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.0002,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000205,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000201,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000227,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.00021,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000213,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",165.0,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.00018,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000172,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000216,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000224,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),239.0,,,,
1.8.40,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0034,,,,
1.8.40,SM,persistent hash maps,[key :f0] (hash key),0.000182,,,,
1.8.40,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000167,,,,
1.8.40,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000177,,,,
1.8.40,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.61,,,,
1.8.40,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.22,,,,
1.8.40,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.05,,,,
1.8.40,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.07,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000233,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000223,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.0002,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000238,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00058,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000544,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),271.0,,,,
1.8.40,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000301,,,,
1.8.40,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),492.0,,,,
1.8.40,SM,set ops,[] #{},0.000143,,,,
1.8.40,SM,set ops,[] #{1 3 2},0.000135,,,,
1.8.40,SM,set ops,[v [1 2 3]] (set v),0.000368,,,,
1.8.40,SM,set ops,[] (hash-set 1 2 3),0.000135,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000384,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000202,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000195,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (coll 2),0.000192,,,,
1.8.40,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.8.40,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.096,,,,
1.8.40,SM,reader,[s big-str-data] (reader/read-string s),1.776,,,,
1.8.40,SM,range,[r (range 100000)] (last r),5.2,,,,
1.8.40,SM,lazy-seq - first run,[r r] (last r),435.0,,,,
1.8.40,SM,lazy-seq - second run,[r r] (last r),54.0,,,,
1.8.40,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.603,,,,
1.8.40,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.433,,,,
1.8.40,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),207.0,,,,
1.8.40,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),41.0,,,,
1.8.40,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),187.25,,,,
1.8.40,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),118.5,,,,
1.8.40,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.1,,,,
1.8.40,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.7,,,,
1.8.40,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),23.3,,,,
1.8.40,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),174.5,,,,
1.8.40,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.1,,,,
1.8.40,SM,multimethods,[] (simple-multi :foo),0.00028,,,,
1.8.40,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00327,,,,
1.8.40,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00194,,,,
1.8.40,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00265,,,,
1.8.40,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),53.3,,,,
1.8.40,JSC,identity,[x 1] (identity x),1.517e-05,,,,
1.8.40,JSC,symbol construction,[] (symbol (quote foo)),4.8e-05,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.62,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.8.40,JSC,instance?,[coll []] (instance? PersistentVector coll),4.8e-05,,,,
1.8.40,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.2e-05,,,,
1.8.40,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.8.40,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.00014,,,,
1.8.40,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6.4e-05,,,,
1.8.40,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000185,,,,
1.8.40,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.3e-05,,,,
1.8.40,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.8.40,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.8.40,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.8e-05,,,,
1.8.40,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000223,,,,
1.8.40,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (first coll),4.1e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (-first coll),4.2e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (-rest coll),4.2e-05,,,,
1.8.40,JSC,list ops,[] (list),3.3e-05,,,,
1.8.40,JSC,list ops,[] (list 1 2 3),9.9e-05,,,,
1.8.40,JSC,vector ops,[] [],3.8e-05,,,,
1.8.40,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.9e-05,,,,
1.8.40,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.8e-05,,,,
1.8.40,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.8e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00031,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (coll 0),5.5e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.4e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.8.40,JSC,vector ops,[coll []] (-conj coll 1),7.7e-05,,,,
1.8.40,JSC,vector ops,[coll [1]] (-conj coll 2),7.6e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (seq coll),5.5e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.3e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (first coll),4.9e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.2e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.00018,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.2e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.8.40,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.8.40,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00035,,,,
1.8.40,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00058,,,,
1.8.40,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.8.40,JSC,chunked seqs,[] (-first v),4.8e-05,,,,
1.8.40,JSC,chunked seqs,[] (-next v),0.000193,,,,
1.8.40,JSC,chunked seqs,[] (-rest v),5.9e-05,,,,
1.8.40,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),68.0,,,,
1.8.40,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.9,,,,
1.8.40,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.11,,,,
1.8.40,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.42,,,,
1.8.40,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),46.0,,,,
1.8.40,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.8.40,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.8.40,JSC,apply,[coll (into [] (range 100000))] (apply + coll),4.2,,,,
1.8.40,JSC,apply,[] (list 1 2 3 4 5),0.000178,,,,
1.8.40,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000165,,,,
1.8.40,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000233,,,,
1.8.40,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000173,,,,
1.8.40,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.00017,,,,
1.8.40,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.00053,,,,
1.8.40,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000232,,,,
1.8.40,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000223,,,,
1.8.40,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000275,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000864,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),5.3e-05,,,,
1.8.40,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001047,,,,
1.8.40,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000104,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.00011,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000109,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.9e-05,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000116,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.4e-05,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.8e-05,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000107,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),7e-05,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000109,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",7.4e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000125,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.6e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.4e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.4e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),71.0,,,,
1.8.40,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00188,,,,
1.8.40,JSC,persistent hash maps,[key :f0] (hash key),5.6e-05,,,,
1.8.40,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.7e-05,,,,
1.8.40,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.7e-05,,,,
1.8.40,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.41,,,,
1.8.40,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.8.40,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.71,,,,
1.8.40,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.69,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.6e-05,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.5e-05,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.5e-05,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000111,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000176,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000244,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),119.0,,,,
1.8.40,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000143,,,,
1.8.40,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),37.0,,,,
1.8.40,JSC,set ops,[] #{},3.8e-05,,,,
1.8.40,JSC,set ops,[] #{1 3 2},3.5e-05,,,,
1.8.40,JSC,set ops,[v [1 2 3]] (set v),0.000376,,,,
1.8.40,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000159,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.6e-05,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (coll 2),9.4e-05,,,,
1.8.40,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.8.40,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.026,,,,
1.8.40,JSC,reader,[s big-str-data] (reader/read-string s),0.643,,,,
1.8.40,JSC,range,[r (range 100000)] (last r),2.4,,,,
1.8.40,JSC,lazy-seq - first run,[r r] (last r),206.0,,,,
1.8.40,JSC,lazy-seq - second run,[r r] (last r),70.0,,,,
1.8.40,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.631,,,,
1.8.40,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.196,,,,
1.8.40,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),139.0,,,,
1.8.40,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.0,,,,
1.8.40,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.5,,,,
1.8.40,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.8.40,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.7,,,,
1.8.40,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),5.1,,,,
1.8.40,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),9.9,,,,
1.8.40,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),66.5,,,,
1.8.40,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.7,,,,
1.8.40,JSC,multimethods,[] (simple-multi :foo),0.000266,,,,
1.8.40,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.8.40,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00031,,,,
1.8.40,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00079,,,,
1.8.40,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),14.2,,,,
1.8.34,V8,identity,[x 1] (identity x),9.13e-06,,,,
1.8.34,V8,symbol construction,[] (symbol (quote foo)),2.3e-05,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.26,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.23,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.1,,,,
1.8.34,V8,instance?,[coll []] (instance? PersistentVector coll),0.000511,,,,
1.8.34,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000511,,,,
1.8.34,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.00051,,,,
1.8.34,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.9e-05,,,,
1.8.34,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.7e-05,,,,
1.8.34,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.8.34,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000113,,,,
1.8.34,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.8.34,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.8.34,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.5e-05,,,,
1.8.34,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000564,,,,
1.8.34,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.3e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (first coll),1.9e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (-first coll),1.8e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.8.34,V8,list ops,[] (list),4e-06,,,,
1.8.34,V8,list ops,[] (list 1 2 3),0.00056,,,,
1.8.34,V8,vector ops,[] [],4e-06,,,,
1.8.34,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000572,,,,
1.8.34,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000562,,,,
1.8.34,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000564,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (transient coll),0.00023,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.1e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (coll 0),0.000507,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (conj coll 4),5e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.8.34,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.8.34,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.8.34,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (first coll),4.5e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.7e-05,,,,
1.8.34,V8,large vector ops,[] (reduce conj [] (range 40000)),6.7,,,,
1.8.34,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00026,,,,
1.8.34,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00071,,,,
1.8.34,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.8.34,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.8.34,V8,chunked seqs,[] (-next v),3.5e-05,,,,
1.8.34,V8,chunked seqs,[] (-rest v),3.1e-05,,,,
1.8.34,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),559.0,,,,
1.8.34,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),3.7,,,,
1.8.34,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.19,,,,
1.8.34,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.47,,,,
1.8.34,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),94.0,,,,
1.8.34,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.9,,,,
1.8.34,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.5,,,,
1.8.34,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.5,,,,
1.8.34,V8,apply,[] (list 1 2 3 4 5),0.000126,,,,
1.8.34,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000142,,,,
1.8.34,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00046,,,,
1.8.34,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000146,,,,
1.8.34,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000232,,,,
1.8.34,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000814,,,,
1.8.34,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000339,,,,
1.8.34,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000318,,,,
1.8.34,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000248,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.9e-05,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001539,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.8.34,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001312,,,,
1.8.34,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.6e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.3e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.5e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.8e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.8e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),8.9e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.9e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000108,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.3e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.4e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.6e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.6e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),9.8e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8.1e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.2e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.8e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.6e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.9e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000121,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.8e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.5e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.4e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),41.0,,,,
1.8.34,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00312,,,,
1.8.34,V8,persistent hash maps,[key :f0] (hash key),2.6e-05,,,,
1.8.34,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.8.34,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.8.34,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.24,,,,
1.8.34,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.01,,,,
1.8.34,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.81,,,,
1.8.34,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.04,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (:f0 coll),6.3e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (get coll :f0),5.1e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),3.9e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.2e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000248,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000346,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),76.0,,,,
1.8.34,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000106,,,,
1.8.34,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),64.0,,,,
1.8.34,V8,set ops,[] #{},6e-06,,,,
1.8.34,V8,set ops,[] #{1 3 2},5e-06,,,,
1.8.34,V8,set ops,[v [1 2 3]] (set v),0.000304,,,,
1.8.34,V8,set ops,[] (hash-set 1 2 3),3e-06,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000272,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (get coll 2),7.1e-05,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.9e-05,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (coll 2),7e-05,,,,
1.8.34,V8,seq ops,[coll (range 500000)] (reduce + coll),27.0,,,,
1.8.34,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.8.34,V8,reader,[s big-str-data] (reader/read-string s),0.776,,,,
1.8.34,V8,range,[r (range 100000)] (last r),3.7,,,,
1.8.34,V8,lazy-seq - first run,[r r] (last r),462.0,,,,
1.8.34,V8,lazy-seq - second run,[r r] (last r),83.0,,,,
1.8.34,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.493,,,,
1.8.34,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.129,,,,
1.8.34,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),311.0,,,,
1.8.34,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.75,,,,
1.8.34,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),42.5,,,,
1.8.34,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.8.34,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.6,,,,
1.8.34,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),9.9,,,,
1.8.34,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),176.4,,,,
1.8.34,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),167.5,,,,
1.8.34,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),7.8,,,,
1.8.34,V8,multimethods,[] (simple-multi :foo),0.000153,,,,
1.8.34,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.8.34,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00035,,,,
1.8.34,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00108,,,,
1.8.34,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),16.2,,,,
1.8.34,SM,identity,[x 1] (identity x),9.08e-06,,,,
1.8.34,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.58,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.09,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.8.34,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.8.34,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.8.34,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3e-05,,,,
1.8.34,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000557,,,,
1.8.34,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001356,,,,
1.8.34,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.00077,,,,
1.8.34,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001165,,,,
1.8.34,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000178,,,,
1.8.34,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000809,,,,
1.8.34,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000448,,,,
1.8.34,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00195,,,,
1.8.34,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (first coll),0.000112,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (rest coll),8e-05,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.8e-05,,,,
1.8.34,SM,list ops,[] (list),8e-06,,,,
1.8.34,SM,list ops,[] (list 1 2 3),0.001309,,,,
1.8.34,SM,vector ops,[] [],9e-06,,,,
1.8.34,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000917,,,,
1.8.34,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000942,,,,
1.8.34,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000772,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (transient coll),0.00187,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000277,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.00017,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000169,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (coll 0),0.000196,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.001303,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.001153,,,,
1.8.34,SM,vector ops,[coll []] (-conj coll 1),0.000754,,,,
1.8.34,SM,vector ops,[coll [1]] (-conj coll 2),0.000778,,,,
1.8.34,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000567,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (seq coll),0.000189,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000179,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.00019,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000165,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000182,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000181,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000183,,,,
1.8.34,SM,large vector ops,[] (reduce conj [] (range 40000)),8.3,,,,
1.8.34,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00168,,,,
1.8.34,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00253,,,,
1.8.34,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00171,,,,
1.8.34,SM,chunked seqs,[] (-first v),0.000178,,,,
1.8.34,SM,chunked seqs,[] (-next v),0.000185,,,,
1.8.34,SM,chunked seqs,[] (-rest v),0.000179,,,,
1.8.34,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),230.0,,,,
1.8.34,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.4,,,,
1.8.34,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.6,,,,
1.8.34,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.17,,,,
1.8.34,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.8.34,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.8.34,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.5,,,,
1.8.34,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.3,,,,
1.8.34,SM,apply,[] (list 1 2 3 4 5),0.000357,,,,
1.8.34,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000312,,,,
1.8.34,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000394,,,,
1.8.34,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000343,,,,
1.8.34,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000355,,,,
1.8.34,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000943,,,,
1.8.34,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000367,,,,
1.8.34,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000358,,,,
1.8.34,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000398,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000185,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002038,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000185,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000184,,,,
1.8.34,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.003577,,,,
1.8.34,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000267,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000206,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000331,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000206,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000236,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000265,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000209,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000347,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000243,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000228,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000251,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000209,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000327,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000205,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000232,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000218,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000207,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000201,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000209,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.00021,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000233,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000204,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.00021,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",167.0,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000181,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000177,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000221,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000219,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),231.0,,,,
1.8.34,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00334,,,,
1.8.34,SM,persistent hash maps,[key :f0] (hash key),0.000178,,,,
1.8.34,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000169,,,,
1.8.34,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000177,,,,
1.8.34,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.6,,,,
1.8.34,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.3,,,,
1.8.34,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.0,,,,
1.8.34,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.81,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000243,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000221,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000206,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000238,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000595,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000632,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),292.0,,,,
1.8.34,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000304,,,,
1.8.34,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),489.0,,,,
1.8.34,SM,set ops,[] #{},0.000149,,,,
1.8.34,SM,set ops,[] #{1 3 2},0.000142,,,,
1.8.34,SM,set ops,[v [1 2 3]] (set v),0.000381,,,,
1.8.34,SM,set ops,[] (hash-set 1 2 3),0.000139,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000381,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000225,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000195,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (coll 2),0.000207,,,,
1.8.34,SM,seq ops,[coll (range 500000)] (reduce + coll),18.0,,,,
1.8.34,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.096,,,,
1.8.34,SM,reader,[s big-str-data] (reader/read-string s),1.778,,,,
1.8.34,SM,range,[r (range 100000)] (last r),5.1,,,,
1.8.34,SM,lazy-seq - first run,[r r] (last r),439.0,,,,
1.8.34,SM,lazy-seq - second run,[r r] (last r),57.0,,,,
1.8.34,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.66,,,,
1.8.34,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.452,,,,
1.8.34,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),225.0,,,,
1.8.34,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.25,,,,
1.8.34,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),196.0,,,,
1.8.34,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),118.0,,,,
1.8.34,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.6,,,,
1.8.34,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.3,,,,
1.8.34,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),22.9,,,,
1.8.34,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),175.9,,,,
1.8.34,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),2.8,,,,
1.8.34,SM,multimethods,[] (simple-multi :foo),0.000286,,,,
1.8.34,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0032,,,,
1.8.34,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00191,,,,
1.8.34,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00256,,,,
1.8.34,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),54.3,,,,
1.8.34,JSC,identity,[x 1] (identity x),1.429e-05,,,,
1.8.34,JSC,symbol construction,[] (symbol (quote foo)),4.6e-05,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.69,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.63,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.8.34,JSC,instance?,[coll []] (instance? PersistentVector coll),5.6e-05,,,,
1.8.34,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.6e-05,,,,
1.8.34,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.8.34,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000138,,,,
1.8.34,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6.1e-05,,,,
1.8.34,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000185,,,,
1.8.34,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.5e-05,,,,
1.8.34,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.8.34,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.8.34,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.6e-05,,,,
1.8.34,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000221,,,,
1.8.34,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (first coll),4.5e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (-first coll),4.2e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.8.34,JSC,list ops,[] (list),3.4e-05,,,,
1.8.34,JSC,list ops,[] (list 1 2 3),9.7e-05,,,,
1.8.34,JSC,vector ops,[] [],3.8e-05,,,,
1.8.34,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.8.34,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.0001,,,,
1.8.34,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.7e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00028,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.5e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (coll 0),5.7e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.5e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.8.34,JSC,vector ops,[coll []] (-conj coll 1),7.7e-05,,,,
1.8.34,JSC,vector ops,[coll [1]] (-conj coll 2),7.3e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2]] (-conj coll 3),8e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (seq coll),5.9e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.5e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.3e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.9e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000187,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.2e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.3e-05,,,,
1.8.34,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.8.34,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00037,,,,
1.8.34,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00058,,,,
1.8.34,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.8.34,JSC,chunked seqs,[] (-first v),5.4e-05,,,,
1.8.34,JSC,chunked seqs,[] (-next v),0.000185,,,,
1.8.34,JSC,chunked seqs,[] (-rest v),5.9e-05,,,,
1.8.34,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),67.0,,,,
1.8.34,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),2.2,,,,
1.8.34,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.16,,,,
1.8.34,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.36,,,,
1.8.34,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),44.0,,,,
1.8.34,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.8.34,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.8.34,JSC,apply,[coll (into [] (range 100000))] (apply + coll),4.0,,,,
1.8.34,JSC,apply,[] (list 1 2 3 4 5),0.00017,,,,
1.8.34,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000168,,,,
1.8.34,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000239,,,,
1.8.34,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000171,,,,
1.8.34,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000168,,,,
1.8.34,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000536,,,,
1.8.34,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000237,,,,
1.8.34,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000224,,,,
1.8.34,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000298,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000945,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),5.4e-05,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.8.34,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001058,,,,
1.8.34,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000108,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.6e-05,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000106,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000112,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.9e-05,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000116,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.7e-05,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.9e-05,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000105,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000113,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.4e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.9e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.1e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000123,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.8e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.3e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),7e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.1e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.7e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),72.0,,,,
1.8.34,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00183,,,,
1.8.34,JSC,persistent hash maps,[key :f0] (hash key),5e-05,,,,
1.8.34,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.8.34,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.7e-05,,,,
1.8.34,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.35,,,,
1.8.34,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.8.34,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.73,,,,
1.8.34,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.75,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000106,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.9e-05,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.7e-05,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000109,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000172,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000257,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),123.0,,,,
1.8.34,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000148,,,,
1.8.34,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),39.0,,,,
1.8.34,JSC,set ops,[] #{},4e-05,,,,
1.8.34,JSC,set ops,[] #{1 3 2},3.5e-05,,,,
1.8.34,JSC,set ops,[v [1 2 3]] (set v),0.000372,,,,
1.8.34,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000165,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.1e-05,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (coll 2),9.5e-05,,,,
1.8.34,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.8.34,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.027,,,,
1.8.34,JSC,reader,[s big-str-data] (reader/read-string s),0.643,,,,
1.8.34,JSC,range,[r (range 100000)] (last r),2.5,,,,
1.8.34,JSC,lazy-seq - first run,[r r] (last r),211.0,,,,
1.8.34,JSC,lazy-seq - second run,[r r] (last r),68.0,,,,
1.8.34,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.616,,,,
1.8.34,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.193,,,,
1.8.34,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),141.0,,,,
1.8.34,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.5,,,,
1.8.34,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.5,,,,
1.8.34,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.8.34,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.8,,,,
1.8.34,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.9,,,,
1.8.34,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),9.8,,,,
1.8.34,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),56.6,,,,
1.8.34,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.9,,,,
1.8.34,JSC,multimethods,[] (simple-multi :foo),0.00026,,,,
1.8.34,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0012,,,,
1.8.34,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00027,,,,
1.8.34,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00082,,,,
1.8.34,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),14.3,,,,
1.7.228,V8,identity,[x 1] (identity x),9.04e-06,,,,
1.7.228,V8,symbol construction,[] (symbol (quote foo)),2.2e-05,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.25,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.19,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.12,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.228,V8,instance?,[coll []] (instance? PersistentVector coll),0.000523,,,,
1.7.228,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000504,,,,
1.7.228,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000508,,,,
1.7.228,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3.1e-05,,,,
1.7.228,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.6e-05,,,,
1.7.228,V8,array & string ops,[coll (array 1 2 3)] (first coll),4e-05,,,,
1.7.228,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000115,,,,
1.7.228,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.8e-05,,,,
1.7.228,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.7.228,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.6e-05,,,,
1.7.228,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000566,,,,
1.7.228,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.3e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (first coll),2.1e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (-first coll),1.8e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (rest coll),1.5e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.7.228,V8,list ops,[] (list),3e-06,,,,
1.7.228,V8,list ops,[] (list 1 2 3),0.000549,,,,
1.7.228,V8,vector ops,[] [],3e-06,,,,
1.7.228,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00057,,,,
1.7.228,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000551,,,,
1.7.228,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000556,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.1e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.4e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.3e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (coll 0),0.0005,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.228,V8,vector ops,[coll []] (-conj coll 1),3.8e-05,,,,
1.7.228,V8,vector ops,[coll [1]] (-conj coll 2),3.9e-05,,,,
1.7.228,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.3e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.7e-05,,,,
1.7.228,V8,large vector ops,[] (reduce conj [] (range 40000)),7.1,,,,
1.7.228,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.228,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00066,,,,
1.7.228,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00025,,,,
1.7.228,V8,chunked seqs,[] (-first v),1.7e-05,,,,
1.7.228,V8,chunked seqs,[] (-next v),3.2e-05,,,,
1.7.228,V8,chunked seqs,[] (-rest v),3e-05,,,,
1.7.228,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),567.0,,,,
1.7.228,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),4.2,,,,
1.7.228,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.37,,,,
1.7.228,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.52,,,,
1.7.228,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),104.0,,,,
1.7.228,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.5,,,,
1.7.228,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.5,,,,
1.7.228,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.5,,,,
1.7.228,V8,apply,[] (list 1 2 3 4 5),0.000124,,,,
1.7.228,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000148,,,,
1.7.228,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000439,,,,
1.7.228,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000144,,,,
1.7.228,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000231,,,,
1.7.228,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000814,,,,
1.7.228,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000306,,,,
1.7.228,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000292,,,,
1.7.228,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000248,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001622,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.228,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001137,,,,
1.7.228,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.1e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.3e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.8e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),8e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.9e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000103,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.7e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.1e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.6e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000104,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8.2e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.1e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.9e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.4e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.6e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.5e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.3e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.1e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.1e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.2e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.7.228,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00309,,,,
1.7.228,V8,persistent hash maps,[key :f0] (hash key),2e-05,,,,
1.7.228,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.7e-05,,,,
1.7.228,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.228,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.17,,,,
1.7.228,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.01,,,,
1.7.228,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.76,,,,
1.7.228,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.92,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (:f0 coll),6.3e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (get coll :f0),5.2e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.5e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000248,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000421,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),89.0,,,,
1.7.228,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000163,,,,
1.7.228,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),69.0,,,,
1.7.228,V8,set ops,[] #{},4e-06,,,,
1.7.228,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.228,V8,set ops,[v [1 2 3]] (set v),0.000338,,,,
1.7.228,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000302,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (get coll 2),6.5e-05,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.2e-05,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (coll 2),7.1e-05,,,,
1.7.228,V8,seq ops,[coll (range 500000)] (reduce + coll),22.0,,,,
1.7.228,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.028,,,,
1.7.228,V8,reader,[s big-str-data] (reader/read-string s),0.747,,,,
1.7.228,V8,range,[r (range 100000)] (last r),4.0,,,,
1.7.228,V8,lazy-seq - first run,[r r] (last r),469.0,,,,
1.7.228,V8,lazy-seq - second run,[r r] (last r),89.0,,,,
1.7.228,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.519,,,,
1.7.228,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.129,,,,
1.7.228,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),318.0,,,,
1.7.228,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),53.25,,,,
1.7.228,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.25,,,,
1.7.228,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.228,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.3,,,,
1.7.228,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),10.2,,,,
1.7.228,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),209.3,,,,
1.7.228,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),177.7,,,,
1.7.228,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),7.8,,,,
1.7.228,V8,multimethods,[] (simple-multi :foo),0.000154,,,,
1.7.228,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00014,,,,
1.7.228,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00033,,,,
1.7.228,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00105,,,,
1.7.228,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),17.9,,,,
1.7.228,SM,identity,[x 1] (identity x),8.93e-06,,,,
1.7.228,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.58,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.7,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.42,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.45,,,,
1.7.228,SM,instance?,[coll []] (instance? PersistentVector coll),1.8e-05,,,,
1.7.228,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.7.228,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.7.228,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000536,,,,
1.7.228,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001318,,,,
1.7.228,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.00081,,,,
1.7.228,SM,array & string ops,"[coll ""foobar""] (first coll)",0.0013,,,,
1.7.228,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000175,,,,
1.7.228,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000883,,,,
1.7.228,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000441,,,,
1.7.228,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001951,,,,
1.7.228,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.7e-05,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (first coll),0.000117,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (rest coll),8.8e-05,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.7.228,SM,list ops,[] (list),8e-06,,,,
1.7.228,SM,list ops,[] (list 1 2 3),0.001224,,,,
1.7.228,SM,vector ops,[] [],9e-06,,,,
1.7.228,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00059,,,,
1.7.228,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00068,,,,
1.7.228,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000493,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (transient coll),0.00193,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000254,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000223,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000254,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (coll 0),0.000228,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000843,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000797,,,,
1.7.228,SM,vector ops,[coll []] (-conj coll 1),0.000746,,,,
1.7.228,SM,vector ops,[coll [1]] (-conj coll 2),0.000759,,,,
1.7.228,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000793,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (seq coll),0.000553,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000578,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000182,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000167,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000185,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000177,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000246,,,,
1.7.228,SM,large vector ops,[] (reduce conj [] (range 40000)),8.0,,,,
1.7.228,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00168,,,,
1.7.228,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00249,,,,
1.7.228,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00165,,,,
1.7.228,SM,chunked seqs,[] (-first v),0.000175,,,,
1.7.228,SM,chunked seqs,[] (-next v),0.000182,,,,
1.7.228,SM,chunked seqs,[] (-rest v),0.00018,,,,
1.7.228,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),223.0,,,,
1.7.228,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.5,,,,
1.7.228,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.65,,,,
1.7.228,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.62,,,,
1.7.228,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),85.0,,,,
1.7.228,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.7.228,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.5,,,,
1.7.228,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.6,,,,
1.7.228,SM,apply,[] (list 1 2 3 4 5),0.000363,,,,
1.7.228,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000311,,,,
1.7.228,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000361,,,,
1.7.228,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000369,,,,
1.7.228,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000362,,,,
1.7.228,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000851,,,,
1.7.228,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000367,,,,
1.7.228,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000365,,,,
1.7.228,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000403,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000182,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001927,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.00018,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000175,,,,
1.7.228,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002519,,,,
1.7.228,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000256,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000195,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000336,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000201,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000211,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000255,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000213,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000328,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000209,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000224,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000258,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000202,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000328,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000211,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000226,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000213,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000203,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000203,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000201,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000201,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000239,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000204,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000212,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",164.0,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000179,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000183,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000217,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000221,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),236.0,,,,
1.7.228,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00343,,,,
1.7.228,SM,persistent hash maps,[key :f0] (hash key),0.000168,,,,
1.7.228,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000168,,,,
1.7.228,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000163,,,,
1.7.228,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.57,,,,
1.7.228,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.29,,,,
1.7.228,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.04,,,,
1.7.228,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.14,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000235,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000225,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000199,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.00024,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000579,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000553,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),279.0,,,,
1.7.228,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000304,,,,
1.7.228,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),503.0,,,,
1.7.228,SM,set ops,[] #{},0.000143,,,,
1.7.228,SM,set ops,[] #{1 3 2},0.000135,,,,
1.7.228,SM,set ops,[v [1 2 3]] (set v),0.000377,,,,
1.7.228,SM,set ops,[] (hash-set 1 2 3),0.000135,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000406,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000223,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000198,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (coll 2),0.000192,,,,
1.7.228,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.7.228,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.098,,,,
1.7.228,SM,reader,[s big-str-data] (reader/read-string s),1.798,,,,
1.7.228,SM,range,[r (range 100000)] (last r),4.8,,,,
1.7.228,SM,lazy-seq - first run,[r r] (last r),422.0,,,,
1.7.228,SM,lazy-seq - second run,[r r] (last r),52.0,,,,
1.7.228,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.584,,,,
1.7.228,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.429,,,,
1.7.228,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),219.0,,,,
1.7.228,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),43.25,,,,
1.7.228,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),185.5,,,,
1.7.228,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),117.0,,,,
1.7.228,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.1,,,,
1.7.228,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.5,,,,
1.7.228,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),22.6,,,,
1.7.228,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),176.6,,,,
1.7.228,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.1,,,,
1.7.228,SM,multimethods,[] (simple-multi :foo),0.000271,,,,
1.7.228,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00323,,,,
1.7.228,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00192,,,,
1.7.228,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00357,,,,
1.7.228,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),53.5,,,,
1.7.228,JSC,identity,[x 1] (identity x),1.003e-05,,,,
1.7.228,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.67,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.62,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.05,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.228,JSC,instance?,[coll []] (instance? PersistentVector coll),4.9e-05,,,,
1.7.228,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.6e-05,,,,
1.7.228,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.7.228,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000134,,,,
1.7.228,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.7e-05,,,,
1.7.228,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000184,,,,
1.7.228,JSC,array & string ops,"[coll ""foobar""] (first coll)",9.1e-05,,,,
1.7.228,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.228,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.228,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.8e-05,,,,
1.7.228,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00022,,,,
1.7.228,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (first coll),4.3e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.7.228,JSC,list ops,[] (list),3.2e-05,,,,
1.7.228,JSC,list ops,[] (list 1 2 3),0.000103,,,,
1.7.228,JSC,vector ops,[] [],3.8e-05,,,,
1.7.228,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.8e-05,,,,
1.7.228,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000106,,,,
1.7.228,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000101,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00028,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.7e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.9e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.7.228,JSC,vector ops,[coll []] (-conj coll 1),8e-05,,,,
1.7.228,JSC,vector ops,[coll [1]] (-conj coll 2),7.4e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2]] (-conj coll 3),8.1e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.5e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.3e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.7e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.00019,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.5e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.6e-05,,,,
1.7.228,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.0,,,,
1.7.228,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00034,,,,
1.7.228,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00058,,,,
1.7.228,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.228,JSC,chunked seqs,[] (-first v),5.9e-05,,,,
1.7.228,JSC,chunked seqs,[] (-next v),0.00019,,,,
1.7.228,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.7.228,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),72.0,,,,
1.7.228,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),2.0,,,,
1.7.228,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.19,,,,
1.7.228,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.62,,,,
1.7.228,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),42.0,,,,
1.7.228,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.7.228,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.7.228,JSC,apply,[coll (into [] (range 100000))] (apply + coll),3.8,,,,
1.7.228,JSC,apply,[] (list 1 2 3 4 5),0.000178,,,,
1.7.228,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000169,,,,
1.7.228,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000239,,,,
1.7.228,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000174,,,,
1.7.228,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000174,,,,
1.7.228,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000535,,,,
1.7.228,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000228,,,,
1.7.228,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.00023,,,,
1.7.228,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000283,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000966,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.8e-05,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),5.1e-05,,,,
1.7.228,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001095,,,,
1.7.228,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000107,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000111,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000112,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.9e-05,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000116,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.6e-05,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.6e-05,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000102,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000118,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.6e-05,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.9e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.6e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.8e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000128,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.7e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.3e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.7e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.1e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),76.0,,,,
1.7.228,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00183,,,,
1.7.228,JSC,persistent hash maps,[key :f0] (hash key),4.9e-05,,,,
1.7.228,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.228,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.5e-05,,,,
1.7.228,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.36,,,,
1.7.228,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.7.228,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.61,,,,
1.7.228,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.67,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000104,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.2e-05,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.4e-05,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.00011,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00016,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000251,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),118.0,,,,
1.7.228,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000155,,,,
1.7.228,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),38.0,,,,
1.7.228,JSC,set ops,[] #{},3.7e-05,,,,
1.7.228,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.7.228,JSC,set ops,[v [1 2 3]] (set v),0.000368,,,,
1.7.228,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000161,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.2e-05,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),8e-05,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (coll 2),9.5e-05,,,,
1.7.228,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.228,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.027,,,,
1.7.228,JSC,reader,[s big-str-data] (reader/read-string s),0.644,,,,
1.7.228,JSC,range,[r (range 100000)] (last r),2.7,,,,
1.7.228,JSC,lazy-seq - first run,[r r] (last r),257.0,,,,
1.7.228,JSC,lazy-seq - second run,[r r] (last r),69.0,,,,
1.7.228,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.62,,,,
1.7.228,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.201,,,,
1.7.228,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),156.0,,,,
1.7.228,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),36.5,,,,
1.7.228,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.25,,,,
1.7.228,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.25,,,,
1.7.228,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.4,,,,
1.7.228,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.6,,,,
1.7.228,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),10.8,,,,
1.7.228,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),67.2,,,,
1.7.228,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.7,,,,
1.7.228,JSC,multimethods,[] (simple-multi :foo),0.000236,,,,
1.7.228,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.228,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00052,,,,
1.7.228,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.0008,,,,
1.7.228,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),14.0,,,,
1.7.189,V8,identity,[x 1] (identity x),8.97e-06,,,,
1.7.189,V8,symbol construction,[] (symbol (quote foo)),2.1e-05,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.23,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.18,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.08,,,,
1.7.189,V8,instance?,[coll []] (instance? PersistentVector coll),0.000514,,,,
1.7.189,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000508,,,,
1.7.189,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000507,,,,
1.7.189,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3.2e-05,,,,
1.7.189,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.4e-05,,,,
1.7.189,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.189,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000114,,,,
1.7.189,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.7.189,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.7.189,V8,cloning & specify,[coll [1 2 3]] (clone coll),3e-05,,,,
1.7.189,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000559,,,,
1.7.189,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.3e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (first coll),1.9e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (-first coll),1.8e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (rest coll),1.5e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.7.189,V8,list ops,[] (list),4e-06,,,,
1.7.189,V8,list ops,[] (list 1 2 3),0.000555,,,,
1.7.189,V8,vector ops,[] [],4e-06,,,,
1.7.189,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000561,,,,
1.7.189,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000552,,,,
1.7.189,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000563,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (transient coll),0.00021,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.5e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (coll 0),0.000514,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.4e-05,,,,
1.7.189,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.189,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.189,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (seq coll),4.6e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-seq coll),2.4e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.8e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.189,V8,large vector ops,[] (reduce conj [] (range 40000)),6.7,,,,
1.7.189,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.189,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00067,,,,
1.7.189,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.189,V8,chunked seqs,[] (-first v),1.8e-05,,,,
1.7.189,V8,chunked seqs,[] (-next v),2.9e-05,,,,
1.7.189,V8,chunked seqs,[] (-rest v),3.2e-05,,,,
1.7.189,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),567.0,,,,
1.7.189,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),4.0,,,,
1.7.189,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.53,,,,
1.7.189,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.36,,,,
1.7.189,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),113.0,,,,
1.7.189,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.4,,,,
1.7.189,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.8,,,,
1.7.189,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.0,,,,
1.7.189,V8,apply,[] (list 1 2 3 4 5),0.000134,,,,
1.7.189,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000145,,,,
1.7.189,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000453,,,,
1.7.189,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000144,,,,
1.7.189,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000236,,,,
1.7.189,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.0008,,,,
1.7.189,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000327,,,,
1.7.189,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000314,,,,
1.7.189,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000253,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001521,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.189,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001132,,,,
1.7.189,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.4e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.3e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.6e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.1e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.2e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),9.9e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.7e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.8e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.4e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000102,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.5e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.6e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.4e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.3e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.2e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.2e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.5e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.7e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.5e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.4e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),38.0,,,,
1.7.189,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00334,,,,
1.7.189,V8,persistent hash maps,[key :f0] (hash key),2e-05,,,,
1.7.189,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.2e-05,,,,
1.7.189,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.189,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.16,,,,
1.7.189,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.02,,,,
1.7.189,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.82,,,,
1.7.189,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.18,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (:f0 coll),6e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (get coll :f0),5.4e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.3e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000243,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000419,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),88.0,,,,
1.7.189,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000161,,,,
1.7.189,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),68.0,,,,
1.7.189,V8,set ops,[] #{},4e-06,,,,
1.7.189,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.189,V8,set ops,[v [1 2 3]] (set v),0.000339,,,,
1.7.189,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000271,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (get coll 2),6.9e-05,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.3e-05,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (coll 2),7.1e-05,,,,
1.7.189,V8,seq ops,[coll (range 500000)] (reduce + coll),29.0,,,,
1.7.189,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.028,,,,
1.7.189,V8,reader,[s big-str-data] (reader/read-string s),0.75,,,,
1.7.189,V8,range,[r (range 100000)] (last r),3.7,,,,
1.7.189,V8,lazy-seq - first run,[r r] (last r),478.0,,,,
1.7.189,V8,lazy-seq - second run,[r r] (last r),90.0,,,,
1.7.189,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.512,,,,
1.7.189,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.132,,,,
1.7.189,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),308.0,,,,
1.7.189,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.5,,,,
1.7.189,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.5,,,,
1.7.189,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.7.189,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),7.9,,,,
1.7.189,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),10.1,,,,
1.7.189,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),177.1,,,,
1.7.189,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),174.9,,,,
1.7.189,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),8.0,,,,
1.7.189,V8,multimethods,[] (simple-multi :foo),0.000151,,,,
1.7.189,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.189,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00031,,,,
1.7.189,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00114,,,,
1.7.189,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),17.3,,,,
1.7.189,SM,identity,[x 1] (identity x),8.43e-06,,,,
1.7.189,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.59,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.21,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.36,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.7.189,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.7.189,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.7e-05,,,,
1.7.189,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.7.189,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.00051,,,,
1.7.189,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001295,,,,
1.7.189,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000804,,,,
1.7.189,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001252,,,,
1.7.189,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000179,,,,
1.7.189,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.00088,,,,
1.7.189,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000456,,,,
1.7.189,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001889,,,,
1.7.189,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (first coll),0.000122,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (-first coll),9.3e-05,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (rest coll),9.8e-05,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (-rest coll),6.8e-05,,,,
1.7.189,SM,list ops,[] (list),1e-05,,,,
1.7.189,SM,list ops,[] (list 1 2 3),0.001305,,,,
1.7.189,SM,vector ops,[] [],1.1e-05,,,,
1.7.189,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000685,,,,
1.7.189,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000735,,,,
1.7.189,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000529,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (transient coll),0.00186,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000236,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.00021,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000216,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (coll 0),0.000192,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000877,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000869,,,,
1.7.189,SM,vector ops,[coll []] (-conj coll 1),0.000754,,,,
1.7.189,SM,vector ops,[coll [1]] (-conj coll 2),0.000801,,,,
1.7.189,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000802,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (seq coll),0.000558,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000615,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000182,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000171,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000191,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000194,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000265,,,,
1.7.189,SM,large vector ops,[] (reduce conj [] (range 40000)),8.0,,,,
1.7.189,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00164,,,,
1.7.189,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00246,,,,
1.7.189,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00167,,,,
1.7.189,SM,chunked seqs,[] (-first v),0.000181,,,,
1.7.189,SM,chunked seqs,[] (-next v),0.000186,,,,
1.7.189,SM,chunked seqs,[] (-rest v),0.000176,,,,
1.7.189,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),227.0,,,,
1.7.189,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.4,,,,
1.7.189,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.46,,,,
1.7.189,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),18.47,,,,
1.7.189,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.7.189,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.7.189,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.6,,,,
1.7.189,SM,apply,[coll (into [] (range 100000))] (apply + coll),5.3,,,,
1.7.189,SM,apply,[] (list 1 2 3 4 5),0.00034,,,,
1.7.189,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000341,,,,
1.7.189,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000369,,,,
1.7.189,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000359,,,,
1.7.189,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000381,,,,
1.7.189,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000918,,,,
1.7.189,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000362,,,,
1.7.189,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.00037,,,,
1.7.189,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000391,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000183,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002181,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000176,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.00018,,,,
1.7.189,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002625,,,,
1.7.189,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000254,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000212,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000328,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000208,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000235,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.00026,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000215,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000355,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000208,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000228,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000258,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000205,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000339,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000208,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000209,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000197,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000205,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000203,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000203,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.00021,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000228,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000203,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000205,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",167.0,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000175,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000177,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000215,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000221,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),236.0,,,,
1.7.189,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00333,,,,
1.7.189,SM,persistent hash maps,[key :f0] (hash key),0.000169,,,,
1.7.189,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000171,,,,
1.7.189,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000172,,,,
1.7.189,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.6,,,,
1.7.189,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.23,,,,
1.7.189,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.06,,,,
1.7.189,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.58,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000242,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000229,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000203,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000239,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000627,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000597,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),275.0,,,,
1.7.189,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000291,,,,
1.7.189,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),501.0,,,,
1.7.189,SM,set ops,[] #{},0.000147,,,,
1.7.189,SM,set ops,[] #{1 3 2},0.000136,,,,
1.7.189,SM,set ops,[v [1 2 3]] (set v),0.000366,,,,
1.7.189,SM,set ops,[] (hash-set 1 2 3),0.000134,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000376,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (get coll 2),0.0002,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.00019,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (coll 2),0.000199,,,,
1.7.189,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.7.189,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.095,,,,
1.7.189,SM,reader,[s big-str-data] (reader/read-string s),1.751,,,,
1.7.189,SM,range,[r (range 100000)] (last r),5.0,,,,
1.7.189,SM,lazy-seq - first run,[r r] (last r),424.0,,,,
1.7.189,SM,lazy-seq - second run,[r r] (last r),56.0,,,,
1.7.189,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.638,,,,
1.7.189,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.415,,,,
1.7.189,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),210.0,,,,
1.7.189,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),44.25,,,,
1.7.189,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),198.25,,,,
1.7.189,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),119.0,,,,
1.7.189,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.2,,,,
1.7.189,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.4,,,,
1.7.189,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),23.6,,,,
1.7.189,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),174.4,,,,
1.7.189,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.1,,,,
1.7.189,SM,multimethods,[] (simple-multi :foo),0.000287,,,,
1.7.189,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00325,,,,
1.7.189,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0019,,,,
1.7.189,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00369,,,,
1.7.189,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),51.6,,,,
1.7.189,JSC,identity,[x 1] (identity x),1.206e-05,,,,
1.7.189,JSC,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.65,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.61,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.06,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.189,JSC,instance?,[coll []] (instance? PersistentVector coll),4.9e-05,,,,
1.7.189,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.2e-05,,,,
1.7.189,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.7.189,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000142,,,,
1.7.189,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.8e-05,,,,
1.7.189,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000178,,,,
1.7.189,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.4e-05,,,,
1.7.189,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.189,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.189,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.9e-05,,,,
1.7.189,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000222,,,,
1.7.189,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (first coll),4.4e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (-first coll),4.1e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (-rest coll),4.1e-05,,,,
1.7.189,JSC,list ops,[] (list),3.2e-05,,,,
1.7.189,JSC,list ops,[] (list 1 2 3),9.7e-05,,,,
1.7.189,JSC,vector ops,[] [],3.8e-05,,,,
1.7.189,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.7.189,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.4e-05,,,,
1.7.189,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.8e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (coll 0),5.4e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.5e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.3e-05,,,,
1.7.189,JSC,vector ops,[coll []] (-conj coll 1),7.8e-05,,,,
1.7.189,JSC,vector ops,[coll [1]] (-conj coll 2),8e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.3e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (first coll),4.8e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.3e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000177,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.4e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.6e-05,,,,
1.7.189,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.7.189,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.7.189,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00055,,,,
1.7.189,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.189,JSC,chunked seqs,[] (-first v),4.8e-05,,,,
1.7.189,JSC,chunked seqs,[] (-next v),0.000193,,,,
1.7.189,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.7.189,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),67.0,,,,
1.7.189,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),2.2,,,,
1.7.189,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.11,,,,
1.7.189,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.47,,,,
1.7.189,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),41.0,,,,
1.7.189,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.7.189,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.7.189,JSC,apply,[coll (into [] (range 100000))] (apply + coll),4.1,,,,
1.7.189,JSC,apply,[] (list 1 2 3 4 5),0.000178,,,,
1.7.189,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000166,,,,
1.7.189,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000234,,,,
1.7.189,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000176,,,,
1.7.189,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000169,,,,
1.7.189,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.00055,,,,
1.7.189,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000232,,,,
1.7.189,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000222,,,,
1.7.189,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000292,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000934,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.7.189,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001084,,,,
1.7.189,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000101,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000105,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000111,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.5e-05,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000114,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.2e-05,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.5e-05,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000107,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000115,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.6e-05,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.6e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.6e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000125,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.7e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.2e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.1e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.7e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),76.0,,,,
1.7.189,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00178,,,,
1.7.189,JSC,persistent hash maps,[key :f0] (hash key),4.8e-05,,,,
1.7.189,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.189,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.5e-05,,,,
1.7.189,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.33,,,,
1.7.189,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.25,,,,
1.7.189,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.61,,,,
1.7.189,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.66,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000102,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (get coll :f0),9e-05,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.1e-05,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000103,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000169,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000254,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),117.0,,,,
1.7.189,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000144,,,,
1.7.189,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),38.0,,,,
1.7.189,JSC,set ops,[] #{},4e-05,,,,
1.7.189,JSC,set ops,[] #{1 3 2},3.5e-05,,,,
1.7.189,JSC,set ops,[v [1 2 3]] (set v),0.000372,,,,
1.7.189,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000163,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.2e-05,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (coll 2),9.5e-05,,,,
1.7.189,JSC,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.7.189,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.027,,,,
1.7.189,JSC,reader,[s big-str-data] (reader/read-string s),0.635,,,,
1.7.189,JSC,range,[r (range 100000)] (last r),3.1,,,,
1.7.189,JSC,lazy-seq - first run,[r r] (last r),251.0,,,,
1.7.189,JSC,lazy-seq - second run,[r r] (last r),69.0,,,,
1.7.189,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.627,,,,
1.7.189,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.201,,,,
1.7.189,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),142.0,,,,
1.7.189,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),36.25,,,,
1.7.189,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.25,,,,
1.7.189,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.25,,,,
1.7.189,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.4,,,,
1.7.189,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),5.2,,,,
1.7.189,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),9.8,,,,
1.7.189,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),66.2,,,,
1.7.189,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.9,,,,
1.7.189,JSC,multimethods,[] (simple-multi :foo),0.000243,,,,
1.7.189,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00012,,,,
1.7.189,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00049,,,,
1.7.189,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00082,,,,
1.7.189,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),14.4,,,,
1.7.170,V8,identity,[x 1] (identity x),9.22e-06,,,,
1.7.170,V8,symbol construction,[] (symbol (quote foo)),2.2e-05,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.38,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.3,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.2,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.2,,,,
1.7.170,V8,instance?,[coll []] (instance? PersistentVector coll),0.000525,,,,
1.7.170,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000509,,,,
1.7.170,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000507,,,,
1.7.170,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.8e-05,,,,
1.7.170,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.4e-05,,,,
1.7.170,V8,array & string ops,[coll (array 1 2 3)] (first coll),4e-05,,,,
1.7.170,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000113,,,,
1.7.170,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.7.170,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.7.170,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.6e-05,,,,
1.7.170,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000574,,,,
1.7.170,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (first coll),2e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (rest coll),1.8e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.7.170,V8,list ops,[] (list),4e-06,,,,
1.7.170,V8,list ops,[] (list 1 2 3),0.000553,,,,
1.7.170,V8,vector ops,[] [],4e-06,,,,
1.7.170,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000565,,,,
1.7.170,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000558,,,,
1.7.170,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000574,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (transient coll),0.00025,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.3e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (coll 0),0.000508,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (conj coll 4),5.2e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.170,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.170,V8,vector ops,[coll [1]] (-conj coll 2),4.1e-05,,,,
1.7.170,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (seq coll),3.8e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.5e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.3e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.6e-05,,,,
1.7.170,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.7.170,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00029,,,,
1.7.170,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00067,,,,
1.7.170,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.170,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.7.170,V8,chunked seqs,[] (-next v),3.7e-05,,,,
1.7.170,V8,chunked seqs,[] (-rest v),3.7e-05,,,,
1.7.170,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),560.0,,,,
1.7.170,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),4.1,,,,
1.7.170,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.42,,,,
1.7.170,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.38,,,,
1.7.170,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),106.0,,,,
1.7.170,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),2.4,,,,
1.7.170,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),2.7,,,,
1.7.170,V8,apply,[coll (into [] (range 100000))] (apply + coll),6.3,,,,
1.7.170,V8,apply,[] (list 1 2 3 4 5),0.000125,,,,
1.7.170,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000146,,,,
1.7.170,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000451,,,,
1.7.170,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000147,,,,
1.7.170,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000238,,,,
1.7.170,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000821,,,,
1.7.170,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000317,,,,
1.7.170,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000293,,,,
1.7.170,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000248,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00141,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.7.170,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001157,,,,
1.7.170,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.2e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.9e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.1e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.7e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000101,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.6e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.6e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.5e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.0001,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.7e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.5e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.6e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.6e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000103,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.9e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),38.0,,,,
1.7.170,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0031,,,,
1.7.170,V8,persistent hash maps,[key :f0] (hash key),2.3e-05,,,,
1.7.170,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.7.170,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.170,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.06,,,,
1.7.170,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.96,,,,
1.7.170,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.78,,,,
1.7.170,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.99,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (:f0 coll),7.2e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (get coll :f0),5.9e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.3e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.1e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000255,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000421,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),85.0,,,,
1.7.170,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00016,,,,
1.7.170,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),59.0,,,,
1.7.170,V8,set ops,[] #{},4e-06,,,,
1.7.170,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.170,V8,set ops,[v [1 2 3]] (set v),0.000337,,,,
1.7.170,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000273,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (get coll 2),7.1e-05,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.7e-05,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (coll 2),7.5e-05,,,,
1.7.170,V8,seq ops,[coll (range 500000)] (reduce + coll),29.0,,,,
1.7.170,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.031,,,,
1.7.170,V8,reader,[s big-str-data] (reader/read-string s),0.762,,,,
1.7.170,V8,range,[r (range 100000)] (last r),4.1,,,,
1.7.170,V8,lazy-seq - first run,[r r] (last r),462.0,,,,
1.7.170,V8,lazy-seq - second run,[r r] (last r),109.0,,,,
1.7.170,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.528,,,,
1.7.170,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.137,,,,
1.7.170,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),319.0,,,,
1.7.170,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),56.75,,,,
1.7.170,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),42.25,,,,
1.7.170,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.7.170,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.8,,,,
1.7.170,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),13.3,,,,
1.7.170,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),178.4,,,,
1.7.170,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),166.9,,,,
1.7.170,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),8.7,,,,
1.7.170,V8,multimethods,[] (simple-multi :foo),0.000151,,,,
1.7.170,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.170,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00032,,,,
1.7.170,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00122,,,,
1.7.170,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),19.4,,,,
1.7.170,SM,identity,[x 1] (identity x),8.67e-06,,,,
1.7.170,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.87,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.46,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.51,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.52,,,,
1.7.170,SM,instance?,[coll []] (instance? PersistentVector coll),1.6e-05,,,,
1.7.170,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.7.170,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.7.170,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.00078,,,,
1.7.170,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001421,,,,
1.7.170,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000881,,,,
1.7.170,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001202,,,,
1.7.170,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000162,,,,
1.7.170,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000835,,,,
1.7.170,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000485,,,,
1.7.170,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001877,,,,
1.7.170,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),7.3e-05,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (first coll),0.000125,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (-first coll),7.4e-05,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (rest coll),8.3e-05,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.5e-05,,,,
1.7.170,SM,list ops,[] (list),8e-06,,,,
1.7.170,SM,list ops,[] (list 1 2 3),0.001265,,,,
1.7.170,SM,vector ops,[] [],9e-06,,,,
1.7.170,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000598,,,,
1.7.170,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000613,,,,
1.7.170,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000496,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (transient coll),0.00185,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.00023,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000214,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000218,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (coll 0),0.000192,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000897,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.0008,,,,
1.7.170,SM,vector ops,[coll []] (-conj coll 1),0.000726,,,,
1.7.170,SM,vector ops,[coll [1]] (-conj coll 2),0.000744,,,,
1.7.170,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000823,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (seq coll),0.000694,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000515,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000191,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000178,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000199,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000174,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000269,,,,
1.7.170,SM,large vector ops,[] (reduce conj [] (range 40000)),8.1,,,,
1.7.170,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00168,,,,
1.7.170,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00236,,,,
1.7.170,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00172,,,,
1.7.170,SM,chunked seqs,[] (-first v),0.000178,,,,
1.7.170,SM,chunked seqs,[] (-next v),0.000182,,,,
1.7.170,SM,chunked seqs,[] (-rest v),0.000182,,,,
1.7.170,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),231.0,,,,
1.7.170,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.5,,,,
1.7.170,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.5,,,,
1.7.170,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.34,,,,
1.7.170,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),83.0,,,,
1.7.170,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.1,,,,
1.7.170,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.5,,,,
1.7.170,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.5,,,,
1.7.170,SM,apply,[] (list 1 2 3 4 5),0.000376,,,,
1.7.170,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000324,,,,
1.7.170,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000364,,,,
1.7.170,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000397,,,,
1.7.170,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000382,,,,
1.7.170,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000795,,,,
1.7.170,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000364,,,,
1.7.170,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000368,,,,
1.7.170,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000418,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000182,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001965,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000178,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000178,,,,
1.7.170,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.00272,,,,
1.7.170,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000249,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000203,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000334,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.00021,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000236,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000262,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000209,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000336,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000233,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000227,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000257,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000209,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000329,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000209,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.00023,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000213,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000214,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000211,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000207,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000193,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000235,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000202,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000232,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",170.0,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000187,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000185,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000222,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000227,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),237.0,,,,
1.7.170,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00333,,,,
1.7.170,SM,persistent hash maps,[key :f0] (hash key),0.00017,,,,
1.7.170,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000171,,,,
1.7.170,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000172,,,,
1.7.170,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.61,,,,
1.7.170,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.32,,,,
1.7.170,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.04,,,,
1.7.170,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.73,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000247,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000222,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000206,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000254,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000601,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00055,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),273.0,,,,
1.7.170,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000274,,,,
1.7.170,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),493.0,,,,
1.7.170,SM,set ops,[] #{},0.000143,,,,
1.7.170,SM,set ops,[] #{1 3 2},0.000136,,,,
1.7.170,SM,set ops,[v [1 2 3]] (set v),0.000374,,,,
1.7.170,SM,set ops,[] (hash-set 1 2 3),0.000135,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000382,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (get coll 2),0.0002,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000201,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (coll 2),0.000197,,,,
1.7.170,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.7.170,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.095,,,,
1.7.170,SM,reader,[s big-str-data] (reader/read-string s),1.832,,,,
1.7.170,SM,range,[r (range 100000)] (last r),4.6,,,,
1.7.170,SM,lazy-seq - first run,[r r] (last r),438.0,,,,
1.7.170,SM,lazy-seq - second run,[r r] (last r),53.0,,,,
1.7.170,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.577,,,,
1.7.170,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.452,,,,
1.7.170,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),213.0,,,,
1.7.170,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),41.5,,,,
1.7.170,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),220.0,,,,
1.7.170,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),119.25,,,,
1.7.170,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.0,,,,
1.7.170,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.8,,,,
1.7.170,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),22.1,,,,
1.7.170,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),177.2,,,,
1.7.170,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.5,,,,
1.7.170,SM,multimethods,[] (simple-multi :foo),0.000278,,,,
1.7.170,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00326,,,,
1.7.170,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00186,,,,
1.7.170,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00373,,,,
1.7.170,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),51.9,,,,
1.7.170,JSC,identity,[x 1] (identity x),1.241e-05,,,,
1.7.170,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.95,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.42,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.05,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.07,,,,
1.7.170,JSC,instance?,[coll []] (instance? PersistentVector coll),4.8e-05,,,,
1.7.170,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.170,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.7.170,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000139,,,,
1.7.170,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6.5e-05,,,,
1.7.170,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000181,,,,
1.7.170,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.7e-05,,,,
1.7.170,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.170,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.2e-05,,,,
1.7.170,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.9e-05,,,,
1.7.170,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000223,,,,
1.7.170,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (first coll),5e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (rest coll),4.2e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.170,JSC,list ops,[] (list),3.4e-05,,,,
1.7.170,JSC,list ops,[] (list 1 2 3),9.8e-05,,,,
1.7.170,JSC,vector ops,[] [],3.5e-05,,,,
1.7.170,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.7.170,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000102,,,,
1.7.170,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.3e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.4e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.7.170,JSC,vector ops,[coll []] (-conj coll 1),7.7e-05,,,,
1.7.170,JSC,vector ops,[coll [1]] (-conj coll 2),7.9e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.7e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (seq coll),5.7e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.2e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.8e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000187,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.2e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.7.170,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.9,,,,
1.7.170,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.7.170,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00058,,,,
1.7.170,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.170,JSC,chunked seqs,[] (-first v),5.9e-05,,,,
1.7.170,JSC,chunked seqs,[] (-next v),0.000195,,,,
1.7.170,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.7.170,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),69.0,,,,
1.7.170,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.9,,,,
1.7.170,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.06,,,,
1.7.170,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.36,,,,
1.7.170,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),41.0,,,,
1.7.170,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.1,,,,
1.7.170,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.0,,,,
1.7.170,JSC,apply,[coll (into [] (range 100000))] (apply + coll),3.9,,,,
1.7.170,JSC,apply,[] (list 1 2 3 4 5),0.000176,,,,
1.7.170,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000177,,,,
1.7.170,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000231,,,,
1.7.170,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000176,,,,
1.7.170,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000177,,,,
1.7.170,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000539,,,,
1.7.170,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000232,,,,
1.7.170,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000226,,,,
1.7.170,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000282,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000915,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.6e-05,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.7.170,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.00106,,,,
1.7.170,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000108,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.9e-05,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000106,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000112,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000116,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.2e-05,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.6e-05,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000107,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000112,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.4e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",7e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.1e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.9e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000125,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.6e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.3e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.9e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.6e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.8e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),71.0,,,,
1.7.170,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0019,,,,
1.7.170,JSC,persistent hash maps,[key :f0] (hash key),5e-05,,,,
1.7.170,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.170,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),5.1e-05,,,,
1.7.170,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.38,,,,
1.7.170,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.25,,,,
1.7.170,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.62,,,,
1.7.170,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.66,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000111,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (get coll :f0),0.0001,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.6e-05,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000111,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000169,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000235,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),121.0,,,,
1.7.170,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000149,,,,
1.7.170,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),40.0,,,,
1.7.170,JSC,set ops,[] #{},4e-05,,,,
1.7.170,JSC,set ops,[] #{1 3 2},3.5e-05,,,,
1.7.170,JSC,set ops,[v [1 2 3]] (set v),0.000379,,,,
1.7.170,JSC,set ops,[] (hash-set 1 2 3),3.5e-05,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000169,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.5e-05,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (coll 2),9.5e-05,,,,
1.7.170,JSC,seq ops,[coll (range 500000)] (reduce + coll),18.0,,,,
1.7.170,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.7.170,JSC,reader,[s big-str-data] (reader/read-string s),0.641,,,,
1.7.170,JSC,range,[r (range 100000)] (last r),2.7,,,,
1.7.170,JSC,lazy-seq - first run,[r r] (last r),204.0,,,,
1.7.170,JSC,lazy-seq - second run,[r r] (last r),71.0,,,,
1.7.170,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.619,,,,
1.7.170,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.19,,,,
1.7.170,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),142.0,,,,
1.7.170,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),39.25,,,,
1.7.170,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.0,,,,
1.7.170,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.170,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),5.0,,,,
1.7.170,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.8,,,,
1.7.170,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),9.9,,,,
1.7.170,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),56.5,,,,
1.7.170,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),6.1,,,,
1.7.170,JSC,multimethods,[] (simple-multi :foo),0.00026,,,,
1.7.170,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00021,,,,
1.7.170,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00029,,,,
1.7.170,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00081,,,,
1.7.170,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),13.8,,,,
1.7.166,V8,identity,[x 1] (identity x),9.1e-06,,,,
1.7.166,V8,symbol construction,[] (symbol (quote foo)),2.5e-05,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.38,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.32,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.2,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.21,,,,
1.7.166,V8,instance?,[coll []] (instance? PersistentVector coll),0.000521,,,,
1.7.166,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000524,,,,
1.7.166,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000511,,,,
1.7.166,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.8e-05,,,,
1.7.166,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.3e-05,,,,
1.7.166,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.166,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000115,,,,
1.7.166,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.7.166,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.9e-05,,,,
1.7.166,V8,cloning & specify,[coll [1 2 3]] (clone coll),3e-05,,,,
1.7.166,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000605,,,,
1.7.166,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (first coll),2.1e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (-first coll),1.5e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (rest coll),1.3e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.7.166,V8,list ops,[] (list),5e-06,,,,
1.7.166,V8,list ops,[] (list 1 2 3),0.000551,,,,
1.7.166,V8,vector ops,[] [],4e-06,,,,
1.7.166,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000575,,,,
1.7.166,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000548,,,,
1.7.166,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000565,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (transient coll),0.00025,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.4e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (coll 0),0.000511,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.166,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.166,V8,vector ops,[coll [1]] (-conj coll 2),4.1e-05,,,,
1.7.166,V8,vector ops,[coll [1 2]] (-conj coll 3),4.3e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (seq coll),4e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.6e-05,,,,
1.7.166,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.7.166,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.0003,,,,
1.7.166,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00071,,,,
1.7.166,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00025,,,,
1.7.166,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.7.166,V8,chunked seqs,[] (-next v),4e-05,,,,
1.7.166,V8,chunked seqs,[] (-rest v),3.4e-05,,,,
1.7.166,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),562.0,,,,
1.7.166,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),4.1,,,,
1.7.166,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.35,,,,
1.7.166,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.47,,,,
1.7.166,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),93.0,,,,
1.7.166,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),3.7,,,,
1.7.166,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),2.7,,,,
1.7.166,V8,apply,[coll (into [] (range 100000))] (apply + coll),6.5,,,,
1.7.166,V8,apply,[] (list 1 2 3 4 5),0.000123,,,,
1.7.166,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000144,,,,
1.7.166,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000438,,,,
1.7.166,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000144,,,,
1.7.166,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000235,,,,
1.7.166,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000819,,,,
1.7.166,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000316,,,,
1.7.166,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000297,,,,
1.7.166,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000252,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001519,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.166,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001127,,,,
1.7.166,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.6e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.3e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),8.1e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.7e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.2e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000102,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.7e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.3e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.7e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000107,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.8e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.4e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.4e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.2e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.6e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.6e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.9e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000102,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.4e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.1e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",8.0,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.7e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),38.0,,,,
1.7.166,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00308,,,,
1.7.166,V8,persistent hash maps,[key :f0] (hash key),2.5e-05,,,,
1.7.166,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.7.166,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.166,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.14,,,,
1.7.166,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.09,,,,
1.7.166,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.75,,,,
1.7.166,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.97,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (:f0 coll),6.6e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (get coll :f0),5.4e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.3e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.2e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000246,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000422,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),87.0,,,,
1.7.166,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00016,,,,
1.7.166,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),60.0,,,,
1.7.166,V8,set ops,[] #{},4e-06,,,,
1.7.166,V8,set ops,[] #{1 3 2},5e-06,,,,
1.7.166,V8,set ops,[v [1 2 3]] (set v),0.00031,,,,
1.7.166,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000286,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (get coll 2),7e-05,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (contains? coll 2),5.1e-05,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (coll 2),7.7e-05,,,,
1.7.166,V8,seq ops,[coll (range 500000)] (reduce + coll),33.0,,,,
1.7.166,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.03,,,,
1.7.166,V8,reader,[s big-str-data] (reader/read-string s),0.747,,,,
1.7.166,V8,range,[r (range 100000)] (last r),3.7,,,,
1.7.166,V8,lazy-seq - first run,[r r] (last r),470.0,,,,
1.7.166,V8,lazy-seq - second run,[r r] (last r),88.0,,,,
1.7.166,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.479,,,,
1.7.166,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.133,,,,
1.7.166,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),317.0,,,,
1.7.166,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),58.0,,,,
1.7.166,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),42.5,,,,
1.7.166,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.7.166,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.6,,,,
1.7.166,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),12.8,,,,
1.7.166,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),217.0,,,,
1.7.166,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),174.3,,,,
1.7.166,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),9.0,,,,
1.7.166,V8,multimethods,[] (simple-multi :foo),0.000151,,,,
1.7.166,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.166,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.7.166,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00109,,,,
1.7.166,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),18.6,,,,
1.7.166,SM,identity,[x 1] (identity x),8.14e-06,,,,
1.7.166,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),2.04,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.57,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.51,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.53,,,,
1.7.166,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.7.166,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.7.166,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.7.166,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000702,,,,
1.7.166,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001449,,,,
1.7.166,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000928,,,,
1.7.166,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001356,,,,
1.7.166,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000178,,,,
1.7.166,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000889,,,,
1.7.166,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000454,,,,
1.7.166,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001842,,,,
1.7.166,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (first coll),0.000115,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (-first coll),7.4e-05,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (rest coll),8.2e-05,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.5e-05,,,,
1.7.166,SM,list ops,[] (list),8e-06,,,,
1.7.166,SM,list ops,[] (list 1 2 3),0.001193,,,,
1.7.166,SM,vector ops,[] [],9e-06,,,,
1.7.166,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000638,,,,
1.7.166,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000729,,,,
1.7.166,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000517,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (transient coll),0.00191,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000226,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000213,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000218,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (coll 0),0.000191,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000947,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000813,,,,
1.7.166,SM,vector ops,[coll []] (-conj coll 1),0.000749,,,,
1.7.166,SM,vector ops,[coll [1]] (-conj coll 2),0.000769,,,,
1.7.166,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000818,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (seq coll),0.000816,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000184,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000185,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000162,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000198,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000184,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000253,,,,
1.7.166,SM,large vector ops,[] (reduce conj [] (range 40000)),8.5,,,,
1.7.166,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00169,,,,
1.7.166,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00242,,,,
1.7.166,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00167,,,,
1.7.166,SM,chunked seqs,[] (-first v),0.000176,,,,
1.7.166,SM,chunked seqs,[] (-next v),0.000183,,,,
1.7.166,SM,chunked seqs,[] (-rest v),0.000186,,,,
1.7.166,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),229.0,,,,
1.7.166,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.4,,,,
1.7.166,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.47,,,,
1.7.166,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.36,,,,
1.7.166,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),79.0,,,,
1.7.166,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.2,,,,
1.7.166,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.6,,,,
1.7.166,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.3,,,,
1.7.166,SM,apply,[] (list 1 2 3 4 5),0.000342,,,,
1.7.166,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000312,,,,
1.7.166,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000413,,,,
1.7.166,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000361,,,,
1.7.166,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000373,,,,
1.7.166,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000796,,,,
1.7.166,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00037,,,,
1.7.166,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000373,,,,
1.7.166,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000404,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000179,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002199,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000177,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.00018,,,,
1.7.166,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002521,,,,
1.7.166,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000247,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000194,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000342,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000204,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000212,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000268,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000209,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000362,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000228,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000237,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000249,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000203,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000362,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000209,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000211,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000215,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000211,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000211,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000205,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000206,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000233,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.0002,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000207,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",168.0,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000175,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000176,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000225,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000225,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),240.0,,,,
1.7.166,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00335,,,,
1.7.166,SM,persistent hash maps,[key :f0] (hash key),0.000178,,,,
1.7.166,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000169,,,,
1.7.166,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000173,,,,
1.7.166,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.65,,,,
1.7.166,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.34,,,,
1.7.166,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.05,,,,
1.7.166,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.28,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000245,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (get coll :f0),0.00022,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000206,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000257,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000613,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000541,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),275.0,,,,
1.7.166,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000275,,,,
1.7.166,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),521.0,,,,
1.7.166,SM,set ops,[] #{},0.000146,,,,
1.7.166,SM,set ops,[] #{1 3 2},0.00014,,,,
1.7.166,SM,set ops,[v [1 2 3]] (set v),0.000389,,,,
1.7.166,SM,set ops,[] (hash-set 1 2 3),0.000136,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000399,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (get coll 2),0.00022,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000198,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (coll 2),0.000196,,,,
1.7.166,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.7.166,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.094,,,,
1.7.166,SM,reader,[s big-str-data] (reader/read-string s),1.747,,,,
1.7.166,SM,range,[r (range 100000)] (last r),5.0,,,,
1.7.166,SM,lazy-seq - first run,[r r] (last r),431.0,,,,
1.7.166,SM,lazy-seq - second run,[r r] (last r),52.0,,,,
1.7.166,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.589,,,,
1.7.166,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.477,,,,
1.7.166,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),217.0,,,,
1.7.166,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.25,,,,
1.7.166,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),199.0,,,,
1.7.166,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),118.5,,,,
1.7.166,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.0,,,,
1.7.166,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.8,,,,
1.7.166,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),22.5,,,,
1.7.166,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),175.2,,,,
1.7.166,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.2,,,,
1.7.166,SM,multimethods,[] (simple-multi :foo),0.000288,,,,
1.7.166,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0033,,,,
1.7.166,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0019,,,,
1.7.166,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00387,,,,
1.7.166,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),50.9,,,,
1.7.166,JSC,identity,[x 1] (identity x),1.145e-05,,,,
1.7.166,JSC,symbol construction,[] (symbol (quote foo)),4.8e-05,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.99,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.41,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.05,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.07,,,,
1.7.166,JSC,instance?,[coll []] (instance? PersistentVector coll),4.9e-05,,,,
1.7.166,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.7e-05,,,,
1.7.166,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.7.166,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.00014,,,,
1.7.166,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.9e-05,,,,
1.7.166,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000189,,,,
1.7.166,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.4e-05,,,,
1.7.166,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.166,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.166,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.6e-05,,,,
1.7.166,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000222,,,,
1.7.166,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (first coll),5.1e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (-first coll),4.4e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.7e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.7.166,JSC,list ops,[] (list),3.3e-05,,,,
1.7.166,JSC,list ops,[] (list 1 2 3),9.6e-05,,,,
1.7.166,JSC,vector ops,[] [],3.8e-05,,,,
1.7.166,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.6e-05,,,,
1.7.166,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000103,,,,
1.7.166,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.7e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.5e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.5e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.7.166,JSC,vector ops,[coll []] (-conj coll 1),7.6e-05,,,,
1.7.166,JSC,vector ops,[coll [1]] (-conj coll 2),7.4e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (seq coll),5.5e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.3e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.8e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000185,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.7.166,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.7,,,,
1.7.166,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00038,,,,
1.7.166,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00058,,,,
1.7.166,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.166,JSC,chunked seqs,[] (-first v),5.5e-05,,,,
1.7.166,JSC,chunked seqs,[] (-next v),0.000186,,,,
1.7.166,JSC,chunked seqs,[] (-rest v),6.3e-05,,,,
1.7.166,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),67.0,,,,
1.7.166,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),2.0,,,,
1.7.166,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.16,,,,
1.7.166,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.53,,,,
1.7.166,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),41.0,,,,
1.7.166,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.3,,,,
1.7.166,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.0,,,,
1.7.166,JSC,apply,[coll (into [] (range 100000))] (apply + coll),3.8,,,,
1.7.166,JSC,apply,[] (list 1 2 3 4 5),0.000181,,,,
1.7.166,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000166,,,,
1.7.166,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000225,,,,
1.7.166,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000171,,,,
1.7.166,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000177,,,,
1.7.166,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.00055,,,,
1.7.166,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000233,,,,
1.7.166,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000228,,,,
1.7.166,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000281,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5.2e-05,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000958,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),5e-05,,,,
1.7.166,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001086,,,,
1.7.166,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000103,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000107,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),7e-05,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.00012,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),8.5e-05,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000116,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.3e-05,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.9e-05,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000103,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000109,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.2e-05,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",7.4e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000125,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.7e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.9e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),7.1e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.2e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.2e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),76.0,,,,
1.7.166,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00208,,,,
1.7.166,JSC,persistent hash maps,[key :f0] (hash key),5e-05,,,,
1.7.166,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.166,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.5e-05,,,,
1.7.166,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.36,,,,
1.7.166,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.27,,,,
1.7.166,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.64,,,,
1.7.166,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.7,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.7e-05,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.3e-05,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.6e-05,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.00011,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00016,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000245,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),117.0,,,,
1.7.166,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000143,,,,
1.7.166,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),38.0,,,,
1.7.166,JSC,set ops,[] #{},4e-05,,,,
1.7.166,JSC,set ops,[] #{1 3 2},3.6e-05,,,,
1.7.166,JSC,set ops,[v [1 2 3]] (set v),0.000375,,,,
1.7.166,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000162,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.2e-05,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (coll 2),9.4e-05,,,,
1.7.166,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.166,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.025,,,,
1.7.166,JSC,reader,[s big-str-data] (reader/read-string s),0.631,,,,
1.7.166,JSC,range,[r (range 100000)] (last r),2.6,,,,
1.7.166,JSC,lazy-seq - first run,[r r] (last r),200.0,,,,
1.7.166,JSC,lazy-seq - second run,[r r] (last r),71.0,,,,
1.7.166,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.619,,,,
1.7.166,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.191,,,,
1.7.166,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),150.0,,,,
1.7.166,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.5,,,,
1.7.166,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),44.25,,,,
1.7.166,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),12.75,,,,
1.7.166,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.9,,,,
1.7.166,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),5.3,,,,
1.7.166,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),10.3,,,,
1.7.166,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),57.1,,,,
1.7.166,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),6.5,,,,
1.7.166,JSC,multimethods,[] (simple-multi :foo),0.000257,,,,
1.7.166,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00022,,,,
1.7.166,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00032,,,,
1.7.166,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00084,,,,
1.7.166,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),14.3,,,,
1.7.58,V8,identity,[x 1] (identity x),9.17e-06,,,,
1.7.58,V8,symbol construction,[] (symbol (quote foo)),2.3e-05,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.22,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.21,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.58,V8,instance?,[coll []] (instance? PersistentVector coll),0.000507,,,,
1.7.58,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000499,,,,
1.7.58,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000501,,,,
1.7.58,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.7e-05,,,,
1.7.58,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.7e-05,,,,
1.7.58,V8,array & string ops,[coll (array 1 2 3)] (first coll),4e-05,,,,
1.7.58,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000112,,,,
1.7.58,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.8e-05,,,,
1.7.58,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.7.58,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.4e-05,,,,
1.7.58,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00056,,,,
1.7.58,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.1e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (first coll),2.3e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.2e-05,,,,
1.7.58,V8,list ops,[] (list),4e-06,,,,
1.7.58,V8,list ops,[] (list 1 2 3),0.000548,,,,
1.7.58,V8,vector ops,[] [],4e-06,,,,
1.7.58,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000571,,,,
1.7.58,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000561,,,,
1.7.58,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000553,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (coll 0),0.000509,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.58,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.58,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.58,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (seq coll),3.8e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.7e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.6e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.2e-05,,,,
1.7.58,V8,large vector ops,[] (reduce conj [] (range 40000)),6.7,,,,
1.7.58,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00026,,,,
1.7.58,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.7.58,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.58,V8,chunked seqs,[] (-first v),1.8e-05,,,,
1.7.58,V8,chunked seqs,[] (-next v),2.9e-05,,,,
1.7.58,V8,chunked seqs,[] (-rest v),3e-05,,,,
1.7.58,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),567.0,,,,
1.7.58,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),4.2,,,,
1.7.58,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.34,,,,
1.7.58,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.51,,,,
1.7.58,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),107.0,,,,
1.7.58,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.6,,,,
1.7.58,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.4,,,,
1.7.58,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.4,,,,
1.7.58,V8,apply,[] (list 1 2 3 4 5),0.000123,,,,
1.7.58,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000145,,,,
1.7.58,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000451,,,,
1.7.58,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000145,,,,
1.7.58,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.00025,,,,
1.7.58,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000844,,,,
1.7.58,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000354,,,,
1.7.58,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000332,,,,
1.7.58,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000246,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001503,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.58,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001161,,,,
1.7.58,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.2e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.2e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.9e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.2e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.7e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),9.9e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.9e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.1e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.4e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),9.9e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.5e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.1e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.7e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.4e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.8e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.4e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.2e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.8e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.6e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.2e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.7.58,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.003,,,,
1.7.58,V8,persistent hash maps,[key :f0] (hash key),2.1e-05,,,,
1.7.58,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.7.58,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.58,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.11,,,,
1.7.58,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.99,,,,
1.7.58,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.8,,,,
1.7.58,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.04,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (:f0 coll),6.2e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (get coll :f0),5.2e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.1e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.1e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000253,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000414,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),85.0,,,,
1.7.58,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000162,,,,
1.7.58,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),58.0,,,,
1.7.58,V8,set ops,[] #{},4e-06,,,,
1.7.58,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.58,V8,set ops,[v [1 2 3]] (set v),0.000343,,,,
1.7.58,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000276,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (get coll 2),6.9e-05,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.3e-05,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (coll 2),7.7e-05,,,,
1.7.58,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.7.58,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.028,,,,
1.7.58,V8,reader,[s big-str-data] (reader/read-string s),0.762,,,,
1.7.58,V8,range,[r (range 100000)] (last r),3.9,,,,
1.7.58,V8,lazy-seq - first run,[r r] (last r),520.0,,,,
1.7.58,V8,lazy-seq - second run,[r r] (last r),105.0,,,,
1.7.58,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.506,,,,
1.7.58,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.128,,,,
1.7.58,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),310.0,,,,
1.7.58,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.5,,,,
1.7.58,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),51.0,,,,
1.7.58,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.58,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.0,,,,
1.7.58,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),10.3,,,,
1.7.58,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),196.2,,,,
1.7.58,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),160.3,,,,
1.7.58,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),8.1,,,,
1.7.58,V8,multimethods,[] (simple-multi :foo),0.000156,,,,
1.7.58,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.58,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00031,,,,
1.7.58,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.0011,,,,
1.7.58,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),17.7,,,,
1.7.58,SM,identity,[x 1] (identity x),8.39e-06,,,,
1.7.58,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.82,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.19,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.45,,,,
1.7.58,SM,instance?,[coll []] (instance? PersistentVector coll),2e-05,,,,
1.7.58,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),2e-05,,,,
1.7.58,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3.2e-05,,,,
1.7.58,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000553,,,,
1.7.58,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001236,,,,
1.7.58,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000814,,,,
1.7.58,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001261,,,,
1.7.58,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000174,,,,
1.7.58,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000914,,,,
1.7.58,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000442,,,,
1.7.58,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001763,,,,
1.7.58,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),5.9e-05,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (first coll),0.000119,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (rest coll),8.8e-05,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.7.58,SM,list ops,[] (list),8e-06,,,,
1.7.58,SM,list ops,[] (list 1 2 3),0.001298,,,,
1.7.58,SM,vector ops,[] [],9e-06,,,,
1.7.58,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00059,,,,
1.7.58,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000678,,,,
1.7.58,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000607,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (transient coll),0.00186,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000273,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000214,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000224,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (coll 0),0.000219,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000995,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000855,,,,
1.7.58,SM,vector ops,[coll []] (-conj coll 1),0.000778,,,,
1.7.58,SM,vector ops,[coll [1]] (-conj coll 2),0.000805,,,,
1.7.58,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000834,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (seq coll),0.000538,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000577,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000186,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000172,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000187,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000174,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000248,,,,
1.7.58,SM,large vector ops,[] (reduce conj [] (range 40000)),8.7,,,,
1.7.58,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00164,,,,
1.7.58,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00251,,,,
1.7.58,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00172,,,,
1.7.58,SM,chunked seqs,[] (-first v),0.000173,,,,
1.7.58,SM,chunked seqs,[] (-next v),0.00019,,,,
1.7.58,SM,chunked seqs,[] (-rest v),0.000185,,,,
1.7.58,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),228.0,,,,
1.7.58,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.5,,,,
1.7.58,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.5,,,,
1.7.58,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.65,,,,
1.7.58,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),80.0,,,,
1.7.58,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.7.58,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.6,,,,
1.7.58,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.6,,,,
1.7.58,SM,apply,[] (list 1 2 3 4 5),0.000343,,,,
1.7.58,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000334,,,,
1.7.58,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000361,,,,
1.7.58,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000348,,,,
1.7.58,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000369,,,,
1.7.58,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000891,,,,
1.7.58,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000361,,,,
1.7.58,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000366,,,,
1.7.58,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000423,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000182,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00206,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000177,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000178,,,,
1.7.58,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002691,,,,
1.7.58,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000247,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000206,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000324,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000208,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000209,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000256,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000211,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000329,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000223,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000225,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000263,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000202,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000329,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.0002,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000227,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000215,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000216,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000201,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000208,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.0002,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000222,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000204,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000212,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",167.0,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000176,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000174,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000229,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000213,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),230.0,,,,
1.7.58,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0037,,,,
1.7.58,SM,persistent hash maps,[key :f0] (hash key),0.000179,,,,
1.7.58,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000165,,,,
1.7.58,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000174,,,,
1.7.58,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.6,,,,
1.7.58,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.38,,,,
1.7.58,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.06,,,,
1.7.58,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.57,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000246,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (get coll :f0),0.00022,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000201,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000238,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000637,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000549,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),279.0,,,,
1.7.58,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000281,,,,
1.7.58,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),516.0,,,,
1.7.58,SM,set ops,[] #{},0.000146,,,,
1.7.58,SM,set ops,[] #{1 3 2},0.000137,,,,
1.7.58,SM,set ops,[v [1 2 3]] (set v),0.00037,,,,
1.7.58,SM,set ops,[] (hash-set 1 2 3),0.000134,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000374,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000194,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000195,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (coll 2),0.0002,,,,
1.7.58,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.58,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.096,,,,
1.7.58,SM,reader,[s big-str-data] (reader/read-string s),1.788,,,,
1.7.58,SM,range,[r (range 100000)] (last r),5.3,,,,
1.7.58,SM,lazy-seq - first run,[r r] (last r),447.0,,,,
1.7.58,SM,lazy-seq - second run,[r r] (last r),56.0,,,,
1.7.58,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.627,,,,
1.7.58,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.418,,,,
1.7.58,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),227.0,,,,
1.7.58,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.0,,,,
1.7.58,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),185.75,,,,
1.7.58,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),117.0,,,,
1.7.58,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.4,,,,
1.7.58,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.6,,,,
1.7.58,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),23.4,,,,
1.7.58,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),175.6,,,,
1.7.58,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.5,,,,
1.7.58,SM,multimethods,[] (simple-multi :foo),0.000269,,,,
1.7.58,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00321,,,,
1.7.58,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00188,,,,
1.7.58,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00355,,,,
1.7.58,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),52.6,,,,
1.7.58,JSC,identity,[x 1] (identity x),2.455e-05,,,,
1.7.58,JSC,symbol construction,[] (symbol (quote foo)),4.7e-05,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.67,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.62,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.05,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.58,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.7.58,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.58,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.7.58,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000138,,,,
1.7.58,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.9e-05,,,,
1.7.58,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000189,,,,
1.7.58,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.2e-05,,,,
1.7.58,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.58,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.58,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.8e-05,,,,
1.7.58,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000221,,,,
1.7.58,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (first coll),4.8e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.58,JSC,list ops,[] (list),3.3e-05,,,,
1.7.58,JSC,list ops,[] (list 1 2 3),9.7e-05,,,,
1.7.58,JSC,vector ops,[] [],3.9e-05,,,,
1.7.58,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000102,,,,
1.7.58,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.0001,,,,
1.7.58,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000103,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00028,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.7e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.4e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.6e-05,,,,
1.7.58,JSC,vector ops,[coll []] (-conj coll 1),7.4e-05,,,,
1.7.58,JSC,vector ops,[coll [1]] (-conj coll 2),7.6e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.7e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (seq coll),5.5e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.3e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (first coll),4.9e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.5e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000187,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.3e-05,,,,
1.7.58,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.0,,,,
1.7.58,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.7.58,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.7.58,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.58,JSC,chunked seqs,[] (-first v),5.7e-05,,,,
1.7.58,JSC,chunked seqs,[] (-next v),0.000191,,,,
1.7.58,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.7.58,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),67.0,,,,
1.7.58,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),2.1,,,,
1.7.58,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.14,,,,
1.7.58,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.42,,,,
1.7.58,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),42.0,,,,
1.7.58,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.7.58,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.7.58,JSC,apply,[coll (into [] (range 100000))] (apply + coll),4.0,,,,
1.7.58,JSC,apply,[] (list 1 2 3 4 5),0.000168,,,,
1.7.58,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000167,,,,
1.7.58,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000234,,,,
1.7.58,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000166,,,,
1.7.58,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000164,,,,
1.7.58,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000542,,,,
1.7.58,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000237,,,,
1.7.58,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000223,,,,
1.7.58,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00029,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000863,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.8e-05,,,,
1.7.58,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001096,,,,
1.7.58,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000102,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.8e-05,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000105,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.2e-05,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000108,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.7e-05,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000116,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.5e-05,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.9e-05,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000104,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),7.1e-05,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000118,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.4e-05,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.8e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.9e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.4e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000122,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.7e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.7e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.6e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.2e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),73.0,,,,
1.7.58,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0018,,,,
1.7.58,JSC,persistent hash maps,[key :f0] (hash key),4.7e-05,,,,
1.7.58,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.58,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.7.58,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.34,,,,
1.7.58,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.25,,,,
1.7.58,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.62,,,,
1.7.58,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.7,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.8e-05,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (get coll :f0),8.7e-05,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),7.8e-05,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.0001,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000168,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000245,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),116.0,,,,
1.7.58,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000146,,,,
1.7.58,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),39.0,,,,
1.7.58,JSC,set ops,[] #{},3.7e-05,,,,
1.7.58,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.7.58,JSC,set ops,[v [1 2 3]] (set v),0.000365,,,,
1.7.58,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.00017,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.1e-05,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),8.2e-05,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (coll 2),9.4e-05,,,,
1.7.58,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.58,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.7.58,JSC,reader,[s big-str-data] (reader/read-string s),0.635,,,,
1.7.58,JSC,range,[r (range 100000)] (last r),2.9,,,,
1.7.58,JSC,lazy-seq - first run,[r r] (last r),255.0,,,,
1.7.58,JSC,lazy-seq - second run,[r r] (last r),65.0,,,,
1.7.58,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.62,,,,
1.7.58,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.198,,,,
1.7.58,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),146.0,,,,
1.7.58,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.0,,,,
1.7.58,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.75,,,,
1.7.58,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.58,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.7,,,,
1.7.58,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.7,,,,
1.7.58,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),9.9,,,,
1.7.58,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),66.6,,,,
1.7.58,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),5.3,,,,
1.7.58,JSC,multimethods,[] (simple-multi :foo),0.000312,,,,
1.7.58,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.58,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00053,,,,
1.7.58,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00086,,,,
1.7.58,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),14.0,,,,
1.7.48,V8,identity,[x 1] (identity x),8.99e-06,,,,
1.7.48,V8,symbol construction,[] (symbol (quote foo)),2.5e-05,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.24,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.25,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.48,V8,instance?,[coll []] (instance? PersistentVector coll),0.000524,,,,
1.7.48,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000523,,,,
1.7.48,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000505,,,,
1.7.48,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.6e-05,,,,
1.7.48,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.4e-05,,,,
1.7.48,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.48,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000115,,,,
1.7.48,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.8e-05,,,,
1.7.48,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.7.48,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.2e-05,,,,
1.7.48,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000567,,,,
1.7.48,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (first coll),2.5e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (-first coll),1.5e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (rest coll),1.3e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.7.48,V8,list ops,[] (list),4e-06,,,,
1.7.48,V8,list ops,[] (list 1 2 3),0.000552,,,,
1.7.48,V8,vector ops,[] [],4e-06,,,,
1.7.48,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000565,,,,
1.7.48,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000557,,,,
1.7.48,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000556,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.4e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (coll 0),0.000518,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.48,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.7.48,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.48,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (seq coll),4e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.9e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.4e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.48,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.7.48,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00026,,,,
1.7.48,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0007,,,,
1.7.48,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.48,V8,chunked seqs,[] (-first v),1.5e-05,,,,
1.7.48,V8,chunked seqs,[] (-next v),3.2e-05,,,,
1.7.48,V8,chunked seqs,[] (-rest v),2.8e-05,,,,
1.7.48,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),555.0,,,,
1.7.48,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),4.3,,,,
1.7.48,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.46,,,,
1.7.48,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.59,,,,
1.7.48,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),103.0,,,,
1.7.48,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.4,,,,
1.7.48,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.4,,,,
1.7.48,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.1,,,,
1.7.48,V8,apply,[] (list 1 2 3 4 5),0.000121,,,,
1.7.48,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000139,,,,
1.7.48,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000449,,,,
1.7.48,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000142,,,,
1.7.48,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000252,,,,
1.7.48,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000811,,,,
1.7.48,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000315,,,,
1.7.48,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000301,,,,
1.7.48,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000249,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00145,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.7.48,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001147,,,,
1.7.48,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.3e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.2e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.3e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000108,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.7e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.9e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.5e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.0001,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8.1e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.2e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.6e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.6e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.9e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.6e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.8e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.5e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.8e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.3e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.7.48,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00301,,,,
1.7.48,V8,persistent hash maps,[key :f0] (hash key),2.1e-05,,,,
1.7.48,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.5e-05,,,,
1.7.48,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.7.48,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.13,,,,
1.7.48,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.02,,,,
1.7.48,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.87,,,,
1.7.48,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.95,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (:f0 coll),6.1e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (get coll :f0),5.4e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.4e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.4e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000247,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000419,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),85.0,,,,
1.7.48,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00016,,,,
1.7.48,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),53.0,,,,
1.7.48,V8,set ops,[] #{},4e-06,,,,
1.7.48,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.48,V8,set ops,[v [1 2 3]] (set v),0.000341,,,,
1.7.48,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000283,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (get coll 2),7.1e-05,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.3e-05,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (coll 2),7.2e-05,,,,
1.7.48,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.7.48,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.7.48,V8,reader,[s big-str-data] (reader/read-string s),0.759,,,,
1.7.48,V8,range,[r (range 100000)] (last r),3.9,,,,
1.7.48,V8,lazy-seq - first run,[r r] (last r),480.0,,,,
1.7.48,V8,lazy-seq - second run,[r r] (last r),87.0,,,,
1.7.48,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.485,,,,
1.7.48,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.132,,,,
1.7.48,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),310.0,,,,
1.7.48,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),55.0,,,,
1.7.48,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),47.25,,,,
1.7.48,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.48,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.2,,,,
1.7.48,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),10.1,,,,
1.7.48,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),208.4,,,,
1.7.48,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),160.0,,,,
1.7.48,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),8.2,,,,
1.7.48,V8,multimethods,[] (simple-multi :foo),0.00015,,,,
1.7.48,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.48,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00031,,,,
1.7.48,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00108,,,,
1.7.48,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),17.7,,,,
1.7.48,SM,identity,[x 1] (identity x),8.51e-06,,,,
1.7.48,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.61,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.21,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.7.48,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.7.48,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.7e-05,,,,
1.7.48,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.8e-05,,,,
1.7.48,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000591,,,,
1.7.48,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001452,,,,
1.7.48,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000852,,,,
1.7.48,SM,array & string ops,"[coll ""foobar""] (first coll)",0.00123,,,,
1.7.48,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000163,,,,
1.7.48,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000825,,,,
1.7.48,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000484,,,,
1.7.48,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001819,,,,
1.7.48,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),8e-05,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (first coll),0.000124,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (-first coll),7.8e-05,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (rest coll),9e-05,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (-rest coll),6e-05,,,,
1.7.48,SM,list ops,[] (list),9e-06,,,,
1.7.48,SM,list ops,[] (list 1 2 3),0.001302,,,,
1.7.48,SM,vector ops,[] [],1.1e-05,,,,
1.7.48,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000683,,,,
1.7.48,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000689,,,,
1.7.48,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.00048,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (transient coll),0.00184,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000213,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000254,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (coll 0),0.000219,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.00091,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000805,,,,
1.7.48,SM,vector ops,[coll []] (-conj coll 1),0.00075,,,,
1.7.48,SM,vector ops,[coll [1]] (-conj coll 2),0.000772,,,,
1.7.48,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000794,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (seq coll),0.000626,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000413,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000186,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000176,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.00019,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000193,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000267,,,,
1.7.48,SM,large vector ops,[] (reduce conj [] (range 40000)),7.9,,,,
1.7.48,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00169,,,,
1.7.48,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00246,,,,
1.7.48,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00171,,,,
1.7.48,SM,chunked seqs,[] (-first v),0.000176,,,,
1.7.48,SM,chunked seqs,[] (-next v),0.000188,,,,
1.7.48,SM,chunked seqs,[] (-rest v),0.000176,,,,
1.7.48,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),227.0,,,,
1.7.48,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.6,,,,
1.7.48,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.46,,,,
1.7.48,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.76,,,,
1.7.48,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.7.48,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.7.48,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.6,,,,
1.7.48,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.5,,,,
1.7.48,SM,apply,[] (list 1 2 3 4 5),0.000377,,,,
1.7.48,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000305,,,,
1.7.48,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000369,,,,
1.7.48,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000373,,,,
1.7.48,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000373,,,,
1.7.48,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000839,,,,
1.7.48,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000392,,,,
1.7.48,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000401,,,,
1.7.48,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000396,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000178,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002048,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000185,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000177,,,,
1.7.48,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002624,,,,
1.7.48,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000246,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000209,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000323,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000202,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000235,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000255,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000216,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000329,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000227,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000225,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000255,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000202,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000326,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000207,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000207,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000202,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000204,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000202,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000202,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.00021,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000227,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000207,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000204,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",166.0,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000179,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000176,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000216,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000217,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),239.0,,,,
1.7.48,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00338,,,,
1.7.48,SM,persistent hash maps,[key :f0] (hash key),0.00017,,,,
1.7.48,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000185,,,,
1.7.48,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000176,,,,
1.7.48,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.63,,,,
1.7.48,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.35,,,,
1.7.48,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.01,,,,
1.7.48,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.35,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000234,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000234,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000198,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000253,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00062,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000556,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),297.0,,,,
1.7.48,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000274,,,,
1.7.48,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),493.0,,,,
1.7.48,SM,set ops,[] #{},0.000147,,,,
1.7.48,SM,set ops,[] #{1 3 2},0.000134,,,,
1.7.48,SM,set ops,[v [1 2 3]] (set v),0.000375,,,,
1.7.48,SM,set ops,[] (hash-set 1 2 3),0.000131,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000393,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000221,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.00019,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (coll 2),0.000195,,,,
1.7.48,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.48,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.092,,,,
1.7.48,SM,reader,[s big-str-data] (reader/read-string s),1.836,,,,
1.7.48,SM,range,[r (range 100000)] (last r),4.7,,,,
1.7.48,SM,lazy-seq - first run,[r r] (last r),435.0,,,,
1.7.48,SM,lazy-seq - second run,[r r] (last r),54.0,,,,
1.7.48,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.585,,,,
1.7.48,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.418,,,,
1.7.48,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),221.0,,,,
1.7.48,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.5,,,,
1.7.48,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),202.0,,,,
1.7.48,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),117.25,,,,
1.7.48,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.1,,,,
1.7.48,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.1,,,,
1.7.48,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),22.8,,,,
1.7.48,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),179.9,,,,
1.7.48,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.2,,,,
1.7.48,SM,multimethods,[] (simple-multi :foo),0.000269,,,,
1.7.48,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00325,,,,
1.7.48,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00189,,,,
1.7.48,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00354,,,,
1.7.48,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),54.7,,,,
1.7.48,JSC,identity,[x 1] (identity x),1.086e-05,,,,
1.7.48,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.67,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.61,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.08,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.48,JSC,instance?,[coll []] (instance? PersistentVector coll),4.7e-05,,,,
1.7.48,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.4e-05,,,,
1.7.48,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.7.48,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000136,,,,
1.7.48,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.8e-05,,,,
1.7.48,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000187,,,,
1.7.48,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.2e-05,,,,
1.7.48,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.48,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.48,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.8e-05,,,,
1.7.48,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000226,,,,
1.7.48,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (first coll),4.5e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (-first coll),4.1e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.48,JSC,list ops,[] (list),3.2e-05,,,,
1.7.48,JSC,list ops,[] (list 1 2 3),9.6e-05,,,,
1.7.48,JSC,vector ops,[] [],3.5e-05,,,,
1.7.48,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.7.48,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000102,,,,
1.7.48,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.6e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00028,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.5e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.6e-05,,,,
1.7.48,JSC,vector ops,[coll []] (-conj coll 1),7.8e-05,,,,
1.7.48,JSC,vector ops,[coll [1]] (-conj coll 2),7.3e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (first coll),4.9e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.9e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000184,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.2e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.7.48,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.0,,,,
1.7.48,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00037,,,,
1.7.48,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00061,,,,
1.7.48,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.48,JSC,chunked seqs,[] (-first v),5.4e-05,,,,
1.7.48,JSC,chunked seqs,[] (-next v),0.000191,,,,
1.7.48,JSC,chunked seqs,[] (-rest v),6.3e-05,,,,
1.7.48,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),67.0,,,,
1.7.48,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),2.0,,,,
1.7.48,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.17,,,,
1.7.48,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.52,,,,
1.7.48,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),43.0,,,,
1.7.48,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.7.48,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.9,,,,
1.7.48,JSC,apply,[coll (into [] (range 100000))] (apply + coll),3.8,,,,
1.7.48,JSC,apply,[] (list 1 2 3 4 5),0.000173,,,,
1.7.48,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000168,,,,
1.7.48,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000227,,,,
1.7.48,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000166,,,,
1.7.48,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000168,,,,
1.7.48,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000556,,,,
1.7.48,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000227,,,,
1.7.48,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000218,,,,
1.7.48,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000279,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001006,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.7.48,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001065,,,,
1.7.48,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000104,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.6e-05,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000106,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.2e-05,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000109,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.8e-05,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00012,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.5e-05,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.8e-05,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000113,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000112,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.4e-05,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.8e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.7e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.2e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.4e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000131,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.7e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.8e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.1e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.7.48,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0018,,,,
1.7.48,JSC,persistent hash maps,[key :f0] (hash key),4.7e-05,,,,
1.7.48,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.5e-05,,,,
1.7.48,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.7.48,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.33,,,,
1.7.48,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.7.48,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.63,,,,
1.7.48,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.66,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.6e-05,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.1e-05,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.1e-05,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000105,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000165,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000244,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),114.0,,,,
1.7.48,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000143,,,,
1.7.48,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),41.0,,,,
1.7.48,JSC,set ops,[] #{},3.7e-05,,,,
1.7.48,JSC,set ops,[] #{1 3 2},3.6e-05,,,,
1.7.48,JSC,set ops,[v [1 2 3]] (set v),0.000372,,,,
1.7.48,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000159,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.1e-05,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),8e-05,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (coll 2),9.6e-05,,,,
1.7.48,JSC,seq ops,[coll (range 500000)] (reduce + coll),21.0,,,,
1.7.48,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.027,,,,
1.7.48,JSC,reader,[s big-str-data] (reader/read-string s),0.628,,,,
1.7.48,JSC,range,[r (range 100000)] (last r),2.7,,,,
1.7.48,JSC,lazy-seq - first run,[r r] (last r),251.0,,,,
1.7.48,JSC,lazy-seq - second run,[r r] (last r),66.0,,,,
1.7.48,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.617,,,,
1.7.48,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.204,,,,
1.7.48,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),141.0,,,,
1.7.48,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),36.25,,,,
1.7.48,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.5,,,,
1.7.48,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.48,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.6,,,,
1.7.48,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),5.2,,,,
1.7.48,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),10.2,,,,
1.7.48,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),65.7,,,,
1.7.48,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.6,,,,
1.7.48,JSC,multimethods,[] (simple-multi :foo),0.000249,,,,
1.7.48,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.48,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00051,,,,
1.7.48,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.0008,,,,
1.7.48,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),13.7,,,,
1.7.28,V8,identity,[x 1] (identity x),9.2e-06,,,,
1.7.28,V8,symbol construction,[] (symbol (quote foo)),0.000559,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.25,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.24,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.08,,,,
1.7.28,V8,instance?,[coll []] (instance? PersistentVector coll),0.000514,,,,
1.7.28,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000503,,,,
1.7.28,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000502,,,,
1.7.28,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.9e-05,,,,
1.7.28,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.1e-05,,,,
1.7.28,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.28,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000113,,,,
1.7.28,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.7.28,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.7.28,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.4e-05,,,,
1.7.28,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000582,,,,
1.7.28,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.6e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (first coll),2.1e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (-first coll),1.5e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (rest coll),1.3e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.7.28,V8,list ops,[] (list),3e-06,,,,
1.7.28,V8,list ops,[] (list 1 2 3),0.000553,,,,
1.7.28,V8,vector ops,[] [],4e-06,,,,
1.7.28,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000577,,,,
1.7.28,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000556,,,,
1.7.28,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000562,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (transient coll),0.00021,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.1e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.3e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (coll 0),0.000512,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.28,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.28,V8,vector ops,[coll [1]] (-conj coll 2),3.9e-05,,,,
1.7.28,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (seq coll),3.8e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.5e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.28,V8,large vector ops,[] (reduce conj [] (range 40000)),7.0,,,,
1.7.28,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.28,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.7.28,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.28,V8,chunked seqs,[] (-first v),2e-05,,,,
1.7.28,V8,chunked seqs,[] (-next v),3.1e-05,,,,
1.7.28,V8,chunked seqs,[] (-rest v),3.2e-05,,,,
1.7.28,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),61.0,,,,
1.7.28,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),3.9,,,,
1.7.28,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.48,,,,
1.7.28,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.43,,,,
1.7.28,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.7.28,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.7,,,,
1.7.28,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.7,,,,
1.7.28,V8,apply,[coll (into [] (range 100000))] (apply + coll),5.4,,,,
1.7.28,V8,apply,[] (list 1 2 3 4 5),0.00012,,,,
1.7.28,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000145,,,,
1.7.28,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000444,,,,
1.7.28,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000146,,,,
1.7.28,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000248,,,,
1.7.28,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000831,,,,
1.7.28,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00034,,,,
1.7.28,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000323,,,,
1.7.28,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000252,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.7e-05,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001589,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.7.28,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001147,,,,
1.7.28,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.6e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.7e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.8e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.1e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.8e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.0001,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.3e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.5e-05,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000158,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000107,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000172,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000118,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000133,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.5e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000104,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.6e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",9.9e-05,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.8e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.00013,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.1e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.5e-05,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.7e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),38.0,,,,
1.7.28,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00343,,,,
1.7.28,V8,persistent hash maps,[key :f0] (hash key),2.1e-05,,,,
1.7.28,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.7.28,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.7.28,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.09,,,,
1.7.28,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.08,,,,
1.7.28,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.01,,,,
1.7.28,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (:f0 coll),6e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (get coll :f0),5.3e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.3e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.4e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000252,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000416,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),88.0,,,,
1.7.28,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00016,,,,
1.7.28,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),58.0,,,,
1.7.28,V8,set ops,[] #{},4e-06,,,,
1.7.28,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.28,V8,set ops,[v [1 2 3]] (set v),0.00032,,,,
1.7.28,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000273,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (get coll 2),7.1e-05,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.3e-05,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (coll 2),6.8e-05,,,,
1.7.28,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.7.28,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.027,,,,
1.7.28,V8,reader,[s big-str-data] (reader/read-string s),0.754,,,,
1.7.28,V8,range,[r (range 100000)] (last r),4.2,,,,
1.7.28,V8,lazy-seq - first run,[r r] (last r),470.0,,,,
1.7.28,V8,lazy-seq - second run,[r r] (last r),85.0,,,,
1.7.28,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.455,,,,
1.7.28,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.127,,,,
1.7.28,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),321.0,,,,
1.7.28,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),53.75,,,,
1.7.28,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),42.5,,,,
1.7.28,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),139.25,,,,
1.7.28,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),7.8,,,,
1.7.28,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),10.4,,,,
1.7.28,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),199.1,,,,
1.7.28,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),164.9,,,,
1.7.28,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),8.0,,,,
1.7.28,V8,multimethods,[] (simple-multi :foo),0.000633,,,,
1.7.28,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.28,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00031,,,,
1.7.28,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.001,,,,
1.7.28,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),17.1,,,,
1.7.28,SM,identity,[x 1] (identity x),8.32e-06,,,,
1.7.28,SM,symbol construction,[] (symbol (quote foo)),0.000372,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.61,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.15,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.36,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.39,,,,
1.7.28,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.7.28,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.7.28,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.7.28,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000657,,,,
1.7.28,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001425,,,,
1.7.28,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000833,,,,
1.7.28,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001435,,,,
1.7.28,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000198,,,,
1.7.28,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000804,,,,
1.7.28,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000436,,,,
1.7.28,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001714,,,,
1.7.28,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),7.2e-05,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (first coll),0.000101,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (-first coll),6.5e-05,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (rest coll),8.7e-05,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (-rest coll),6.6e-05,,,,
1.7.28,SM,list ops,[] (list),9e-06,,,,
1.7.28,SM,list ops,[] (list 1 2 3),0.001285,,,,
1.7.28,SM,vector ops,[] [],1.1e-05,,,,
1.7.28,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000678,,,,
1.7.28,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000619,,,,
1.7.28,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000564,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (transient coll),0.00203,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000223,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000215,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.00022,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (coll 0),0.000196,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000909,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000814,,,,
1.7.28,SM,vector ops,[coll []] (-conj coll 1),0.000744,,,,
1.7.28,SM,vector ops,[coll [1]] (-conj coll 2),0.000772,,,,
1.7.28,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000796,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (seq coll),0.000798,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000191,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000203,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000171,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000196,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000181,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000265,,,,
1.7.28,SM,large vector ops,[] (reduce conj [] (range 40000)),8.2,,,,
1.7.28,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00174,,,,
1.7.28,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00249,,,,
1.7.28,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00178,,,,
1.7.28,SM,chunked seqs,[] (-first v),0.000178,,,,
1.7.28,SM,chunked seqs,[] (-next v),0.000188,,,,
1.7.28,SM,chunked seqs,[] (-rest v),0.000183,,,,
1.7.28,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),233.0,,,,
1.7.28,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.5,,,,
1.7.28,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.61,,,,
1.7.28,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.93,,,,
1.7.28,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),80.0,,,,
1.7.28,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.7.28,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.5,,,,
1.7.28,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.5,,,,
1.7.28,SM,apply,[] (list 1 2 3 4 5),0.000346,,,,
1.7.28,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000339,,,,
1.7.28,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000395,,,,
1.7.28,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000349,,,,
1.7.28,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000374,,,,
1.7.28,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000817,,,,
1.7.28,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000406,,,,
1.7.28,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000401,,,,
1.7.28,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000431,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000181,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002184,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000184,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000183,,,,
1.7.28,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002763,,,,
1.7.28,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000252,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000215,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000335,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000215,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000239,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000269,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.00022,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000331,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000235,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000227,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000798,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000492,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000897,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000466,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000505,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000222,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000453,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000209,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000479,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.00021,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000467,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000205,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000212,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",177.0,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000185,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000181,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000229,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000228,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),236.0,,,,
1.7.28,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00322,,,,
1.7.28,SM,persistent hash maps,[key :f0] (hash key),0.000182,,,,
1.7.28,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.00017,,,,
1.7.28,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.00018,,,,
1.7.28,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.55,,,,
1.7.28,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.45,,,,
1.7.28,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.0,,,,
1.7.28,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.5,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000236,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000229,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000203,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000244,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000556,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000538,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),300.0,,,,
1.7.28,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000291,,,,
1.7.28,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),508.0,,,,
1.7.28,SM,set ops,[] #{},0.000145,,,,
1.7.28,SM,set ops,[] #{1 3 2},0.000146,,,,
1.7.28,SM,set ops,[v [1 2 3]] (set v),0.000372,,,,
1.7.28,SM,set ops,[] (hash-set 1 2 3),0.000141,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000384,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (get coll 2),0.0002,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.0002,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (coll 2),0.000206,,,,
1.7.28,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.28,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.099,,,,
1.7.28,SM,reader,[s big-str-data] (reader/read-string s),1.854,,,,
1.7.28,SM,range,[r (range 100000)] (last r),5.0,,,,
1.7.28,SM,lazy-seq - first run,[r r] (last r),431.0,,,,
1.7.28,SM,lazy-seq - second run,[r r] (last r),57.0,,,,
1.7.28,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.59,,,,
1.7.28,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.417,,,,
1.7.28,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),214.0,,,,
1.7.28,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.0,,,,
1.7.28,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),197.0,,,,
1.7.28,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),122.0,,,,
1.7.28,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),3.6,,,,
1.7.28,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.1,,,,
1.7.28,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),22.7,,,,
1.7.28,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),174.8,,,,
1.7.28,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.0,,,,
1.7.28,SM,multimethods,[] (simple-multi :foo),0.000275,,,,
1.7.28,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00344,,,,
1.7.28,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00199,,,,
1.7.28,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00377,,,,
1.7.28,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),55.5,,,,
1.7.28,JSC,identity,[x 1] (identity x),1.035e-05,,,,
1.7.28,JSC,symbol construction,[] (symbol (quote foo)),0.000181,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.09,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.1,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.28,JSC,instance?,[coll []] (instance? PersistentVector coll),5.4e-05,,,,
1.7.28,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.28,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.7.28,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000158,,,,
1.7.28,JSC,array & string ops,"[coll ""foobar""] (seq coll)",0.000197,,,,
1.7.28,JSC,array & string ops,[coll (array 1 2 3)] (first coll),7.4e-05,,,,
1.7.28,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.2e-05,,,,
1.7.28,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.28,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.3e-05,,,,
1.7.28,JSC,cloning & specify,[coll [1 2 3]] (clone coll),5.5e-05,,,,
1.7.28,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000227,,,,
1.7.28,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (first coll),4.8e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.7.28,JSC,list ops,[] (list),3.3e-05,,,,
1.7.28,JSC,list ops,[] (list 1 2 3),0.0001,,,,
1.7.28,JSC,vector ops,[] [],3.4e-05,,,,
1.7.28,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.7.28,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000101,,,,
1.7.28,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.6e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.6e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.2e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.7.28,JSC,vector ops,[coll []] (-conj coll 1),7.6e-05,,,,
1.7.28,JSC,vector ops,[coll [1]] (-conj coll 2),7.4e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2]] (-conj coll 3),8.1e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (seq coll),5.9e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.4e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.8e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000189,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.2e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.7.28,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.0,,,,
1.7.28,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00034,,,,
1.7.28,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00055,,,,
1.7.28,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.28,JSC,chunked seqs,[] (-first v),5.8e-05,,,,
1.7.28,JSC,chunked seqs,[] (-next v),0.000191,,,,
1.7.28,JSC,chunked seqs,[] (-rest v),6.2e-05,,,,
1.7.28,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),68.0,,,,
1.7.28,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.9,,,,
1.7.28,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.08,,,,
1.7.28,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.35,,,,
1.7.28,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),42.0,,,,
1.7.28,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.7.28,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.7.28,JSC,apply,[coll (into [] (range 100000))] (apply + coll),4.5,,,,
1.7.28,JSC,apply,[] (list 1 2 3 4 5),0.000166,,,,
1.7.28,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000174,,,,
1.7.28,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000243,,,,
1.7.28,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000172,,,,
1.7.28,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000171,,,,
1.7.28,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000545,,,,
1.7.28,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000229,,,,
1.7.28,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000224,,,,
1.7.28,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000282,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001149,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.6e-05,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.7.28,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001064,,,,
1.7.28,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000103,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000106,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000112,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000111,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.3e-05,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.8e-05,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000151,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),9e-05,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000158,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),9.3e-05,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000102,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",7.5e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",9.2e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",9e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000132,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.6e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.7e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.9e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.5e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),76.0,,,,
1.7.28,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0018,,,,
1.7.28,JSC,persistent hash maps,[key :f0] (hash key),5.1e-05,,,,
1.7.28,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.28,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),5e-05,,,,
1.7.28,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.34,,,,
1.7.28,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.27,,,,
1.7.28,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.61,,,,
1.7.28,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.68,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.7e-05,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (get coll :f0),8.7e-05,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.3e-05,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000107,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000172,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000245,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),120.0,,,,
1.7.28,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000143,,,,
1.7.28,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),45.0,,,,
1.7.28,JSC,set ops,[] #{},4.4e-05,,,,
1.7.28,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.7.28,JSC,set ops,[v [1 2 3]] (set v),0.000351,,,,
1.7.28,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000166,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.1e-05,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.7.28,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.28,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.025,,,,
1.7.28,JSC,reader,[s big-str-data] (reader/read-string s),0.62,,,,
1.7.28,JSC,range,[r (range 100000)] (last r),2.7,,,,
1.7.28,JSC,lazy-seq - first run,[r r] (last r),213.0,,,,
1.7.28,JSC,lazy-seq - second run,[r r] (last r),66.0,,,,
1.7.28,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.646,,,,
1.7.28,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.197,,,,
1.7.28,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),154.0,,,,
1.7.28,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),39.0,,,,
1.7.28,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.25,,,,
1.7.28,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.28,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.4,,,,
1.7.28,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.7,,,,
1.7.28,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),9.9,,,,
1.7.28,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),55.9,,,,
1.7.28,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.7,,,,
1.7.28,JSC,multimethods,[] (simple-multi :foo),0.000309,,,,
1.7.28,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00118,,,,
1.7.28,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00027,,,,
1.7.28,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00081,,,,
1.7.28,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),14.1,,,,
1.7.10,V8,identity,[x 1] (identity x),9.11e-06,,,,
1.7.10,V8,symbol construction,[] (symbol (quote foo)),0.000563,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.22,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.2,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.14,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.10,V8,instance?,[coll []] (instance? PersistentVector coll),0.000516,,,,
1.7.10,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000509,,,,
1.7.10,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000521,,,,
1.7.10,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.9e-05,,,,
1.7.10,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.5e-05,,,,
1.7.10,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.10,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000112,,,,
1.7.10,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.9e-05,,,,
1.7.10,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.4e-05,,,,
1.7.10,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.4e-05,,,,
1.7.10,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00057,,,,
1.7.10,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.3e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (first coll),2e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (-first coll),1.8e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.7.10,V8,list ops,[] (list),3e-06,,,,
1.7.10,V8,list ops,[] (list 1 2 3),0.00056,,,,
1.7.10,V8,vector ops,[] [],4e-06,,,,
1.7.10,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000568,,,,
1.7.10,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00055,,,,
1.7.10,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000562,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (transient coll),0.00021,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (coll 0),0.000512,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.10,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.10,V8,vector ops,[coll [1]] (-conj coll 2),3.9e-05,,,,
1.7.10,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.8e-05,,,,
1.7.10,V8,large vector ops,[] (reduce conj [] (range 40000)),6.8,,,,
1.7.10,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00026,,,,
1.7.10,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0007,,,,
1.7.10,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.10,V8,chunked seqs,[] (-first v),1.9e-05,,,,
1.7.10,V8,chunked seqs,[] (-next v),3e-05,,,,
1.7.10,V8,chunked seqs,[] (-rest v),2.9e-05,,,,
1.7.10,V8,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),61.0,,,,
1.7.10,V8,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),3.9,,,,
1.7.10,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.48,,,,
1.7.10,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.53,,,,
1.7.10,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),86.0,,,,
1.7.10,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.7,,,,
1.7.10,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),1.8,,,,
1.7.10,V8,apply,[coll (into [] (range 100000))] (apply + coll),6.5,,,,
1.7.10,V8,apply,[] (list 1 2 3 4 5),0.000132,,,,
1.7.10,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000144,,,,
1.7.10,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000439,,,,
1.7.10,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000142,,,,
1.7.10,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000236,,,,
1.7.10,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000854,,,,
1.7.10,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000318,,,,
1.7.10,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000303,,,,
1.7.10,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000249,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001382,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.10,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001185,,,,
1.7.10,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.4e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.2e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.3e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.9e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),8.8e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.8e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.0001,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.9e-05,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.00016,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000105,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000174,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000116,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000127,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.4e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000104,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.6e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",9.7e-05,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.6e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000133,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.4e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.5e-05,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",5.0,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.2e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.7.10,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00318,,,,
1.7.10,V8,persistent hash maps,[key :f0] (hash key),2.1e-05,,,,
1.7.10,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.7.10,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.7.10,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.07,,,,
1.7.10,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.96,,,,
1.7.10,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.74,,,,
1.7.10,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.02,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (:f0 coll),6.6e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (get coll :f0),5.9e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.4e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000257,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000417,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),86.0,,,,
1.7.10,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000181,,,,
1.7.10,V8,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),57.0,,,,
1.7.10,V8,set ops,[] #{},4e-06,,,,
1.7.10,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.10,V8,set ops,[v [1 2 3]] (set v),0.000316,,,,
1.7.10,V8,set ops,[] (hash-set 1 2 3),3e-06,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000289,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (get coll 2),6.7e-05,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.7e-05,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (coll 2),7.4e-05,,,,
1.7.10,V8,seq ops,[coll (range 500000)] (reduce + coll),25.0,,,,
1.7.10,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.028,,,,
1.7.10,V8,reader,[s big-str-data] (reader/read-string s),0.749,,,,
1.7.10,V8,range,[r (range 100000)] (last r),3.8,,,,
1.7.10,V8,lazy-seq - first run,[r r] (last r),527.0,,,,
1.7.10,V8,lazy-seq - second run,[r r] (last r),90.0,,,,
1.7.10,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.505,,,,
1.7.10,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),321.0,,,,
1.7.10,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),56.0,,,,
1.7.10,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),42.25,,,,
1.7.10,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),140.75,,,,
1.7.10,V8,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),8.3,,,,
1.7.10,V8,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),10.3,,,,
1.7.10,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),174.0,,,,
1.7.10,V8,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),162.8,,,,
1.7.10,V8,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),7.9,,,,
1.7.10,V8,multimethods,[] (simple-multi :foo),0.000683,,,,
1.7.10,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.10,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00037,,,,
1.7.10,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00149,,,,
1.7.10,V8,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),17.9,,,,
1.7.10,SM,identity,[x 1] (identity x),9.13e-06,,,,
1.7.10,SM,symbol construction,[] (symbol (quote foo)),0.000364,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.54,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.1,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.7.10,SM,instance?,[coll []] (instance? PersistentVector coll),1.5e-05,,,,
1.7.10,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),2.1e-05,,,,
1.7.10,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.7.10,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000744,,,,
1.7.10,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001524,,,,
1.7.10,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.001091,,,,
1.7.10,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001402,,,,
1.7.10,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000162,,,,
1.7.10,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000784,,,,
1.7.10,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000416,,,,
1.7.10,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001782,,,,
1.7.10,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.4e-05,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (first coll),0.000111,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (-first coll),7.8e-05,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (rest coll),9.4e-05,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.4e-05,,,,
1.7.10,SM,list ops,[] (list),9e-06,,,,
1.7.10,SM,list ops,[] (list 1 2 3),0.001328,,,,
1.7.10,SM,vector ops,[] [],9e-06,,,,
1.7.10,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00055,,,,
1.7.10,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000657,,,,
1.7.10,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000487,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (transient coll),0.00192,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000226,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000214,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000214,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (coll 0),0.000196,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000864,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000839,,,,
1.7.10,SM,vector ops,[coll []] (-conj coll 1),0.001053,,,,
1.7.10,SM,vector ops,[coll [1]] (-conj coll 2),0.001074,,,,
1.7.10,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000842,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (seq coll),0.000206,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000188,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000187,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000177,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000191,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000188,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000257,,,,
1.7.10,SM,large vector ops,[] (reduce conj [] (range 40000)),8.0,,,,
1.7.10,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00172,,,,
1.7.10,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00242,,,,
1.7.10,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00177,,,,
1.7.10,SM,chunked seqs,[] (-first v),0.000178,,,,
1.7.10,SM,chunked seqs,[] (-next v),0.000195,,,,
1.7.10,SM,chunked seqs,[] (-rest v),0.000181,,,,
1.7.10,SM,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),229.0,,,,
1.7.10,SM,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),1.4,,,,
1.7.10,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.37,,,,
1.7.10,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.09,,,,
1.7.10,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),75.0,,,,
1.7.10,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),1.0,,,,
1.7.10,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.5,,,,
1.7.10,SM,apply,[coll (into [] (range 100000))] (apply + coll),4.6,,,,
1.7.10,SM,apply,[] (list 1 2 3 4 5),0.000339,,,,
1.7.10,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000317,,,,
1.7.10,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000396,,,,
1.7.10,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000349,,,,
1.7.10,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000368,,,,
1.7.10,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000814,,,,
1.7.10,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000372,,,,
1.7.10,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000408,,,,
1.7.10,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000396,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000188,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002063,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000187,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000181,,,,
1.7.10,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002852,,,,
1.7.10,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000259,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000216,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000328,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000208,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000212,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000265,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000219,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000366,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000228,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000232,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000852,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000469,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000886,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000471,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000526,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000199,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.00048,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000211,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000479,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.00021,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.00047,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000205,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000204,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",173.0,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000178,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000182,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000229,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000223,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),235.0,,,,
1.7.10,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00347,,,,
1.7.10,SM,persistent hash maps,[key :f0] (hash key),0.000185,,,,
1.7.10,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.00017,,,,
1.7.10,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000179,,,,
1.7.10,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.52,,,,
1.7.10,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.23,,,,
1.7.10,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.11,,,,
1.7.10,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),3.62,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000236,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000245,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000209,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000251,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00055,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000537,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),280.0,,,,
1.7.10,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000277,,,,
1.7.10,SM,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),507.0,,,,
1.7.10,SM,set ops,[] #{},0.000149,,,,
1.7.10,SM,set ops,[] #{1 3 2},0.000139,,,,
1.7.10,SM,set ops,[v [1 2 3]] (set v),0.000397,,,,
1.7.10,SM,set ops,[] (hash-set 1 2 3),0.000141,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000377,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000201,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000194,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (coll 2),0.000209,,,,
1.7.10,SM,seq ops,[coll (range 500000)] (reduce + coll),14.0,,,,
1.7.10,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.098,,,,
1.7.10,SM,reader,[s big-str-data] (reader/read-string s),1.794,,,,
1.7.10,SM,range,[r (range 100000)] (last r),5.2,,,,
1.7.10,SM,lazy-seq - first run,[r r] (last r),443.0,,,,
1.7.10,SM,lazy-seq - second run,[r r] (last r),56.0,,,,
1.7.10,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.661,,,,
1.7.10,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),211.0,,,,
1.7.10,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),43.75,,,,
1.7.10,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),199.0,,,,
1.7.10,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),121.75,,,,
1.7.10,SM,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),2.8,,,,
1.7.10,SM,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.3,,,,
1.7.10,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),22.8,,,,
1.7.10,SM,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),175.8,,,,
1.7.10,SM,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),3.0,,,,
1.7.10,SM,multimethods,[] (simple-multi :foo),0.000283,,,,
1.7.10,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0033,,,,
1.7.10,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00191,,,,
1.7.10,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00372,,,,
1.7.10,SM,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),54.0,,,,
1.7.10,JSC,identity,[x 1] (identity x),1.062e-05,,,,
1.7.10,JSC,symbol construction,[] (symbol (quote foo)),0.000185,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.12,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.12,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.7.10,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.7.10,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.10,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),5.2e-05,,,,
1.7.10,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000157,,,,
1.7.10,JSC,array & string ops,"[coll ""foobar""] (seq coll)",0.000204,,,,
1.7.10,JSC,array & string ops,[coll (array 1 2 3)] (first coll),7.6e-05,,,,
1.7.10,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.4e-05,,,,
1.7.10,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.10,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.3e-05,,,,
1.7.10,JSC,cloning & specify,[coll [1 2 3]] (clone coll),5.7e-05,,,,
1.7.10,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000225,,,,
1.7.10,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (first coll),5e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.10,JSC,list ops,[] (list),3.2e-05,,,,
1.7.10,JSC,list ops,[] (list 1 2 3),9.8e-05,,,,
1.7.10,JSC,vector ops,[] [],3.2e-05,,,,
1.7.10,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.9e-05,,,,
1.7.10,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.0001,,,,
1.7.10,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.0001,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.6e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.7e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.7.10,JSC,vector ops,[coll []] (-conj coll 1),8.2e-05,,,,
1.7.10,JSC,vector ops,[coll [1]] (-conj coll 2),7.7e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.7e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (seq coll),5.5e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.3e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.6e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.00019,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.7.10,JSC,large vector ops,[] (reduce conj [] (range 40000)),4.8,,,,
1.7.10,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00037,,,,
1.7.10,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.7.10,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.10,JSC,chunked seqs,[] (-first v),5.6e-05,,,,
1.7.10,JSC,chunked seqs,[] (-next v),0.000191,,,,
1.7.10,JSC,chunked seqs,[] (-rest v),6.3e-05,,,,
1.7.10,JSC,"transient vector, conj! 1000000 items",[v []] (loop [i 0 v (transient v)] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),67.0,,,,
1.7.10,JSC,vector equality,[a (into [] (range 100000)) b (into [] (range 100000))] (= a b),2.0,,,,
1.7.10,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.08,,,,
1.7.10,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.47,,,,
1.7.10,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),40.0,,,,
1.7.10,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 100000)] (reduce + 0 coll),0.9,,,,
1.7.10,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 100000))] (reduce + 0 coll),0.8,,,,
1.7.10,JSC,apply,[coll (into [] (range 100000))] (apply + coll),4.2,,,,
1.7.10,JSC,apply,[] (list 1 2 3 4 5),0.000182,,,,
1.7.10,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.00017,,,,
1.7.10,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000234,,,,
1.7.10,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000177,,,,
1.7.10,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000169,,,,
1.7.10,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000534,,,,
1.7.10,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000238,,,,
1.7.10,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.00023,,,,
1.7.10,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000287,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000957,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.7.10,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001066,,,,
1.7.10,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000103,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000112,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000107,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),8e-05,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00012,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.5e-05,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.9e-05,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000153,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),9e-05,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000172,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),9.3e-05,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000109,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.5e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000102,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",9e-05,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000136,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.7e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.6e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.3e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.9e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.7.10,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00176,,,,
1.7.10,JSC,persistent hash maps,[key :f0] (hash key),5.3e-05,,,,
1.7.10,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.10,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.7.10,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.34,,,,
1.7.10,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.29,,,,
1.7.10,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.62,,,,
1.7.10,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.65,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000101,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.1e-05,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.3e-05,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000106,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000168,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000256,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),122.0,,,,
1.7.10,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000144,,,,
1.7.10,JSC,"transient map, conj! 100000 items",[m cljs.core.PersistentHashMap.EMPTY] (loop [i 0 m (transient m)] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),41.0,,,,
1.7.10,JSC,set ops,[] #{},3.6e-05,,,,
1.7.10,JSC,set ops,[] #{1 3 2},3.8e-05,,,,
1.7.10,JSC,set ops,[v [1 2 3]] (set v),0.00037,,,,
1.7.10,JSC,set ops,[] (hash-set 1 2 3),3.6e-05,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000161,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.2e-05,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (coll 2),0.0001,,,,
1.7.10,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.10,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.026,,,,
1.7.10,JSC,reader,[s big-str-data] (reader/read-string s),0.651,,,,
1.7.10,JSC,range,[r (range 100000)] (last r),2.8,,,,
1.7.10,JSC,lazy-seq - first run,[r r] (last r),204.0,,,,
1.7.10,JSC,lazy-seq - second run,[r r] (last r),63.0,,,,
1.7.10,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.612,,,,
1.7.10,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),143.0,,,,
1.7.10,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),36.0,,,,
1.7.10,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.0,,,,
1.7.10,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.25,,,,
1.7.10,JSC,reducers,[xs (into [] (range 100000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),4.9,,,,
1.7.10,JSC,transducers,[xs (into [] (range 100000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.5,,,,
1.7.10,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 100000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),10.2,,,,
1.7.10,JSC,reduce range 100000 many ops,[xs (range 100000)] (reduce + 0 (map inc (map inc (map inc xs)))),66.2,,,,
1.7.10,JSC,transduce range 100000 many ops,[xs (range 100000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),4.6,,,,
1.7.10,JSC,multimethods,[] (simple-multi :foo),0.000269,,,,
1.7.10,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00011,,,,
1.7.10,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0003,,,,
1.7.10,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00084,,,,
1.7.10,JSC,Destructuring a sequence,[v (into [] (range 100000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),13.9,,,,
