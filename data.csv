Version,Engine,Section,Name,Mean,Deviation,MOE,RME,SEM
1.9.36,V8,identity,[x 1] (identity x),9.08e-06,,,,
1.9.36,V8,symbol construction,[] (symbol (quote foo)),3.1e-05,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.25,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.21,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.14,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.1,,,,
1.9.36,V8,instance?,[coll []] (instance? PersistentVector coll),0.00052,,,,
1.9.36,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000516,,,,
1.9.36,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.00051,,,,
1.9.36,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3.2e-05,,,,
1.9.36,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.4e-05,,,,
1.9.36,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.2e-05,,,,
1.9.36,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000111,,,,
1.9.36,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.9.36,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.9.36,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.3e-05,,,,
1.9.36,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000579,,,,
1.9.36,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (first coll),2.4e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.7e-05,,,,
1.9.36,V8,list ops,[] (list),4e-06,,,,
1.9.36,V8,list ops,[] (list 1 2 3),0.000564,,,,
1.9.36,V8,vector ops,[] [],4e-06,,,,
1.9.36,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000572,,,,
1.9.36,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00057,,,,
1.9.36,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000568,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.6e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.1e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.2e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (coll 0),0.000512,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.4e-05,,,,
1.9.36,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.9.36,V8,vector ops,[coll [1]] (-conj coll 2),3.9e-05,,,,
1.9.36,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (seq coll),4e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.3e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.8e-05,,,,
1.9.36,V8,large vector ops,[] (reduce conj [] (range 40000)),7.0,,,,
1.9.36,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00031,,,,
1.9.36,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.9.36,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00027,,,,
1.9.36,V8,chunked seqs,[] (-first v),2e-05,,,,
1.9.36,V8,chunked seqs,[] (-next v),3.1e-05,,,,
1.9.36,V8,chunked seqs,[] (-rest v),3e-05,,,,
1.9.36,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.9.36,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.15,,,,
1.9.36,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.88,,,,
1.9.36,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),80.0,,,,
1.9.36,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),18.0,,,,
1.9.36,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),22.0,,,,
1.9.36,V8,apply,[coll (into [] (range 1000000))] (apply + coll),59.0,,,,
1.9.36,V8,apply,[] (list 1 2 3 4 5),0.000614,,,,
1.9.36,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000135,,,,
1.9.36,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000428,,,,
1.9.36,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000143,,,,
1.9.36,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000265,,,,
1.9.36,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000833,,,,
1.9.36,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000327,,,,
1.9.36,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000312,,,,
1.9.36,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000253,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001602,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.9.36,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001168,,,,
1.9.36,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.3e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.8e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000103,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.4e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.5e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.4e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000102,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.6e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.7e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.8e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000101,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.8e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.9e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.9e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.9e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),41.0,,,,
1.9.36,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00302,,,,
1.9.36,V8,persistent hash maps,[key :f0] (hash key),2.3e-05,,,,
1.9.36,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.9.36,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2.1e-05,,,,
1.9.36,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.23,,,,
1.9.36,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.08,,,,
1.9.36,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.82,,,,
1.9.36,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (:f0 coll),6.3e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (get coll :f0),5e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.4e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000255,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000343,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),78.0,,,,
1.9.36,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000104,,,,
1.9.36,V8,set ops,[] #{},4e-06,,,,
1.9.36,V8,set ops,[] #{1 3 2},3e-06,,,,
1.9.36,V8,set ops,[v [1 2 3]] (set v),0.000315,,,,
1.9.36,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000285,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (get coll 2),6.9e-05,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (coll 2),7.3e-05,,,,
1.9.36,V8,seq ops,[coll (range 500000)] (reduce + coll),25.0,,,,
1.9.36,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.028,,,,
1.9.36,V8,reader,[s big-str-data] (reader/read-string s),0.767,,,,
1.9.36,V8,range,[r (range 1000000)] (last r),41.0,,,,
1.9.36,V8,lazy-seq - first run,[r r] (last r),479.0,,,,
1.9.36,V8,lazy-seq - second run,[r r] (last r),88.0,,,,
1.9.36,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.488,,,,
1.9.36,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.132,,,,
1.9.36,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),307.0,,,,
1.9.36,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.5,,,,
1.9.36,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.75,,,,
1.9.36,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.9.36,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),110.0,,,,
1.9.36,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),116.0,,,,
1.9.36,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1855.0,,,,
1.9.36,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1778.0,,,,
1.9.36,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),79.0,,,,
1.9.36,V8,multimethods,[] (simple-multi :foo),0.000153,,,,
1.9.36,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.9.36,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.9.36,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00106,,,,
1.9.36,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),129.4,,,,
1.9.36,SM,identity,[x 1] (identity x),8.12e-06,,,,
1.9.36,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.56,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.07,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.36,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.38,,,,
1.9.36,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.9.36,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.9.36,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3.2e-05,,,,
1.9.36,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000509,,,,
1.9.36,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001388,,,,
1.9.36,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.00071,,,,
1.9.36,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001228,,,,
1.9.36,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000174,,,,
1.9.36,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000808,,,,
1.9.36,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000524,,,,
1.9.36,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001795,,,,
1.9.36,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (first coll),0.000144,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (-first coll),7.5e-05,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (rest coll),7.4e-05,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.9.36,SM,list ops,[] (list),9e-06,,,,
1.9.36,SM,list ops,[] (list 1 2 3),0.00124,,,,
1.9.36,SM,vector ops,[] [],9e-06,,,,
1.9.36,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000564,,,,
1.9.36,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000641,,,,
1.9.36,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000493,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (transient coll),0.00184,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000163,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000168,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (coll 0),0.000201,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000921,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000894,,,,
1.9.36,SM,vector ops,[coll []] (-conj coll 1),0.00081,,,,
1.9.36,SM,vector ops,[coll [1]] (-conj coll 2),0.000868,,,,
1.9.36,SM,vector ops,[coll [1 2]] (-conj coll 3),0.00088,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (seq coll),0.000522,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000401,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000339,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000159,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000178,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000181,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000181,,,,
1.9.36,SM,large vector ops,[] (reduce conj [] (range 40000)),8.4,,,,
1.9.36,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00167,,,,
1.9.36,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00249,,,,
1.9.36,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00174,,,,
1.9.36,SM,chunked seqs,[] (-first v),0.000178,,,,
1.9.36,SM,chunked seqs,[] (-next v),0.00019,,,,
1.9.36,SM,chunked seqs,[] (-rest v),0.000183,,,,
1.9.36,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.9.36,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.69,,,,
1.9.36,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.13,,,,
1.9.36,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),80.0,,,,
1.9.36,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.9.36,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),6.0,,,,
1.9.36,SM,apply,[coll (into [] (range 1000000))] (apply + coll),40.0,,,,
1.9.36,SM,apply,[] (list 1 2 3 4 5),0.000372,,,,
1.9.36,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000319,,,,
1.9.36,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000374,,,,
1.9.36,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000351,,,,
1.9.36,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000403,,,,
1.9.36,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000967,,,,
1.9.36,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000358,,,,
1.9.36,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000355,,,,
1.9.36,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000387,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000195,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002341,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000186,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000189,,,,
1.9.36,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002497,,,,
1.9.36,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000258,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000221,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000342,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000223,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000239,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000282,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000223,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00035,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000235,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000234,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000267,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000213,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000332,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000217,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000238,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.00022,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000215,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000215,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000212,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000214,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000237,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.00021,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000214,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",176.0,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000184,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000185,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000234,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000222,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),240.0,,,,
1.9.36,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00335,,,,
1.9.36,SM,persistent hash maps,[key :f0] (hash key),0.000187,,,,
1.9.36,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000176,,,,
1.9.36,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000185,,,,
1.9.36,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.59,,,,
1.9.36,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.26,,,,
1.9.36,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.99,,,,
1.9.36,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.47,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000239,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000229,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000211,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000269,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000655,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000552,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),287.0,,,,
1.9.36,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000296,,,,
1.9.36,SM,set ops,[] #{},0.000164,,,,
1.9.36,SM,set ops,[] #{1 3 2},0.000152,,,,
1.9.36,SM,set ops,[v [1 2 3]] (set v),0.000403,,,,
1.9.36,SM,set ops,[] (hash-set 1 2 3),0.00015,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000419,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000237,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.00021,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (coll 2),0.000207,,,,
1.9.36,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.9.36,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.084,,,,
1.9.36,SM,reader,[s big-str-data] (reader/read-string s),1.672,,,,
1.9.36,SM,range,[r (range 1000000)] (last r),45.0,,,,
1.9.36,SM,lazy-seq - first run,[r r] (last r),427.0,,,,
1.9.36,SM,lazy-seq - second run,[r r] (last r),52.0,,,,
1.9.36,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.634,,,,
1.9.36,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.445,,,,
1.9.36,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),219.0,,,,
1.9.36,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),91.5,,,,
1.9.36,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),194.25,,,,
1.9.36,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),122.5,,,,
1.9.36,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),36.0,,,,
1.9.36,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),33.0,,,,
1.9.36,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),232.0,,,,
1.9.36,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1545.0,,,,
1.9.36,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.9.36,SM,multimethods,[] (simple-multi :foo),0.000309,,,,
1.9.36,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00359,,,,
1.9.36,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00205,,,,
1.9.36,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00281,,,,
1.9.36,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),208.6,,,,
1.9.36,JSC,identity,[x 1] (identity x),1.365e-05,,,,
1.9.36,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.67,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.59,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.03,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.9.36,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.9.36,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.9.36,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.7e-05,,,,
1.9.36,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000129,,,,
1.9.36,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.9e-05,,,,
1.9.36,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000176,,,,
1.9.36,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.4e-05,,,,
1.9.36,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.9.36,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.1e-05,,,,
1.9.36,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.3e-05,,,,
1.9.36,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00022,,,,
1.9.36,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (first coll),4.2e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.9.36,JSC,list ops,[] (list),3.2e-05,,,,
1.9.36,JSC,list ops,[] (list 1 2 3),9.6e-05,,,,
1.9.36,JSC,vector ops,[] [],3.4e-05,,,,
1.9.36,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.9.36,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.6e-05,,,,
1.9.36,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.9e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00028,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.8e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (coll 0),4.9e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.2e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.9.36,JSC,vector ops,[coll []] (-conj coll 1),7.7e-05,,,,
1.9.36,JSC,vector ops,[coll [1]] (-conj coll 2),7.6e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.2e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.2e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),7.4e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000149,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.5e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.9.36,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.9.36,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.9.36,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00058,,,,
1.9.36,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.9.36,JSC,chunked seqs,[] (-first v),5.5e-05,,,,
1.9.36,JSC,chunked seqs,[] (-next v),0.000181,,,,
1.9.36,JSC,chunked seqs,[] (-rest v),6.2e-05,,,,
1.9.36,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.9.36,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.27,,,,
1.9.36,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.67,,,,
1.9.36,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),31.0,,,,
1.9.36,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.9.36,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.9.36,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),39.0,,,,
1.9.36,JSC,apply,[] (list 1 2 3 4 5),0.000174,,,,
1.9.36,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000161,,,,
1.9.36,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00022,,,,
1.9.36,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000162,,,,
1.9.36,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000167,,,,
1.9.36,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000534,,,,
1.9.36,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000233,,,,
1.9.36,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000217,,,,
1.9.36,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000278,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000917,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.6e-05,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.9.36,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001066,,,,
1.9.36,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000101,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000104,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.2e-05,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.00011,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000111,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.6e-05,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.1e-05,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000104,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000114,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7e-05,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.4e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.4e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.5e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000123,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.5e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.2e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.9e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.9.36,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00199,,,,
1.9.36,JSC,persistent hash maps,[key :f0] (hash key),4.9e-05,,,,
1.9.36,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.9.36,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.9.36,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.37,,,,
1.9.36,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.28,,,,
1.9.36,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.65,,,,
1.9.36,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.84,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000102,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (get coll :f0),9e-05,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.6e-05,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.00011,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000255,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000245,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),121.0,,,,
1.9.36,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000139,,,,
1.9.36,JSC,set ops,[] #{},3.7e-05,,,,
1.9.36,JSC,set ops,[] #{1 3 2},3.5e-05,,,,
1.9.36,JSC,set ops,[v [1 2 3]] (set v),0.000344,,,,
1.9.36,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000154,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.8e-05,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.9.36,JSC,seq ops,[coll (range 500000)] (reduce + coll),18.0,,,,
1.9.36,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.021,,,,
1.9.36,JSC,reader,[s big-str-data] (reader/read-string s),0.612,,,,
1.9.36,JSC,range,[r (range 1000000)] (last r),24.0,,,,
1.9.36,JSC,lazy-seq - first run,[r r] (last r),205.0,,,,
1.9.36,JSC,lazy-seq - second run,[r r] (last r),67.0,,,,
1.9.36,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.642,,,,
1.9.36,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.198,,,,
1.9.36,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),146.0,,,,
1.9.36,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),36.5,,,,
1.9.36,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),54.25,,,,
1.9.36,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.9.36,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),48.0,,,,
1.9.36,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),52.0,,,,
1.9.36,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),97.0,,,,
1.9.36,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),815.0,,,,
1.9.36,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),44.0,,,,
1.9.36,JSC,multimethods,[] (simple-multi :foo),0.000243,,,,
1.9.36,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.9.36,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00035,,,,
1.9.36,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.0014,,,,
1.9.36,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),111.2,,,,
1.9.35,V8,identity,[x 1] (identity x),9.18e-06,,,,
1.9.35,V8,symbol construction,[] (symbol (quote foo)),2.4e-05,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.23,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.21,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.9.35,V8,instance?,[coll []] (instance? PersistentVector coll),0.000516,,,,
1.9.35,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000512,,,,
1.9.35,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000514,,,,
1.9.35,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.9e-05,,,,
1.9.35,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.3e-05,,,,
1.9.35,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.2e-05,,,,
1.9.35,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000112,,,,
1.9.35,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.6e-05,,,,
1.9.35,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.4e-05,,,,
1.9.35,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.6e-05,,,,
1.9.35,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000572,,,,
1.9.35,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (first coll),2e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.9.35,V8,list ops,[] (list),4e-06,,,,
1.9.35,V8,list ops,[] (list 1 2 3),0.000553,,,,
1.9.35,V8,vector ops,[] [],4e-06,,,,
1.9.35,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000574,,,,
1.9.35,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000569,,,,
1.9.35,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000564,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.5e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (coll 0),0.000517,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.9.35,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.9.35,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.9.35,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (seq coll),4e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.3e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.4e-05,,,,
1.9.35,V8,large vector ops,[] (reduce conj [] (range 40000)),6.8,,,,
1.9.35,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00028,,,,
1.9.35,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00067,,,,
1.9.35,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.9.35,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.9.35,V8,chunked seqs,[] (-next v),3.4e-05,,,,
1.9.35,V8,chunked seqs,[] (-rest v),2.9e-05,,,,
1.9.35,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.9.35,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.2,,,,
1.9.35,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.71,,,,
1.9.35,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),79.0,,,,
1.9.35,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),18.0,,,,
1.9.35,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),24.0,,,,
1.9.35,V8,apply,[coll (into [] (range 1000000))] (apply + coll),56.0,,,,
1.9.35,V8,apply,[] (list 1 2 3 4 5),0.000612,,,,
1.9.35,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000135,,,,
1.9.35,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000424,,,,
1.9.35,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000142,,,,
1.9.35,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000235,,,,
1.9.35,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000803,,,,
1.9.35,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000324,,,,
1.9.35,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.00032,,,,
1.9.35,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000251,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00154,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.9.35,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001139,,,,
1.9.35,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.7e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.2e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.7e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.2e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.6e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.1e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000103,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.7e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),9.1e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.5e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000102,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.9e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.1e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.3e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.6e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.0001,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.6e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.8e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),5e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.5e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.9.35,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00308,,,,
1.9.35,V8,persistent hash maps,[key :f0] (hash key),2.3e-05,,,,
1.9.35,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.9.35,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.9.35,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.17,,,,
1.9.35,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.05,,,,
1.9.35,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.8,,,,
1.9.35,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.99,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (:f0 coll),6.6e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (get coll :f0),5.5e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.2e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00026,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000339,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),77.0,,,,
1.9.35,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000111,,,,
1.9.35,V8,set ops,[] #{},4e-06,,,,
1.9.35,V8,set ops,[] #{1 3 2},5e-06,,,,
1.9.35,V8,set ops,[v [1 2 3]] (set v),0.000292,,,,
1.9.35,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000281,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (get coll 2),6.7e-05,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (coll 2),7.6e-05,,,,
1.9.35,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.9.35,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.9.35,V8,reader,[s big-str-data] (reader/read-string s),0.732,,,,
1.9.35,V8,range,[r (range 1000000)] (last r),41.0,,,,
1.9.35,V8,lazy-seq - first run,[r r] (last r),457.0,,,,
1.9.35,V8,lazy-seq - second run,[r r] (last r),89.0,,,,
1.9.35,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.458,,,,
1.9.35,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.132,,,,
1.9.35,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),309.0,,,,
1.9.35,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.5,,,,
1.9.35,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.25,,,,
1.9.35,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.9.35,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),94.0,,,,
1.9.35,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),107.0,,,,
1.9.35,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2069.0,,,,
1.9.35,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1761.0,,,,
1.9.35,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),80.0,,,,
1.9.35,V8,multimethods,[] (simple-multi :foo),0.000154,,,,
1.9.35,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.9.35,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00036,,,,
1.9.35,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00104,,,,
1.9.35,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),129.0,,,,
1.9.35,SM,identity,[x 1] (identity x),8.27e-06,,,,
1.9.35,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.54,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.07,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.9.35,SM,instance?,[coll []] (instance? PersistentVector coll),1.6e-05,,,,
1.9.35,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.9.35,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.9.35,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000568,,,,
1.9.35,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001397,,,,
1.9.35,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.00077,,,,
1.9.35,SM,array & string ops,"[coll ""foobar""] (first coll)",0.00121,,,,
1.9.35,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000173,,,,
1.9.35,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000867,,,,
1.9.35,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000476,,,,
1.9.35,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001989,,,,
1.9.35,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (first coll),0.000113,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (-first coll),7.5e-05,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (rest coll),9e-05,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (-rest coll),6.6e-05,,,,
1.9.35,SM,list ops,[] (list),9e-06,,,,
1.9.35,SM,list ops,[] (list 1 2 3),0.001262,,,,
1.9.35,SM,vector ops,[] [],1e-05,,,,
1.9.35,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000542,,,,
1.9.35,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00064,,,,
1.9.35,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000479,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (transient coll),0.00184,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000224,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000163,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000181,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (coll 0),0.000199,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000957,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000891,,,,
1.9.35,SM,vector ops,[coll []] (-conj coll 1),0.000844,,,,
1.9.35,SM,vector ops,[coll [1]] (-conj coll 2),0.000846,,,,
1.9.35,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000859,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (seq coll),0.000531,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000378,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000187,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000175,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.00018,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000174,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000186,,,,
1.9.35,SM,large vector ops,[] (reduce conj [] (range 40000)),8.1,,,,
1.9.35,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00165,,,,
1.9.35,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00246,,,,
1.9.35,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00172,,,,
1.9.35,SM,chunked seqs,[] (-first v),0.000172,,,,
1.9.35,SM,chunked seqs,[] (-next v),0.000187,,,,
1.9.35,SM,chunked seqs,[] (-rest v),0.000181,,,,
1.9.35,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.9.35,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.47,,,,
1.9.35,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.13,,,,
1.9.35,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),76.0,,,,
1.9.35,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),13.0,,,,
1.9.35,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),6.0,,,,
1.9.35,SM,apply,[coll (into [] (range 1000000))] (apply + coll),40.0,,,,
1.9.35,SM,apply,[] (list 1 2 3 4 5),0.0004,,,,
1.9.35,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000356,,,,
1.9.35,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000373,,,,
1.9.35,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000349,,,,
1.9.35,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000363,,,,
1.9.35,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000914,,,,
1.9.35,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000375,,,,
1.9.35,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000346,,,,
1.9.35,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000387,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000197,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00232,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.00019,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000184,,,,
1.9.35,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002587,,,,
1.9.35,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000259,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000221,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000367,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.00022,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000244,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000277,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000227,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00035,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000236,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000232,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000258,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000212,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000366,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000219,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000232,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000225,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000216,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000212,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000211,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000212,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000232,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000214,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000217,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",176.0,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000184,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000186,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000233,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000233,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),246.0,,,,
1.9.35,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00334,,,,
1.9.35,SM,persistent hash maps,[key :f0] (hash key),0.000187,,,,
1.9.35,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000174,,,,
1.9.35,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000188,,,,
1.9.35,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.61,,,,
1.9.35,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.25,,,,
1.9.35,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.04,,,,
1.9.35,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.22,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (:f0 coll),0.00024,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000232,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000214,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000268,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000605,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000609,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),288.0,,,,
1.9.35,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000291,,,,
1.9.35,SM,set ops,[] #{},0.000162,,,,
1.9.35,SM,set ops,[] #{1 3 2},0.000152,,,,
1.9.35,SM,set ops,[v [1 2 3]] (set v),0.000411,,,,
1.9.35,SM,set ops,[] (hash-set 1 2 3),0.00015,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.00041,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000237,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000209,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (coll 2),0.000211,,,,
1.9.35,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.9.35,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.088,,,,
1.9.35,SM,reader,[s big-str-data] (reader/read-string s),1.734,,,,
1.9.35,SM,range,[r (range 1000000)] (last r),49.0,,,,
1.9.35,SM,lazy-seq - first run,[r r] (last r),419.0,,,,
1.9.35,SM,lazy-seq - second run,[r r] (last r),58.0,,,,
1.9.35,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.589,,,,
1.9.35,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.437,,,,
1.9.35,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),218.0,,,,
1.9.35,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),92.25,,,,
1.9.35,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),193.5,,,,
1.9.35,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),124.0,,,,
1.9.35,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),29.0,,,,
1.9.35,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),33.0,,,,
1.9.35,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),240.0,,,,
1.9.35,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1545.0,,,,
1.9.35,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),27.0,,,,
1.9.35,SM,multimethods,[] (simple-multi :foo),0.000312,,,,
1.9.35,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00357,,,,
1.9.35,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00209,,,,
1.9.35,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00286,,,,
1.9.35,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),203.7,,,,
1.9.35,JSC,identity,[x 1] (identity x),1.234e-05,,,,
1.9.35,JSC,symbol construction,[] (symbol (quote foo)),4.7e-05,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.67,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.59,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.03,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.9.35,JSC,instance?,[coll []] (instance? PersistentVector coll),4.7e-05,,,,
1.9.35,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.4e-05,,,,
1.9.35,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.7e-05,,,,
1.9.35,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000124,,,,
1.9.35,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6e-05,,,,
1.9.35,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000176,,,,
1.9.35,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.3e-05,,,,
1.9.35,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.9.35,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.9.35,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.7e-05,,,,
1.9.35,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000216,,,,
1.9.35,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (first coll),4.4e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.9.35,JSC,list ops,[] (list),3.6e-05,,,,
1.9.35,JSC,list ops,[] (list 1 2 3),0.0001,,,,
1.9.35,JSC,vector ops,[] [],3.6e-05,,,,
1.9.35,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.9e-05,,,,
1.9.35,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.9e-05,,,,
1.9.35,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000104,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (coll 0),5.3e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.4e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.9.35,JSC,vector ops,[coll []] (-conj coll 1),7.7e-05,,,,
1.9.35,JSC,vector ops,[coll [1]] (-conj coll 2),7.9e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.7e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (seq coll),5.4e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.6e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),7.2e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000149,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.9.35,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.9.35,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00037,,,,
1.9.35,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00057,,,,
1.9.35,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.9.35,JSC,chunked seqs,[] (-first v),5.2e-05,,,,
1.9.35,JSC,chunked seqs,[] (-next v),0.000184,,,,
1.9.35,JSC,chunked seqs,[] (-rest v),6.2e-05,,,,
1.9.35,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),17.0,,,,
1.9.35,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.23,,,,
1.9.35,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.59,,,,
1.9.35,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),35.0,,,,
1.9.35,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),13.0,,,,
1.9.35,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.9.35,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),43.0,,,,
1.9.35,JSC,apply,[] (list 1 2 3 4 5),0.000187,,,,
1.9.35,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000158,,,,
1.9.35,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000227,,,,
1.9.35,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000165,,,,
1.9.35,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000169,,,,
1.9.35,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000516,,,,
1.9.35,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000232,,,,
1.9.35,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000216,,,,
1.9.35,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00028,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000855,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.9.35,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001042,,,,
1.9.35,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),9.9e-05,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.7e-05,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000109,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.8e-05,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000102,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.7e-05,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000114,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.2e-05,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.5e-05,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000106,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.00011,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7e-05,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.9e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000121,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8.3e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.5e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.5e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),6.8e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.7e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),73.0,,,,
1.9.35,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00198,,,,
1.9.35,JSC,persistent hash maps,[key :f0] (hash key),5.5e-05,,,,
1.9.35,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.9.35,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),5e-05,,,,
1.9.35,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.38,,,,
1.9.35,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.25,,,,
1.9.35,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.62,,,,
1.9.35,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.8,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000103,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.5e-05,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.3e-05,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000117,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00017,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000242,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),126.0,,,,
1.9.35,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000151,,,,
1.9.35,JSC,set ops,[] #{},3.8e-05,,,,
1.9.35,JSC,set ops,[] #{1 3 2},3.6e-05,,,,
1.9.35,JSC,set ops,[v [1 2 3]] (set v),0.000352,,,,
1.9.35,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000155,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.8e-05,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.9.35,JSC,seq ops,[coll (range 500000)] (reduce + coll),19.0,,,,
1.9.35,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.022,,,,
1.9.35,JSC,reader,[s big-str-data] (reader/read-string s),0.613,,,,
1.9.35,JSC,range,[r (range 1000000)] (last r),24.0,,,,
1.9.35,JSC,lazy-seq - first run,[r r] (last r),197.0,,,,
1.9.35,JSC,lazy-seq - second run,[r r] (last r),64.0,,,,
1.9.35,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.651,,,,
1.9.35,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.193,,,,
1.9.35,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),143.0,,,,
1.9.35,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.75,,,,
1.9.35,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),47.25,,,,
1.9.35,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.9.35,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),52.0,,,,
1.9.35,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),44.0,,,,
1.9.35,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),93.0,,,,
1.9.35,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),818.0,,,,
1.9.35,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),45.0,,,,
1.9.35,JSC,multimethods,[] (simple-multi :foo),0.00025,,,,
1.9.35,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00012,,,,
1.9.35,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.9.35,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00138,,,,
1.9.35,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),105.5,,,,
1.9.14,V8,identity,[x 1] (identity x),9.15e-06,,,,
1.9.14,V8,symbol construction,[] (symbol (quote foo)),2.4e-05,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.24,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.19,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.08,,,,
1.9.14,V8,instance?,[coll []] (instance? PersistentVector coll),0.000534,,,,
1.9.14,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.00051,,,,
1.9.14,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000514,,,,
1.9.14,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.7e-05,,,,
1.9.14,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.4e-05,,,,
1.9.14,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.3e-05,,,,
1.9.14,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000115,,,,
1.9.14,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.6e-05,,,,
1.9.14,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.9.14,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.9e-05,,,,
1.9.14,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000586,,,,
1.9.14,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.6e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (first coll),2.4e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.9.14,V8,list ops,[] (list),4e-06,,,,
1.9.14,V8,list ops,[] (list 1 2 3),0.000563,,,,
1.9.14,V8,vector ops,[] [],4e-06,,,,
1.9.14,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00057,,,,
1.9.14,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000578,,,,
1.9.14,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.00057,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.5e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (coll 0),0.000509,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.9.14,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.9.14,V8,vector ops,[coll [1]] (-conj coll 2),3.9e-05,,,,
1.9.14,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (seq coll),4e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.8e-05,,,,
1.9.14,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.9.14,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00028,,,,
1.9.14,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.9.14,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.9.14,V8,chunked seqs,[] (-first v),2.1e-05,,,,
1.9.14,V8,chunked seqs,[] (-next v),3.1e-05,,,,
1.9.14,V8,chunked seqs,[] (-rest v),3.1e-05,,,,
1.9.14,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.9.14,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.17,,,,
1.9.14,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.78,,,,
1.9.14,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.9.14,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.9.14,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),24.0,,,,
1.9.14,V8,apply,[coll (into [] (range 1000000))] (apply + coll),59.0,,,,
1.9.14,V8,apply,[] (list 1 2 3 4 5),0.000608,,,,
1.9.14,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000135,,,,
1.9.14,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000441,,,,
1.9.14,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.00014,,,,
1.9.14,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000234,,,,
1.9.14,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000809,,,,
1.9.14,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000338,,,,
1.9.14,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000299,,,,
1.9.14,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000248,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001477,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.9.14,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001152,,,,
1.9.14,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.7e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.5e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.2e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.8e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.6e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.7e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000103,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.8e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.2e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),9.1e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.4e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000102,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.7e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.9e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.7e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.1e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000101,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.5e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.1e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.7e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.4e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.1e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.9.14,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00328,,,,
1.9.14,V8,persistent hash maps,[key :f0] (hash key),2.6e-05,,,,
1.9.14,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.9.14,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.9.14,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.23,,,,
1.9.14,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.11,,,,
1.9.14,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.85,,,,
1.9.14,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.08,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (:f0 coll),6.5e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (get coll :f0),5.1e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.3e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000253,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000345,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),83.0,,,,
1.9.14,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000105,,,,
1.9.14,V8,set ops,[] #{},4e-06,,,,
1.9.14,V8,set ops,[] #{1 3 2},4e-06,,,,
1.9.14,V8,set ops,[v [1 2 3]] (set v),0.000298,,,,
1.9.14,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000274,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (get coll 2),6.7e-05,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (coll 2),7.4e-05,,,,
1.9.14,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.9.14,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.037,,,,
1.9.14,V8,reader,[s big-str-data] (reader/read-string s),0.762,,,,
1.9.14,V8,range,[r (range 1000000)] (last r),37.0,,,,
1.9.14,V8,lazy-seq - first run,[r r] (last r),463.0,,,,
1.9.14,V8,lazy-seq - second run,[r r] (last r),88.0,,,,
1.9.14,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.47,,,,
1.9.14,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.131,,,,
1.9.14,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),309.0,,,,
1.9.14,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.75,,,,
1.9.14,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),55.5,,,,
1.9.14,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.9.14,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),94.0,,,,
1.9.14,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),104.0,,,,
1.9.14,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2038.0,,,,
1.9.14,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1769.0,,,,
1.9.14,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),90.0,,,,
1.9.14,V8,multimethods,[] (simple-multi :foo),0.000153,,,,
1.9.14,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.9.14,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.9.14,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00117,,,,
1.9.14,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),150.1,,,,
1.9.14,SM,identity,[x 1] (identity x),9.06e-06,,,,
1.9.14,SM,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),2.76,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.9.14,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.9.14,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.9.14,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.9.14,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000558,,,,
1.9.14,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001289,,,,
1.9.14,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.00073,,,,
1.9.14,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001206,,,,
1.9.14,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000163,,,,
1.9.14,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000853,,,,
1.9.14,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000461,,,,
1.9.14,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001865,,,,
1.9.14,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (first coll),0.000111,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (-first coll),7.5e-05,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (rest coll),7.4e-05,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.5e-05,,,,
1.9.14,SM,list ops,[] (list),9e-06,,,,
1.9.14,SM,list ops,[] (list 1 2 3),0.001315,,,,
1.9.14,SM,vector ops,[] [],8e-06,,,,
1.9.14,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000587,,,,
1.9.14,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000666,,,,
1.9.14,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.00054,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (transient coll),0.00181,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000227,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000199,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.00018,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (coll 0),0.000194,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000881,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000835,,,,
1.9.14,SM,vector ops,[coll []] (-conj coll 1),0.000747,,,,
1.9.14,SM,vector ops,[coll [1]] (-conj coll 2),0.000789,,,,
1.9.14,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000881,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (seq coll),0.000579,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000656,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000179,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000162,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000174,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.00018,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000178,,,,
1.9.14,SM,large vector ops,[] (reduce conj [] (range 40000)),8.7,,,,
1.9.14,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00172,,,,
1.9.14,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00245,,,,
1.9.14,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00171,,,,
1.9.14,SM,chunked seqs,[] (-first v),0.000173,,,,
1.9.14,SM,chunked seqs,[] (-next v),0.000185,,,,
1.9.14,SM,chunked seqs,[] (-rest v),0.00018,,,,
1.9.14,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.9.14,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.47,,,,
1.9.14,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.14,,,,
1.9.14,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),74.0,,,,
1.9.14,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.9.14,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.9.14,SM,apply,[coll (into [] (range 1000000))] (apply + coll),44.0,,,,
1.9.14,SM,apply,[] (list 1 2 3 4 5),0.000361,,,,
1.9.14,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000331,,,,
1.9.14,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000388,,,,
1.9.14,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000364,,,,
1.9.14,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.00037,,,,
1.9.14,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000813,,,,
1.9.14,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000406,,,,
1.9.14,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000364,,,,
1.9.14,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000401,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000194,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002258,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000189,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000188,,,,
1.9.14,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002596,,,,
1.9.14,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000265,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000212,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000354,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000217,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.00024,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000265,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000215,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000353,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000232,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.00023,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000266,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000214,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000364,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000219,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000218,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000227,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.00023,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000208,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000207,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000211,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000229,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000215,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000209,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",175.0,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.00018,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000186,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000222,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000224,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),238.0,,,,
1.9.14,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00331,,,,
1.9.14,SM,persistent hash maps,[key :f0] (hash key),0.000189,,,,
1.9.14,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000189,,,,
1.9.14,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000176,,,,
1.9.14,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.51,,,,
1.9.14,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.25,,,,
1.9.14,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.03,,,,
1.9.14,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.48,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000245,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000232,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.00021,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000252,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000663,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000547,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),307.0,,,,
1.9.14,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000287,,,,
1.9.14,SM,set ops,[] #{},0.000161,,,,
1.9.14,SM,set ops,[] #{1 3 2},0.000153,,,,
1.9.14,SM,set ops,[v [1 2 3]] (set v),0.000408,,,,
1.9.14,SM,set ops,[] (hash-set 1 2 3),0.00015,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000437,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000229,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000208,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (coll 2),0.000218,,,,
1.9.14,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.9.14,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.097,,,,
1.9.14,SM,reader,[s big-str-data] (reader/read-string s),1.735,,,,
1.9.14,SM,range,[r (range 1000000)] (last r),48.0,,,,
1.9.14,SM,lazy-seq - first run,[r r] (last r),426.0,,,,
1.9.14,SM,lazy-seq - second run,[r r] (last r),55.0,,,,
1.9.14,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.63,,,,
1.9.14,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.461,,,,
1.9.14,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),214.0,,,,
1.9.14,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),91.5,,,,
1.9.14,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),198.75,,,,
1.9.14,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),121.25,,,,
1.9.14,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),30.0,,,,
1.9.14,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),34.0,,,,
1.9.14,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),243.0,,,,
1.9.14,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1536.0,,,,
1.9.14,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.9.14,SM,multimethods,[] (simple-multi :foo),0.000315,,,,
1.9.14,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0036,,,,
1.9.14,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00207,,,,
1.9.14,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00274,,,,
1.9.14,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),203.2,,,,
1.9.14,JSC,identity,[x 1] (identity x),1.169e-05,,,,
1.9.14,JSC,symbol construction,[] (symbol (quote foo)),5e-05,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.58,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.03,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.9.14,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.9.14,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.2e-05,,,,
1.9.14,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.7e-05,,,,
1.9.14,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000133,,,,
1.9.14,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.7e-05,,,,
1.9.14,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000182,,,,
1.9.14,JSC,array & string ops,"[coll ""foobar""] (first coll)",8e-05,,,,
1.9.14,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.9.14,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.7e-05,,,,
1.9.14,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7e-05,,,,
1.9.14,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000218,,,,
1.9.14,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (first coll),4.5e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.7e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.9.14,JSC,list ops,[] (list),3.3e-05,,,,
1.9.14,JSC,list ops,[] (list 1 2 3),9.5e-05,,,,
1.9.14,JSC,vector ops,[] [],3.2e-05,,,,
1.9.14,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000109,,,,
1.9.14,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.5e-05,,,,
1.9.14,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.3e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00031,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.6e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.4e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.9.14,JSC,vector ops,[coll []] (-conj coll 1),7.6e-05,,,,
1.9.14,JSC,vector ops,[coll [1]] (-conj coll 2),7.6e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (seq coll),5.4e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.5e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (first coll),4.9e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),7.4e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000149,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.3e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.9.14,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.9.14,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.9.14,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.9.14,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.9.14,JSC,chunked seqs,[] (-first v),5.4e-05,,,,
1.9.14,JSC,chunked seqs,[] (-next v),0.000183,,,,
1.9.14,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.9.14,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.9.14,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.19,,,,
1.9.14,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.63,,,,
1.9.14,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),35.0,,,,
1.9.14,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.9.14,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.9.14,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),42.0,,,,
1.9.14,JSC,apply,[] (list 1 2 3 4 5),0.000175,,,,
1.9.14,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000155,,,,
1.9.14,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00023,,,,
1.9.14,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000164,,,,
1.9.14,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000169,,,,
1.9.14,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000536,,,,
1.9.14,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00023,,,,
1.9.14,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000215,,,,
1.9.14,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000273,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000859,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),5.1e-05,,,,
1.9.14,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001053,,,,
1.9.14,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000101,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000104,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000108,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000107,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.5e-05,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.5e-05,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),9.9e-05,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),7.1e-05,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.00011,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7e-05,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.8e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",6e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.00012,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.8e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.5e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.2e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),73.0,,,,
1.9.14,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00212,,,,
1.9.14,JSC,persistent hash maps,[key :f0] (hash key),5.3e-05,,,,
1.9.14,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.9.14,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.9.14,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.36,,,,
1.9.14,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.27,,,,
1.9.14,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.61,,,,
1.9.14,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.73,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.8e-05,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (get coll :f0),9e-05,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.1e-05,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000109,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000175,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000242,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),122.0,,,,
1.9.14,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000143,,,,
1.9.14,JSC,set ops,[] #{},4e-05,,,,
1.9.14,JSC,set ops,[] #{1 3 2},3.5e-05,,,,
1.9.14,JSC,set ops,[v [1 2 3]] (set v),0.00034,,,,
1.9.14,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000155,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.8e-05,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (coll 2),9.6e-05,,,,
1.9.14,JSC,seq ops,[coll (range 500000)] (reduce + coll),19.0,,,,
1.9.14,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.9.14,JSC,reader,[s big-str-data] (reader/read-string s),0.625,,,,
1.9.14,JSC,range,[r (range 1000000)] (last r),30.0,,,,
1.9.14,JSC,lazy-seq - first run,[r r] (last r),195.0,,,,
1.9.14,JSC,lazy-seq - second run,[r r] (last r),62.0,,,,
1.9.14,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.648,,,,
1.9.14,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.196,,,,
1.9.14,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),150.0,,,,
1.9.14,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.25,,,,
1.9.14,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.25,,,,
1.9.14,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),12.75,,,,
1.9.14,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),48.0,,,,
1.9.14,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),51.0,,,,
1.9.14,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),95.0,,,,
1.9.14,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),823.0,,,,
1.9.14,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),46.0,,,,
1.9.14,JSC,multimethods,[] (simple-multi :foo),0.000241,,,,
1.9.14,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.9.14,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.9.14,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.0015,,,,
1.9.14,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),140.5,,,,
1.8.51,V8,identity,[x 1] (identity x),9.24e-06,,,,
1.8.51,V8,symbol construction,[] (symbol (quote foo)),2.4e-05,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.27,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.23,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.8.51,V8,instance?,[coll []] (instance? PersistentVector coll),0.000518,,,,
1.8.51,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000507,,,,
1.8.51,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.00051,,,,
1.8.51,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3.3e-05,,,,
1.8.51,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.2e-05,,,,
1.8.51,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.8.51,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000111,,,,
1.8.51,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.6e-05,,,,
1.8.51,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.4e-05,,,,
1.8.51,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.7e-05,,,,
1.8.51,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000581,,,,
1.8.51,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (first coll),2.3e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (-first coll),1.9e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.8.51,V8,list ops,[] (list),4e-06,,,,
1.8.51,V8,list ops,[] (list 1 2 3),0.000562,,,,
1.8.51,V8,vector ops,[] [],4e-06,,,,
1.8.51,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000575,,,,
1.8.51,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000569,,,,
1.8.51,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000566,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (coll 0),0.000514,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.9e-05,,,,
1.8.51,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.8.51,V8,vector ops,[coll [1]] (-conj coll 2),3.9e-05,,,,
1.8.51,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.7e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.3e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.2e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.7e-05,,,,
1.8.51,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.8.51,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.0003,,,,
1.8.51,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00081,,,,
1.8.51,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.8.51,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.8.51,V8,chunked seqs,[] (-next v),3e-05,,,,
1.8.51,V8,chunked seqs,[] (-rest v),3.5e-05,,,,
1.8.51,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.8.51,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.15,,,,
1.8.51,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.83,,,,
1.8.51,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.8.51,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.8.51,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),22.0,,,,
1.8.51,V8,apply,[coll (into [] (range 1000000))] (apply + coll),56.0,,,,
1.8.51,V8,apply,[] (list 1 2 3 4 5),0.000604,,,,
1.8.51,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000132,,,,
1.8.51,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000444,,,,
1.8.51,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000144,,,,
1.8.51,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000235,,,,
1.8.51,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000829,,,,
1.8.51,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000322,,,,
1.8.51,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000302,,,,
1.8.51,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000255,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001569,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.8.51,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001137,,,,
1.8.51,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.3e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.3e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.4e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.1e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000102,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.9e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.4e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.5e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000101,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.7e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.7e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.9e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.2e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.5e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000102,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.7e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",9.1e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.8e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.6e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.6e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.8.51,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00312,,,,
1.8.51,V8,persistent hash maps,[key :f0] (hash key),2.3e-05,,,,
1.8.51,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.5e-05,,,,
1.8.51,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.8.51,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.18,,,,
1.8.51,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.06,,,,
1.8.51,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.83,,,,
1.8.51,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.99,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (:f0 coll),6.9e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (get coll :f0),5.2e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.1e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.5e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000261,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000344,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),78.0,,,,
1.8.51,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000104,,,,
1.8.51,V8,set ops,[] #{},4e-06,,,,
1.8.51,V8,set ops,[] #{1 3 2},4e-06,,,,
1.8.51,V8,set ops,[v [1 2 3]] (set v),0.000291,,,,
1.8.51,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000285,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (get coll 2),6.6e-05,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (coll 2),7.6e-05,,,,
1.8.51,V8,seq ops,[coll (range 500000)] (reduce + coll),25.0,,,,
1.8.51,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.032,,,,
1.8.51,V8,reader,[s big-str-data] (reader/read-string s),0.75,,,,
1.8.51,V8,range,[r (range 1000000)] (last r),39.0,,,,
1.8.51,V8,lazy-seq - first run,[r r] (last r),494.0,,,,
1.8.51,V8,lazy-seq - second run,[r r] (last r),86.0,,,,
1.8.51,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.501,,,,
1.8.51,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.137,,,,
1.8.51,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),309.0,,,,
1.8.51,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.0,,,,
1.8.51,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),53.25,,,,
1.8.51,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.25,,,,
1.8.51,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),103.0,,,,
1.8.51,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),106.0,,,,
1.8.51,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1869.0,,,,
1.8.51,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1713.0,,,,
1.8.51,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),82.0,,,,
1.8.51,V8,multimethods,[] (simple-multi :foo),0.000154,,,,
1.8.51,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00012,,,,
1.8.51,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.8.51,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00106,,,,
1.8.51,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),148.6,,,,
1.8.51,SM,identity,[x 1] (identity x),8.14e-06,,,,
1.8.51,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.65,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.46,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.8.51,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.8.51,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.8.51,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.8e-05,,,,
1.8.51,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000489,,,,
1.8.51,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001315,,,,
1.8.51,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000697,,,,
1.8.51,SM,array & string ops,"[coll ""foobar""] (first coll)",0.00129,,,,
1.8.51,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000173,,,,
1.8.51,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000837,,,,
1.8.51,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000456,,,,
1.8.51,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00172,,,,
1.8.51,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (first coll),0.000113,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (rest coll),7.4e-05,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (-rest coll),6e-05,,,,
1.8.51,SM,list ops,[] (list),8e-06,,,,
1.8.51,SM,list ops,[] (list 1 2 3),0.00116,,,,
1.8.51,SM,vector ops,[] [],9e-06,,,,
1.8.51,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000603,,,,
1.8.51,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000655,,,,
1.8.51,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000566,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (transient coll),0.00202,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000164,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000168,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (coll 0),0.000191,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000918,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000825,,,,
1.8.51,SM,vector ops,[coll []] (-conj coll 1),0.000754,,,,
1.8.51,SM,vector ops,[coll [1]] (-conj coll 2),0.000815,,,,
1.8.51,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000829,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (seq coll),0.000515,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000392,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.4e-05,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (-first coll),7.7e-05,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000531,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000178,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000174,,,,
1.8.51,SM,large vector ops,[] (reduce conj [] (range 40000)),10.6,,,,
1.8.51,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00165,,,,
1.8.51,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0025,,,,
1.8.51,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00171,,,,
1.8.51,SM,chunked seqs,[] (-first v),0.000171,,,,
1.8.51,SM,chunked seqs,[] (-next v),0.000186,,,,
1.8.51,SM,chunked seqs,[] (-rest v),0.000183,,,,
1.8.51,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.8.51,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.5,,,,
1.8.51,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.21,,,,
1.8.51,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),81.0,,,,
1.8.51,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.8.51,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),6.0,,,,
1.8.51,SM,apply,[coll (into [] (range 1000000))] (apply + coll),43.0,,,,
1.8.51,SM,apply,[] (list 1 2 3 4 5),0.000395,,,,
1.8.51,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000343,,,,
1.8.51,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000408,,,,
1.8.51,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000358,,,,
1.8.51,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000395,,,,
1.8.51,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000804,,,,
1.8.51,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000405,,,,
1.8.51,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000364,,,,
1.8.51,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000421,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000194,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002268,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000193,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.00019,,,,
1.8.51,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002517,,,,
1.8.51,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000263,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000214,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000334,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000214,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000218,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000268,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000224,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000359,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000234,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000239,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000262,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.00021,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000359,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000221,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000236,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000228,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000217,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000218,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000208,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000207,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000234,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000209,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000217,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",177.0,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.00019,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.00018,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000231,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000226,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),239.0,,,,
1.8.51,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00337,,,,
1.8.51,SM,persistent hash maps,[key :f0] (hash key),0.000188,,,,
1.8.51,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000187,,,,
1.8.51,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000178,,,,
1.8.51,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.57,,,,
1.8.51,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.24,,,,
1.8.51,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.07,,,,
1.8.51,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.17,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000249,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000231,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000213,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000252,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000648,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000549,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),284.0,,,,
1.8.51,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000301,,,,
1.8.51,SM,set ops,[] #{},0.00016,,,,
1.8.51,SM,set ops,[] #{1 3 2},0.00015,,,,
1.8.51,SM,set ops,[v [1 2 3]] (set v),0.000406,,,,
1.8.51,SM,set ops,[] (hash-set 1 2 3),0.000151,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000412,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000238,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000205,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (coll 2),0.000211,,,,
1.8.51,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.8.51,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.097,,,,
1.8.51,SM,reader,[s big-str-data] (reader/read-string s),1.704,,,,
1.8.51,SM,range,[r (range 1000000)] (last r),46.0,,,,
1.8.51,SM,lazy-seq - first run,[r r] (last r),423.0,,,,
1.8.51,SM,lazy-seq - second run,[r r] (last r),55.0,,,,
1.8.51,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.6,,,,
1.8.51,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.432,,,,
1.8.51,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),215.0,,,,
1.8.51,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),91.0,,,,
1.8.51,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),203.0,,,,
1.8.51,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),121.75,,,,
1.8.51,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),30.0,,,,
1.8.51,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),32.0,,,,
1.8.51,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),251.0,,,,
1.8.51,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1527.0,,,,
1.8.51,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),27.0,,,,
1.8.51,SM,multimethods,[] (simple-multi :foo),0.000316,,,,
1.8.51,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00351,,,,
1.8.51,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00206,,,,
1.8.51,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00275,,,,
1.8.51,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),200.2,,,,
1.8.51,JSC,identity,[x 1] (identity x),2.092e-05,,,,
1.8.51,JSC,symbol construction,[] (symbol (quote foo)),5e-05,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.67,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.63,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.03,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.8.51,JSC,instance?,[coll []] (instance? PersistentVector coll),4.8e-05,,,,
1.8.51,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.8.51,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.8.51,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000137,,,,
1.8.51,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.8e-05,,,,
1.8.51,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000184,,,,
1.8.51,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.5e-05,,,,
1.8.51,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.8.51,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.7e-05,,,,
1.8.51,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.9e-05,,,,
1.8.51,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00022,,,,
1.8.51,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (first coll),4.9e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.7e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.8.51,JSC,list ops,[] (list),3.3e-05,,,,
1.8.51,JSC,list ops,[] (list 1 2 3),9.5e-05,,,,
1.8.51,JSC,vector ops,[] [],3.7e-05,,,,
1.8.51,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000101,,,,
1.8.51,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000102,,,,
1.8.51,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.8e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.6e-05,,,,
1.8.51,JSC,vector ops,[coll []] (-conj coll 1),7.8e-05,,,,
1.8.51,JSC,vector ops,[coll [1]] (-conj coll 2),7.6e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.7e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (seq coll),5.9e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.2e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.2e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.7e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000153,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.4e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.7e-05,,,,
1.8.51,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.3,,,,
1.8.51,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00035,,,,
1.8.51,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.8.51,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.8.51,JSC,chunked seqs,[] (-first v),5.7e-05,,,,
1.8.51,JSC,chunked seqs,[] (-next v),0.00018,,,,
1.8.51,JSC,chunked seqs,[] (-rest v),6.1e-05,,,,
1.8.51,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.8.51,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.18,,,,
1.8.51,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.54,,,,
1.8.51,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),33.0,,,,
1.8.51,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),13.0,,,,
1.8.51,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.8.51,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),37.0,,,,
1.8.51,JSC,apply,[] (list 1 2 3 4 5),0.000175,,,,
1.8.51,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000157,,,,
1.8.51,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000226,,,,
1.8.51,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000161,,,,
1.8.51,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000169,,,,
1.8.51,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000516,,,,
1.8.51,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000237,,,,
1.8.51,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000213,,,,
1.8.51,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000273,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.7e-05,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000955,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.8.51,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001067,,,,
1.8.51,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),9.8e-05,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000108,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000105,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000111,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.9e-05,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.9e-05,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000104,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000112,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.4e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.8e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.5e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000117,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.9e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.3e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.6e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),73.0,,,,
1.8.51,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00209,,,,
1.8.51,JSC,persistent hash maps,[key :f0] (hash key),5.1e-05,,,,
1.8.51,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.8.51,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.8.51,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.38,,,,
1.8.51,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.8.51,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.59,,,,
1.8.51,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.77,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.0001,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.6e-05,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.6e-05,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000115,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00017,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000234,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),121.0,,,,
1.8.51,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000143,,,,
1.8.51,JSC,set ops,[] #{},3.6e-05,,,,
1.8.51,JSC,set ops,[] #{1 3 2},3.7e-05,,,,
1.8.51,JSC,set ops,[v [1 2 3]] (set v),0.000348,,,,
1.8.51,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000153,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.3e-05,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.8.51,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.8.51,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.8.51,JSC,reader,[s big-str-data] (reader/read-string s),0.648,,,,
1.8.51,JSC,range,[r (range 1000000)] (last r),29.0,,,,
1.8.51,JSC,lazy-seq - first run,[r r] (last r),201.0,,,,
1.8.51,JSC,lazy-seq - second run,[r r] (last r),69.0,,,,
1.8.51,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.655,,,,
1.8.51,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.193,,,,
1.8.51,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),148.0,,,,
1.8.51,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.75,,,,
1.8.51,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.25,,,,
1.8.51,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),12.75,,,,
1.8.51,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),48.0,,,,
1.8.51,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),51.0,,,,
1.8.51,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),97.0,,,,
1.8.51,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),821.0,,,,
1.8.51,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),46.0,,,,
1.8.51,JSC,multimethods,[] (simple-multi :foo),0.000243,,,,
1.8.51,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.8.51,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00033,,,,
1.8.51,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00139,,,,
1.8.51,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),140.0,,,,
1.8.40,V8,identity,[x 1] (identity x),9.23e-06,,,,
1.8.40,V8,symbol construction,[] (symbol (quote foo)),2.2e-05,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.24,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.19,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.8.40,V8,instance?,[coll []] (instance? PersistentVector coll),0.000521,,,,
1.8.40,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000517,,,,
1.8.40,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000519,,,,
1.8.40,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3.1e-05,,,,
1.8.40,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.4e-05,,,,
1.8.40,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.2e-05,,,,
1.8.40,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000112,,,,
1.8.40,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.6e-05,,,,
1.8.40,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.8.40,V8,cloning & specify,[coll [1 2 3]] (clone coll),3.1e-05,,,,
1.8.40,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000572,,,,
1.8.40,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (first coll),2e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (-first coll),1.8e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (rest coll),1.5e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.8.40,V8,list ops,[] (list),4e-06,,,,
1.8.40,V8,list ops,[] (list 1 2 3),0.000558,,,,
1.8.40,V8,vector ops,[] [],4e-06,,,,
1.8.40,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000575,,,,
1.8.40,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000572,,,,
1.8.40,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000563,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (coll 0),0.000508,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.8.40,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.8.40,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.8.40,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (seq coll),4e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.3e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.7e-05,,,,
1.8.40,V8,large vector ops,[] (reduce conj [] (range 40000)),6.5,,,,
1.8.40,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00029,,,,
1.8.40,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.8.40,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00026,,,,
1.8.40,V8,chunked seqs,[] (-first v),1.7e-05,,,,
1.8.40,V8,chunked seqs,[] (-next v),3e-05,,,,
1.8.40,V8,chunked seqs,[] (-rest v),3.2e-05,,,,
1.8.40,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),38.0,,,,
1.8.40,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.24,,,,
1.8.40,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.77,,,,
1.8.40,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),86.0,,,,
1.8.40,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.8.40,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),22.0,,,,
1.8.40,V8,apply,[coll (into [] (range 1000000))] (apply + coll),60.0,,,,
1.8.40,V8,apply,[] (list 1 2 3 4 5),0.000608,,,,
1.8.40,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000133,,,,
1.8.40,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000441,,,,
1.8.40,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000146,,,,
1.8.40,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000256,,,,
1.8.40,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000806,,,,
1.8.40,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000315,,,,
1.8.40,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000298,,,,
1.8.40,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000257,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.5e-05,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001529,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.8.40,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.00116,,,,
1.8.40,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.4e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.8e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.1e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.2e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000103,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.2e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.4e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.4e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000103,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.9e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.1e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.8e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.9e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.4e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.8e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.6e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.8e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),43.0,,,,
1.8.40,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00298,,,,
1.8.40,V8,persistent hash maps,[key :f0] (hash key),2.1e-05,,,,
1.8.40,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.6e-05,,,,
1.8.40,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.8.40,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.16,,,,
1.8.40,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.07,,,,
1.8.40,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.9,,,,
1.8.40,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.15,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (:f0 coll),6.4e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (get coll :f0),5.1e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),3.9e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.3e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000266,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000345,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),77.0,,,,
1.8.40,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000105,,,,
1.8.40,V8,set ops,[] #{},4e-06,,,,
1.8.40,V8,set ops,[] #{1 3 2},4e-06,,,,
1.8.40,V8,set ops,[v [1 2 3]] (set v),0.000299,,,,
1.8.40,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000307,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (get coll 2),8.5e-05,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (coll 2),7.7e-05,,,,
1.8.40,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.8.40,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.031,,,,
1.8.40,V8,reader,[s big-str-data] (reader/read-string s),0.785,,,,
1.8.40,V8,range,[r (range 1000000)] (last r),40.0,,,,
1.8.40,V8,lazy-seq - first run,[r r] (last r),483.0,,,,
1.8.40,V8,lazy-seq - second run,[r r] (last r),84.0,,,,
1.8.40,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.469,,,,
1.8.40,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.134,,,,
1.8.40,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),308.0,,,,
1.8.40,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),53.0,,,,
1.8.40,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.25,,,,
1.8.40,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.8.40,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),93.0,,,,
1.8.40,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),112.0,,,,
1.8.40,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1845.0,,,,
1.8.40,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1743.0,,,,
1.8.40,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),79.0,,,,
1.8.40,V8,multimethods,[] (simple-multi :foo),0.000173,,,,
1.8.40,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.8.40,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0003,,,,
1.8.40,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00114,,,,
1.8.40,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),149.3,,,,
1.8.40,SM,identity,[x 1] (identity x),8.21e-06,,,,
1.8.40,SM,symbol construction,[] (symbol (quote foo)),4.7e-05,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.13,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.38,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.38,,,,
1.8.40,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.8.40,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.8.40,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.8e-05,,,,
1.8.40,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000524,,,,
1.8.40,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.00119,,,,
1.8.40,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000829,,,,
1.8.40,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001099,,,,
1.8.40,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000172,,,,
1.8.40,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000985,,,,
1.8.40,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000457,,,,
1.8.40,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001769,,,,
1.8.40,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (first coll),0.00011,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (-first coll),7.5e-05,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (rest coll),7.7e-05,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.8e-05,,,,
1.8.40,SM,list ops,[] (list),9e-06,,,,
1.8.40,SM,list ops,[] (list 1 2 3),0.001207,,,,
1.8.40,SM,vector ops,[] [],9e-06,,,,
1.8.40,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000579,,,,
1.8.40,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000681,,,,
1.8.40,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000525,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (transient coll),0.0019,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000233,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000164,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000197,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (coll 0),0.000234,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000985,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000801,,,,
1.8.40,SM,vector ops,[coll []] (-conj coll 1),0.000745,,,,
1.8.40,SM,vector ops,[coll [1]] (-conj coll 2),0.000772,,,,
1.8.40,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000798,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (seq coll),0.000513,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-seq coll),0.00039,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.2e-05,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (-first coll),7.8e-05,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000363,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000174,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000182,,,,
1.8.40,SM,large vector ops,[] (reduce conj [] (range 40000)),8.0,,,,
1.8.40,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00169,,,,
1.8.40,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00243,,,,
1.8.40,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00171,,,,
1.8.40,SM,chunked seqs,[] (-first v),0.00017,,,,
1.8.40,SM,chunked seqs,[] (-next v),0.000185,,,,
1.8.40,SM,chunked seqs,[] (-rest v),0.000181,,,,
1.8.40,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.8.40,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.44,,,,
1.8.40,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.33,,,,
1.8.40,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),85.0,,,,
1.8.40,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.8.40,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),7.0,,,,
1.8.40,SM,apply,[coll (into [] (range 1000000))] (apply + coll),44.0,,,,
1.8.40,SM,apply,[] (list 1 2 3 4 5),0.000363,,,,
1.8.40,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000344,,,,
1.8.40,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000391,,,,
1.8.40,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000366,,,,
1.8.40,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000366,,,,
1.8.40,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000881,,,,
1.8.40,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00037,,,,
1.8.40,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000389,,,,
1.8.40,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000416,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000197,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002397,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000186,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000184,,,,
1.8.40,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002595,,,,
1.8.40,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000255,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000213,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000361,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000211,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.00024,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000261,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000224,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000366,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000217,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000237,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000261,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.00021,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000332,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000218,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000231,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000218,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000213,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000208,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000218,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000216,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000229,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000205,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000209,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",175.0,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000204,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.00018,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000229,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000223,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),239.0,,,,
1.8.40,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00337,,,,
1.8.40,SM,persistent hash maps,[key :f0] (hash key),0.000185,,,,
1.8.40,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000185,,,,
1.8.40,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000178,,,,
1.8.40,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.56,,,,
1.8.40,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.18,,,,
1.8.40,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.02,,,,
1.8.40,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.2,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (:f0 coll),0.00024,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (get coll :f0),0.00023,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000214,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000249,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000602,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000637,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),307.0,,,,
1.8.40,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000286,,,,
1.8.40,SM,set ops,[] #{},0.000161,,,,
1.8.40,SM,set ops,[] #{1 3 2},0.000157,,,,
1.8.40,SM,set ops,[v [1 2 3]] (set v),0.000407,,,,
1.8.40,SM,set ops,[] (hash-set 1 2 3),0.000148,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000411,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000214,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000211,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (coll 2),0.000215,,,,
1.8.40,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.8.40,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.096,,,,
1.8.40,SM,reader,[s big-str-data] (reader/read-string s),1.705,,,,
1.8.40,SM,range,[r (range 1000000)] (last r),47.0,,,,
1.8.40,SM,lazy-seq - first run,[r r] (last r),426.0,,,,
1.8.40,SM,lazy-seq - second run,[r r] (last r),57.0,,,,
1.8.40,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.634,,,,
1.8.40,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.445,,,,
1.8.40,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),214.0,,,,
1.8.40,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),90.5,,,,
1.8.40,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),194.5,,,,
1.8.40,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),122.5,,,,
1.8.40,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),29.0,,,,
1.8.40,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),32.0,,,,
1.8.40,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),234.0,,,,
1.8.40,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1543.0,,,,
1.8.40,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),27.0,,,,
1.8.40,SM,multimethods,[] (simple-multi :foo),0.000314,,,,
1.8.40,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00355,,,,
1.8.40,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00206,,,,
1.8.40,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00278,,,,
1.8.40,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),207.6,,,,
1.8.40,JSC,identity,[x 1] (identity x),1.264e-05,,,,
1.8.40,JSC,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.68,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.58,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.03,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.8.40,JSC,instance?,[coll []] (instance? PersistentVector coll),4.8e-05,,,,
1.8.40,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.5e-05,,,,
1.8.40,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.8.40,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000138,,,,
1.8.40,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.6e-05,,,,
1.8.40,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000179,,,,
1.8.40,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.1e-05,,,,
1.8.40,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.8.40,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.8.40,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.2e-05,,,,
1.8.40,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000222,,,,
1.8.40,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (first coll),4.2e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.8e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.6e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.6e-05,,,,
1.8.40,JSC,list ops,[] (list),3.2e-05,,,,
1.8.40,JSC,list ops,[] (list 1 2 3),0.000109,,,,
1.8.40,JSC,vector ops,[] [],4.1e-05,,,,
1.8.40,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.9e-05,,,,
1.8.40,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.9e-05,,,,
1.8.40,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000102,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00031,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.6e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.7e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.9e-05,,,,
1.8.40,JSC,vector ops,[coll []] (-conj coll 1),7.7e-05,,,,
1.8.40,JSC,vector ops,[coll [1]] (-conj coll 2),7.9e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.7e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.5e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.5e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.8e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000151,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.7e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.8.40,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.8.40,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.8.40,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.8.40,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.8.40,JSC,chunked seqs,[] (-first v),5.2e-05,,,,
1.8.40,JSC,chunked seqs,[] (-next v),0.000183,,,,
1.8.40,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.8.40,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),20.0,,,,
1.8.40,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.21,,,,
1.8.40,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.57,,,,
1.8.40,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),35.0,,,,
1.8.40,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),12.0,,,,
1.8.40,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.8.40,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),41.0,,,,
1.8.40,JSC,apply,[] (list 1 2 3 4 5),0.000187,,,,
1.8.40,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000162,,,,
1.8.40,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000229,,,,
1.8.40,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000164,,,,
1.8.40,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000164,,,,
1.8.40,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000504,,,,
1.8.40,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000228,,,,
1.8.40,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000223,,,,
1.8.40,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000276,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000922,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.8.40,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001073,,,,
1.8.40,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),9.8e-05,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000107,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000105,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000108,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.5e-05,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.4e-05,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000101,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.6e-05,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.00011,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.4e-05,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.7e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.8e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.6e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000124,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.6e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.1e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.2e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.6e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),73.0,,,,
1.8.40,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0021,,,,
1.8.40,JSC,persistent hash maps,[key :f0] (hash key),4.8e-05,,,,
1.8.40,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.8.40,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.8.40,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.37,,,,
1.8.40,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.8.40,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.61,,,,
1.8.40,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.72,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.0001,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (get coll :f0),0.0001,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.3e-05,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000115,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000172,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000237,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),119.0,,,,
1.8.40,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000147,,,,
1.8.40,JSC,set ops,[] #{},3.8e-05,,,,
1.8.40,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.8.40,JSC,set ops,[v [1 2 3]] (set v),0.000341,,,,
1.8.40,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000158,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.6e-05,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (coll 2),9.4e-05,,,,
1.8.40,JSC,seq ops,[coll (range 500000)] (reduce + coll),18.0,,,,
1.8.40,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.8.40,JSC,reader,[s big-str-data] (reader/read-string s),0.623,,,,
1.8.40,JSC,range,[r (range 1000000)] (last r),28.0,,,,
1.8.40,JSC,lazy-seq - first run,[r r] (last r),199.0,,,,
1.8.40,JSC,lazy-seq - second run,[r r] (last r),60.0,,,,
1.8.40,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.65,,,,
1.8.40,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.193,,,,
1.8.40,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),149.0,,,,
1.8.40,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.25,,,,
1.8.40,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),44.5,,,,
1.8.40,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.8.40,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),45.0,,,,
1.8.40,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),48.0,,,,
1.8.40,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),96.0,,,,
1.8.40,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),815.0,,,,
1.8.40,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),44.0,,,,
1.8.40,JSC,multimethods,[] (simple-multi :foo),0.000241,,,,
1.8.40,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.8.40,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.8.40,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00133,,,,
1.8.40,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),142.5,,,,
1.8.34,V8,identity,[x 1] (identity x),9.12e-06,,,,
1.8.34,V8,symbol construction,[] (symbol (quote foo)),2.7e-05,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.27,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.2,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.8.34,V8,instance?,[coll []] (instance? PersistentVector coll),0.000521,,,,
1.8.34,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000508,,,,
1.8.34,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000513,,,,
1.8.34,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.8e-05,,,,
1.8.34,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.9e-05,,,,
1.8.34,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.5e-05,,,,
1.8.34,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000111,,,,
1.8.34,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.6e-05,,,,
1.8.34,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.8.34,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.5e-05,,,,
1.8.34,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000575,,,,
1.8.34,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (first coll),2.1e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (rest coll),1.5e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.8.34,V8,list ops,[] (list),4e-06,,,,
1.8.34,V8,list ops,[] (list 1 2 3),0.000556,,,,
1.8.34,V8,vector ops,[] [],4e-06,,,,
1.8.34,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00057,,,,
1.8.34,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000564,,,,
1.8.34,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000566,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (transient coll),0.00025,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.5e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (coll 0),0.000511,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.8.34,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.8.34,V8,vector ops,[coll [1]] (-conj coll 2),3.9e-05,,,,
1.8.34,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (seq coll),4.2e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.3e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.8.34,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.8.34,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00032,,,,
1.8.34,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00069,,,,
1.8.34,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.8.34,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.8.34,V8,chunked seqs,[] (-next v),3.3e-05,,,,
1.8.34,V8,chunked seqs,[] (-rest v),2.9e-05,,,,
1.8.34,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),38.0,,,,
1.8.34,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.23,,,,
1.8.34,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.84,,,,
1.8.34,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),79.0,,,,
1.8.34,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),18.0,,,,
1.8.34,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),22.0,,,,
1.8.34,V8,apply,[coll (into [] (range 1000000))] (apply + coll),56.0,,,,
1.8.34,V8,apply,[] (list 1 2 3 4 5),0.000609,,,,
1.8.34,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000136,,,,
1.8.34,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000449,,,,
1.8.34,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000142,,,,
1.8.34,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000235,,,,
1.8.34,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000928,,,,
1.8.34,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000314,,,,
1.8.34,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000323,,,,
1.8.34,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000248,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.9e-05,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001645,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.4e-05,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.8.34,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001188,,,,
1.8.34,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.8e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.6e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.8e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000108,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.8e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.7e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.8e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.4e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000101,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.6e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.6e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.9e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.0001,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.6e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.2e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),5e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),38.0,,,,
1.8.34,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00344,,,,
1.8.34,V8,persistent hash maps,[key :f0] (hash key),2.2e-05,,,,
1.8.34,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.3e-05,,,,
1.8.34,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.8.34,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.23,,,,
1.8.34,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.04,,,,
1.8.34,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.9,,,,
1.8.34,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.03,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (:f0 coll),7.1e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (get coll :f0),5.1e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),3.9e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.2e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000321,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000346,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),76.0,,,,
1.8.34,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000104,,,,
1.8.34,V8,set ops,[] #{},4e-06,,,,
1.8.34,V8,set ops,[] #{1 3 2},5e-06,,,,
1.8.34,V8,set ops,[v [1 2 3]] (set v),0.000291,,,,
1.8.34,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000275,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (get coll 2),6.8e-05,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (contains? coll 2),5e-05,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (coll 2),7.7e-05,,,,
1.8.34,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.8.34,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.03,,,,
1.8.34,V8,reader,[s big-str-data] (reader/read-string s),0.743,,,,
1.8.34,V8,range,[r (range 1000000)] (last r),38.0,,,,
1.8.34,V8,lazy-seq - first run,[r r] (last r),463.0,,,,
1.8.34,V8,lazy-seq - second run,[r r] (last r),88.0,,,,
1.8.34,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.481,,,,
1.8.34,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.135,,,,
1.8.34,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),321.0,,,,
1.8.34,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),58.25,,,,
1.8.34,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),44.25,,,,
1.8.34,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.8.34,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),95.0,,,,
1.8.34,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),109.0,,,,
1.8.34,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2269.0,,,,
1.8.34,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1785.0,,,,
1.8.34,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),85.0,,,,
1.8.34,V8,multimethods,[] (simple-multi :foo),0.000155,,,,
1.8.34,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.8.34,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00037,,,,
1.8.34,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00108,,,,
1.8.34,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),147.6,,,,
1.8.34,SM,identity,[x 1] (identity x),8.22e-06,,,,
1.8.34,SM,symbol construction,[] (symbol (quote foo)),4.7e-05,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.85,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.08,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.34,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.8.34,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.8.34,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.8.34,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.8.34,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000607,,,,
1.8.34,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001386,,,,
1.8.34,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000767,,,,
1.8.34,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001109,,,,
1.8.34,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000173,,,,
1.8.34,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000819,,,,
1.8.34,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000428,,,,
1.8.34,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001826,,,,
1.8.34,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (first coll),0.000109,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (-first coll),7.5e-05,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (rest coll),7.8e-05,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.8e-05,,,,
1.8.34,SM,list ops,[] (list),9e-06,,,,
1.8.34,SM,list ops,[] (list 1 2 3),0.001302,,,,
1.8.34,SM,vector ops,[] [],9e-06,,,,
1.8.34,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000549,,,,
1.8.34,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000622,,,,
1.8.34,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000495,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (transient coll),0.00182,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000223,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000164,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000169,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (coll 0),0.000196,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000841,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000821,,,,
1.8.34,SM,vector ops,[coll []] (-conj coll 1),0.000727,,,,
1.8.34,SM,vector ops,[coll [1]] (-conj coll 2),0.000765,,,,
1.8.34,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000783,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (seq coll),0.00054,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000414,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.5e-05,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (-first coll),7.8e-05,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000401,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000179,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.00018,,,,
1.8.34,SM,large vector ops,[] (reduce conj [] (range 40000)),8.1,,,,
1.8.34,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00167,,,,
1.8.34,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00247,,,,
1.8.34,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00172,,,,
1.8.34,SM,chunked seqs,[] (-first v),0.000171,,,,
1.8.34,SM,chunked seqs,[] (-next v),0.000185,,,,
1.8.34,SM,chunked seqs,[] (-rest v),0.000177,,,,
1.8.34,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.8.34,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.49,,,,
1.8.34,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.16,,,,
1.8.34,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),80.0,,,,
1.8.34,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.8.34,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),6.0,,,,
1.8.34,SM,apply,[coll (into [] (range 1000000))] (apply + coll),43.0,,,,
1.8.34,SM,apply,[] (list 1 2 3 4 5),0.000357,,,,
1.8.34,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000346,,,,
1.8.34,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000391,,,,
1.8.34,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000374,,,,
1.8.34,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000386,,,,
1.8.34,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000814,,,,
1.8.34,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000372,,,,
1.8.34,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000391,,,,
1.8.34,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000405,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000194,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002151,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000189,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000184,,,,
1.8.34,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002683,,,,
1.8.34,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000264,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000217,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000333,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000214,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.00024,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.00026,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000226,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.0004,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000218,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000239,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000258,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000217,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000358,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000214,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000235,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000225,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000223,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.00021,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.00021,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000208,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000238,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.00021,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000219,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",175.0,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000198,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.00018,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000229,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000231,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),242.0,,,,
1.8.34,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00337,,,,
1.8.34,SM,persistent hash maps,[key :f0] (hash key),0.000191,,,,
1.8.34,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000174,,,,
1.8.34,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000182,,,,
1.8.34,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.57,,,,
1.8.34,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.2,,,,
1.8.34,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.06,,,,
1.8.34,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.27,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000243,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (get coll :f0),0.00023,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000218,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000253,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000571,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000591,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),290.0,,,,
1.8.34,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000288,,,,
1.8.34,SM,set ops,[] #{},0.000162,,,,
1.8.34,SM,set ops,[] #{1 3 2},0.000153,,,,
1.8.34,SM,set ops,[v [1 2 3]] (set v),0.000373,,,,
1.8.34,SM,set ops,[] (hash-set 1 2 3),0.000149,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000408,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000241,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000206,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (coll 2),0.000236,,,,
1.8.34,SM,seq ops,[coll (range 500000)] (reduce + coll),18.0,,,,
1.8.34,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.094,,,,
1.8.34,SM,reader,[s big-str-data] (reader/read-string s),1.803,,,,
1.8.34,SM,range,[r (range 1000000)] (last r),52.0,,,,
1.8.34,SM,lazy-seq - first run,[r r] (last r),425.0,,,,
1.8.34,SM,lazy-seq - second run,[r r] (last r),53.0,,,,
1.8.34,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.645,,,,
1.8.34,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.434,,,,
1.8.34,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),217.0,,,,
1.8.34,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),91.25,,,,
1.8.34,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),191.75,,,,
1.8.34,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),122.5,,,,
1.8.34,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),32.0,,,,
1.8.34,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.8.34,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),238.0,,,,
1.8.34,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1528.0,,,,
1.8.34,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.8.34,SM,multimethods,[] (simple-multi :foo),0.000315,,,,
1.8.34,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00356,,,,
1.8.34,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00208,,,,
1.8.34,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00276,,,,
1.8.34,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),200.0,,,,
1.8.34,JSC,identity,[x 1] (identity x),1.114e-05,,,,
1.8.34,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.65,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.59,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.03,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.8.34,JSC,instance?,[coll []] (instance? PersistentVector coll),4.6e-05,,,,
1.8.34,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.8.34,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.8.34,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000134,,,,
1.8.34,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.9e-05,,,,
1.8.34,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000181,,,,
1.8.34,JSC,array & string ops,"[coll ""foobar""] (first coll)",8e-05,,,,
1.8.34,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.7e-05,,,,
1.8.34,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.7e-05,,,,
1.8.34,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.7e-05,,,,
1.8.34,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000216,,,,
1.8.34,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (first coll),4.6e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.8.34,JSC,list ops,[] (list),3.1e-05,,,,
1.8.34,JSC,list ops,[] (list 1 2 3),0.000105,,,,
1.8.34,JSC,vector ops,[] [],3.7e-05,,,,
1.8.34,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000103,,,,
1.8.34,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.8e-05,,,,
1.8.34,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000104,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.5e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.8e-05,,,,
1.8.34,JSC,vector ops,[coll []] (-conj coll 1),7.3e-05,,,,
1.8.34,JSC,vector ops,[coll [1]] (-conj coll 2),7.8e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.7e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (seq coll),5.6e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.8e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000148,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.8.34,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.0,,,,
1.8.34,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00038,,,,
1.8.34,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00058,,,,
1.8.34,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.8.34,JSC,chunked seqs,[] (-first v),5.3e-05,,,,
1.8.34,JSC,chunked seqs,[] (-next v),0.000179,,,,
1.8.34,JSC,chunked seqs,[] (-rest v),6.7e-05,,,,
1.8.34,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),16.0,,,,
1.8.34,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.17,,,,
1.8.34,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.61,,,,
1.8.34,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),32.0,,,,
1.8.34,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.8.34,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.8.34,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),39.0,,,,
1.8.34,JSC,apply,[] (list 1 2 3 4 5),0.00018,,,,
1.8.34,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000157,,,,
1.8.34,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000229,,,,
1.8.34,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000161,,,,
1.8.34,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000165,,,,
1.8.34,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.00051,,,,
1.8.34,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000227,,,,
1.8.34,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000209,,,,
1.8.34,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000276,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000911,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),5e-05,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.8.34,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001087,,,,
1.8.34,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),9.7e-05,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.3e-05,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000103,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000108,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000115,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.4e-05,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.5e-05,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000108,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),7.1e-05,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000108,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.2e-05,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.4e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.5e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",7.1e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000123,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.5e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.2e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",10.0,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.7e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.8e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.2e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),70.0,,,,
1.8.34,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00229,,,,
1.8.34,JSC,persistent hash maps,[key :f0] (hash key),5.4e-05,,,,
1.8.34,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.5e-05,,,,
1.8.34,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.7e-05,,,,
1.8.34,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.37,,,,
1.8.34,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.8.34,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.6,,,,
1.8.34,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.72,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.0001,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.9e-05,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.3e-05,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000112,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000177,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00024,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),123.0,,,,
1.8.34,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000144,,,,
1.8.34,JSC,set ops,[] #{},3.6e-05,,,,
1.8.34,JSC,set ops,[] #{1 3 2},3.5e-05,,,,
1.8.34,JSC,set ops,[v [1 2 3]] (set v),0.00035,,,,
1.8.34,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000155,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.7e-05,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (coll 2),9.3e-05,,,,
1.8.34,JSC,seq ops,[coll (range 500000)] (reduce + coll),19.0,,,,
1.8.34,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.025,,,,
1.8.34,JSC,reader,[s big-str-data] (reader/read-string s),0.627,,,,
1.8.34,JSC,range,[r (range 1000000)] (last r),28.0,,,,
1.8.34,JSC,lazy-seq - first run,[r r] (last r),198.0,,,,
1.8.34,JSC,lazy-seq - second run,[r r] (last r),63.0,,,,
1.8.34,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.64,,,,
1.8.34,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.195,,,,
1.8.34,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),142.0,,,,
1.8.34,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.25,,,,
1.8.34,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.0,,,,
1.8.34,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.8.34,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),42.0,,,,
1.8.34,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),47.0,,,,
1.8.34,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),91.0,,,,
1.8.34,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),825.0,,,,
1.8.34,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),48.0,,,,
1.8.34,JSC,multimethods,[] (simple-multi :foo),0.000255,,,,
1.8.34,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.8.34,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.8.34,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00139,,,,
1.8.34,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),144.8,,,,
1.7.228,V8,identity,[x 1] (identity x),9.22e-06,,,,
1.7.228,V8,symbol construction,[] (symbol (quote foo)),2.3e-05,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.25,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.22,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.1,,,,
1.7.228,V8,instance?,[coll []] (instance? PersistentVector coll),0.000527,,,,
1.7.228,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.00051,,,,
1.7.228,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000508,,,,
1.7.228,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3.2e-05,,,,
1.7.228,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.9e-05,,,,
1.7.228,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.228,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000113,,,,
1.7.228,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),5.7e-05,,,,
1.7.228,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.8e-05,,,,
1.7.228,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.3e-05,,,,
1.7.228,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000582,,,,
1.7.228,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.6e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (first coll),2.1e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (-first coll),1.7e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (rest coll),1.7e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.7.228,V8,list ops,[] (list),4e-06,,,,
1.7.228,V8,list ops,[] (list 1 2 3),0.000551,,,,
1.7.228,V8,vector ops,[] [],3e-06,,,,
1.7.228,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000573,,,,
1.7.228,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000565,,,,
1.7.228,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000567,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.2e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (coll 0),0.000526,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (conj coll 4),5e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.7.228,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.7.228,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.228,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (seq coll),3.7e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.7e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.1e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.228,V8,large vector ops,[] (reduce conj [] (range 40000)),6.5,,,,
1.7.228,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.0003,,,,
1.7.228,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00071,,,,
1.7.228,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.228,V8,chunked seqs,[] (-first v),1.8e-05,,,,
1.7.228,V8,chunked seqs,[] (-next v),3.1e-05,,,,
1.7.228,V8,chunked seqs,[] (-rest v),3.1e-05,,,,
1.7.228,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.7.228,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.16,,,,
1.7.228,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.86,,,,
1.7.228,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.7.228,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),18.0,,,,
1.7.228,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),22.0,,,,
1.7.228,V8,apply,[coll (into [] (range 1000000))] (apply + coll),54.0,,,,
1.7.228,V8,apply,[] (list 1 2 3 4 5),0.000611,,,,
1.7.228,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000132,,,,
1.7.228,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000432,,,,
1.7.228,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000139,,,,
1.7.228,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000245,,,,
1.7.228,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000801,,,,
1.7.228,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000337,,,,
1.7.228,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000319,,,,
1.7.228,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000247,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001533,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.7.228,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001176,,,,
1.7.228,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.4e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.7e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.3e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.2e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.9e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.4e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.8e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.0001,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.4e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.1e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.4e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.0001,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.6e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.6e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.9e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.6e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.5e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.9e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.3e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.2e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.9e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",5.0,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.1e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.7e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.3e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),38.0,,,,
1.7.228,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00308,,,,
1.7.228,V8,persistent hash maps,[key :f0] (hash key),2.2e-05,,,,
1.7.228,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2e-05,,,,
1.7.228,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2.1e-05,,,,
1.7.228,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.1,,,,
1.7.228,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.99,,,,
1.7.228,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.79,,,,
1.7.228,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.07,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (:f0 coll),6.4e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (get coll :f0),5.3e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.1e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000248,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000421,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),88.0,,,,
1.7.228,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000165,,,,
1.7.228,V8,set ops,[] #{},4e-06,,,,
1.7.228,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.228,V8,set ops,[v [1 2 3]] (set v),0.000291,,,,
1.7.228,V8,set ops,[] (hash-set 1 2 3),3e-06,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000272,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (get coll 2),6.6e-05,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.3e-05,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (coll 2),7.1e-05,,,,
1.7.228,V8,seq ops,[coll (range 500000)] (reduce + coll),25.0,,,,
1.7.228,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.036,,,,
1.7.228,V8,reader,[s big-str-data] (reader/read-string s),0.755,,,,
1.7.228,V8,range,[r (range 1000000)] (last r),42.0,,,,
1.7.228,V8,lazy-seq - first run,[r r] (last r),456.0,,,,
1.7.228,V8,lazy-seq - second run,[r r] (last r),83.0,,,,
1.7.228,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.45,,,,
1.7.228,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.133,,,,
1.7.228,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),309.0,,,,
1.7.228,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),53.0,,,,
1.7.228,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),47.75,,,,
1.7.228,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.228,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),92.0,,,,
1.7.228,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),120.0,,,,
1.7.228,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1863.0,,,,
1.7.228,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1720.0,,,,
1.7.228,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),82.0,,,,
1.7.228,V8,multimethods,[] (simple-multi :foo),0.000152,,,,
1.7.228,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.228,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.7.228,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00107,,,,
1.7.228,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),151.0,,,,
1.7.228,SM,identity,[x 1] (identity x),8.46e-06,,,,
1.7.228,SM,symbol construction,[] (symbol (quote foo)),5e-05,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.29,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.36,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.39,,,,
1.7.228,SM,instance?,[coll []] (instance? PersistentVector coll),1.6e-05,,,,
1.7.228,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.7.228,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.7.228,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000527,,,,
1.7.228,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001252,,,,
1.7.228,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000822,,,,
1.7.228,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001286,,,,
1.7.228,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000174,,,,
1.7.228,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000843,,,,
1.7.228,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000444,,,,
1.7.228,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001841,,,,
1.7.228,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),5.9e-05,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (first coll),0.000118,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (rest coll),8.1e-05,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.5e-05,,,,
1.7.228,SM,list ops,[] (list),8e-06,,,,
1.7.228,SM,list ops,[] (list 1 2 3),0.001275,,,,
1.7.228,SM,vector ops,[] [],9e-06,,,,
1.7.228,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000909,,,,
1.7.228,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00098,,,,
1.7.228,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000775,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (transient coll),0.00193,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000209,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000216,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (coll 0),0.000193,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.001167,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.00111,,,,
1.7.228,SM,vector ops,[coll []] (-conj coll 1),0.000741,,,,
1.7.228,SM,vector ops,[coll [1]] (-conj coll 2),0.000756,,,,
1.7.228,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000543,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (seq coll),0.000206,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000181,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000184,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000171,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000188,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000193,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000249,,,,
1.7.228,SM,large vector ops,[] (reduce conj [] (range 40000)),7.9,,,,
1.7.228,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00168,,,,
1.7.228,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00245,,,,
1.7.228,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00173,,,,
1.7.228,SM,chunked seqs,[] (-first v),0.000177,,,,
1.7.228,SM,chunked seqs,[] (-next v),0.000186,,,,
1.7.228,SM,chunked seqs,[] (-rest v),0.000179,,,,
1.7.228,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.228,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.49,,,,
1.7.228,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.12,,,,
1.7.228,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),82.0,,,,
1.7.228,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.228,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),7.0,,,,
1.7.228,SM,apply,[coll (into [] (range 1000000))] (apply + coll),45.0,,,,
1.7.228,SM,apply,[] (list 1 2 3 4 5),0.000402,,,,
1.7.228,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000334,,,,
1.7.228,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000374,,,,
1.7.228,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000403,,,,
1.7.228,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.00036,,,,
1.7.228,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000811,,,,
1.7.228,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00041,,,,
1.7.228,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000414,,,,
1.7.228,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000439,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000196,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002251,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.00019,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000184,,,,
1.7.228,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.003244,,,,
1.7.228,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000257,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000219,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000373,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000223,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000224,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000274,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000218,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000355,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.00024,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000237,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000267,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000214,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000331,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000219,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000219,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000206,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000216,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000222,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000217,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000207,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000238,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000208,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000238,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",174.0,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000198,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000181,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000228,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000222,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),239.0,,,,
1.7.228,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00342,,,,
1.7.228,SM,persistent hash maps,[key :f0] (hash key),0.000189,,,,
1.7.228,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000176,,,,
1.7.228,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000184,,,,
1.7.228,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.53,,,,
1.7.228,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.21,,,,
1.7.228,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.0,,,,
1.7.228,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.7,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (:f0 coll),0.00025,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000235,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000208,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000249,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000571,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000603,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),307.0,,,,
1.7.228,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000289,,,,
1.7.228,SM,set ops,[] #{},0.00016,,,,
1.7.228,SM,set ops,[] #{1 3 2},0.000154,,,,
1.7.228,SM,set ops,[v [1 2 3]] (set v),0.000407,,,,
1.7.228,SM,set ops,[] (hash-set 1 2 3),0.00015,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.00041,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000239,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000218,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (coll 2),0.000206,,,,
1.7.228,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.7.228,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.096,,,,
1.7.228,SM,reader,[s big-str-data] (reader/read-string s),1.703,,,,
1.7.228,SM,range,[r (range 1000000)] (last r),50.0,,,,
1.7.228,SM,lazy-seq - first run,[r r] (last r),434.0,,,,
1.7.228,SM,lazy-seq - second run,[r r] (last r),58.0,,,,
1.7.228,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.598,,,,
1.7.228,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.45,,,,
1.7.228,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),217.0,,,,
1.7.228,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),93.5,,,,
1.7.228,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),208.5,,,,
1.7.228,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),122.25,,,,
1.7.228,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),29.0,,,,
1.7.228,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.7.228,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),236.0,,,,
1.7.228,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1522.0,,,,
1.7.228,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),28.0,,,,
1.7.228,SM,multimethods,[] (simple-multi :foo),0.000334,,,,
1.7.228,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00358,,,,
1.7.228,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00211,,,,
1.7.228,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00381,,,,
1.7.228,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),206.1,,,,
1.7.228,JSC,identity,[x 1] (identity x),1.222e-05,,,,
1.7.228,JSC,symbol construction,[] (symbol (quote foo)),4.7e-05,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.59,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.03,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.7.228,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.7.228,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.228,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.7e-05,,,,
1.7.228,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000131,,,,
1.7.228,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.9e-05,,,,
1.7.228,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000177,,,,
1.7.228,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.1e-05,,,,
1.7.228,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.8e-05,,,,
1.7.228,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5e-05,,,,
1.7.228,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.2e-05,,,,
1.7.228,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000212,,,,
1.7.228,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (first coll),4.5e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (-first coll),4.1e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.7e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.228,JSC,list ops,[] (list),3.6e-05,,,,
1.7.228,JSC,list ops,[] (list 1 2 3),9.9e-05,,,,
1.7.228,JSC,vector ops,[] [],3.6e-05,,,,
1.7.228,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000105,,,,
1.7.228,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000101,,,,
1.7.228,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.3e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.8e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (coll 0),5.4e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.3e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.6e-05,,,,
1.7.228,JSC,vector ops,[coll []] (-conj coll 1),7.4e-05,,,,
1.7.228,JSC,vector ops,[coll [1]] (-conj coll 2),7.4e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.6e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (seq coll),5.4e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.2e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),7.2e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000151,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.3e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.7.228,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.2,,,,
1.7.228,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00034,,,,
1.7.228,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00055,,,,
1.7.228,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.228,JSC,chunked seqs,[] (-first v),5.3e-05,,,,
1.7.228,JSC,chunked seqs,[] (-next v),0.000186,,,,
1.7.228,JSC,chunked seqs,[] (-rest v),5.9e-05,,,,
1.7.228,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.7.228,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.18,,,,
1.7.228,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.45,,,,
1.7.228,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),50.0,,,,
1.7.228,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.228,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.7.228,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),39.0,,,,
1.7.228,JSC,apply,[] (list 1 2 3 4 5),0.000168,,,,
1.7.228,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000164,,,,
1.7.228,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00023,,,,
1.7.228,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000177,,,,
1.7.228,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000174,,,,
1.7.228,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000525,,,,
1.7.228,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000232,,,,
1.7.228,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000221,,,,
1.7.228,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000289,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000975,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.6e-05,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.7.228,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001057,,,,
1.7.228,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000101,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000111,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.6e-05,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.7e-05,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000106,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.9e-05,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000114,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.4e-05,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.5e-05,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000101,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.6e-05,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000114,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.4e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.3e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.5e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.6e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000118,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.8e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.6e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.5e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),6.9e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.2e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),76.0,,,,
1.7.228,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0022,,,,
1.7.228,JSC,persistent hash maps,[key :f0] (hash key),4.8e-05,,,,
1.7.228,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.228,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.8e-05,,,,
1.7.228,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.34,,,,
1.7.228,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.25,,,,
1.7.228,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.61,,,,
1.7.228,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.64,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000101,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (get coll :f0),8.9e-05,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.7e-05,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000103,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000162,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00024,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),123.0,,,,
1.7.228,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000144,,,,
1.7.228,JSC,set ops,[] #{},3.8e-05,,,,
1.7.228,JSC,set ops,[] #{1 3 2},3.7e-05,,,,
1.7.228,JSC,set ops,[v [1 2 3]] (set v),0.000341,,,,
1.7.228,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000169,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.4e-05,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (coll 2),9.4e-05,,,,
1.7.228,JSC,seq ops,[coll (range 500000)] (reduce + coll),18.0,,,,
1.7.228,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.7.228,JSC,reader,[s big-str-data] (reader/read-string s),0.647,,,,
1.7.228,JSC,range,[r (range 1000000)] (last r),30.0,,,,
1.7.228,JSC,lazy-seq - first run,[r r] (last r),230.0,,,,
1.7.228,JSC,lazy-seq - second run,[r r] (last r),67.0,,,,
1.7.228,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.635,,,,
1.7.228,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.193,,,,
1.7.228,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),138.0,,,,
1.7.228,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),40.25,,,,
1.7.228,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),44.75,,,,
1.7.228,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),12.75,,,,
1.7.228,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),46.0,,,,
1.7.228,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),47.0,,,,
1.7.228,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),98.0,,,,
1.7.228,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),744.0,,,,
1.7.228,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),45.0,,,,
1.7.228,JSC,multimethods,[] (simple-multi :foo),0.000383,,,,
1.7.228,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.228,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00029,,,,
1.7.228,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00089,,,,
1.7.228,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),139.5,,,,
1.7.189,V8,identity,[x 1] (identity x),9.18e-06,,,,
1.7.189,V8,symbol construction,[] (symbol (quote foo)),2.5e-05,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.23,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.22,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.08,,,,
1.7.189,V8,instance?,[coll []] (instance? PersistentVector coll),0.000523,,,,
1.7.189,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000511,,,,
1.7.189,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.00051,,,,
1.7.189,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.9e-05,,,,
1.7.189,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.6e-05,,,,
1.7.189,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.189,V8,array & string ops,"[coll ""foobar""] (first coll)",0.00011,,,,
1.7.189,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.8e-05,,,,
1.7.189,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.4e-05,,,,
1.7.189,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.2e-05,,,,
1.7.189,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000578,,,,
1.7.189,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.7e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (first coll),2.4e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (rest coll),1.3e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.7e-05,,,,
1.7.189,V8,list ops,[] (list),3e-06,,,,
1.7.189,V8,list ops,[] (list 1 2 3),0.000554,,,,
1.7.189,V8,vector ops,[] [],3e-06,,,,
1.7.189,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000577,,,,
1.7.189,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000569,,,,
1.7.189,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000566,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (transient coll),0.00021,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (coll 0),0.000507,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.7.189,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.189,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.189,V8,vector ops,[coll [1 2]] (-conj coll 3),4.6e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (seq coll),3.8e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.1e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.189,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.7.189,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00028,,,,
1.7.189,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.7.189,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.189,V8,chunked seqs,[] (-first v),1.9e-05,,,,
1.7.189,V8,chunked seqs,[] (-next v),3.1e-05,,,,
1.7.189,V8,chunked seqs,[] (-rest v),2.9e-05,,,,
1.7.189,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.7.189,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.23,,,,
1.7.189,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.72,,,,
1.7.189,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),83.0,,,,
1.7.189,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.7.189,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),23.0,,,,
1.7.189,V8,apply,[coll (into [] (range 1000000))] (apply + coll),60.0,,,,
1.7.189,V8,apply,[] (list 1 2 3 4 5),0.000606,,,,
1.7.189,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000132,,,,
1.7.189,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000428,,,,
1.7.189,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000157,,,,
1.7.189,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000232,,,,
1.7.189,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000811,,,,
1.7.189,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000312,,,,
1.7.189,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000296,,,,
1.7.189,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000248,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.3e-05,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001579,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.189,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.00114,,,,
1.7.189,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.5e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.3e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.9e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.0001,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.2e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.4e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.5e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),9.9e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.6e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.5e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.2e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.1e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.7e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.4e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.3e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.7.189,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00305,,,,
1.7.189,V8,persistent hash maps,[key :f0] (hash key),2.3e-05,,,,
1.7.189,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.7.189,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.7.189,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.23,,,,
1.7.189,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.11,,,,
1.7.189,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.76,,,,
1.7.189,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.99,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (:f0 coll),5.9e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (get coll :f0),5.2e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000252,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000416,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),90.0,,,,
1.7.189,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00016,,,,
1.7.189,V8,set ops,[] #{},4e-06,,,,
1.7.189,V8,set ops,[] #{1 3 2},5e-06,,,,
1.7.189,V8,set ops,[v [1 2 3]] (set v),0.000302,,,,
1.7.189,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000276,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (get coll 2),6.5e-05,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.3e-05,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (coll 2),6.8e-05,,,,
1.7.189,V8,seq ops,[coll (range 500000)] (reduce + coll),26.0,,,,
1.7.189,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.034,,,,
1.7.189,V8,reader,[s big-str-data] (reader/read-string s),0.75,,,,
1.7.189,V8,range,[r (range 1000000)] (last r),38.0,,,,
1.7.189,V8,lazy-seq - first run,[r r] (last r),458.0,,,,
1.7.189,V8,lazy-seq - second run,[r r] (last r),86.0,,,,
1.7.189,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.485,,,,
1.7.189,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.129,,,,
1.7.189,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),326.0,,,,
1.7.189,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),58.75,,,,
1.7.189,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.75,,,,
1.7.189,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.189,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),91.0,,,,
1.7.189,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),109.0,,,,
1.7.189,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1900.0,,,,
1.7.189,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1780.0,,,,
1.7.189,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),79.0,,,,
1.7.189,V8,multimethods,[] (simple-multi :foo),0.000157,,,,
1.7.189,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00011,,,,
1.7.189,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00038,,,,
1.7.189,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00103,,,,
1.7.189,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),150.5,,,,
1.7.189,SM,identity,[x 1] (identity x),8.32e-06,,,,
1.7.189,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),2.8,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.36,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.38,,,,
1.7.189,SM,instance?,[coll []] (instance? PersistentVector coll),1.8e-05,,,,
1.7.189,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.7.189,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3e-05,,,,
1.7.189,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.00057,,,,
1.7.189,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001509,,,,
1.7.189,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000715,,,,
1.7.189,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001469,,,,
1.7.189,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000175,,,,
1.7.189,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.001048,,,,
1.7.189,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000512,,,,
1.7.189,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001952,,,,
1.7.189,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.3e-05,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (first coll),0.000117,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (rest coll),8.1e-05,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.7.189,SM,list ops,[] (list),9e-06,,,,
1.7.189,SM,list ops,[] (list 1 2 3),0.001309,,,,
1.7.189,SM,vector ops,[] [],1e-05,,,,
1.7.189,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000587,,,,
1.7.189,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000682,,,,
1.7.189,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000513,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (transient coll),0.00186,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000224,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000226,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000229,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (coll 0),0.000193,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000974,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000832,,,,
1.7.189,SM,vector ops,[coll []] (-conj coll 1),0.000767,,,,
1.7.189,SM,vector ops,[coll [1]] (-conj coll 2),0.000779,,,,
1.7.189,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000826,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (seq coll),0.000426,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000174,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000183,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000173,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000193,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000194,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000266,,,,
1.7.189,SM,large vector ops,[] (reduce conj [] (range 40000)),8.2,,,,
1.7.189,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00169,,,,
1.7.189,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00244,,,,
1.7.189,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00172,,,,
1.7.189,SM,chunked seqs,[] (-first v),0.000173,,,,
1.7.189,SM,chunked seqs,[] (-next v),0.000188,,,,
1.7.189,SM,chunked seqs,[] (-rest v),0.000176,,,,
1.7.189,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.189,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.61,,,,
1.7.189,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.22,,,,
1.7.189,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),75.0,,,,
1.7.189,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.7.189,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),6.0,,,,
1.7.189,SM,apply,[coll (into [] (range 1000000))] (apply + coll),41.0,,,,
1.7.189,SM,apply,[] (list 1 2 3 4 5),0.000364,,,,
1.7.189,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000334,,,,
1.7.189,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00037,,,,
1.7.189,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000374,,,,
1.7.189,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000362,,,,
1.7.189,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000807,,,,
1.7.189,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00038,,,,
1.7.189,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000381,,,,
1.7.189,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000441,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000193,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002362,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000188,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000188,,,,
1.7.189,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002803,,,,
1.7.189,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000258,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.00022,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000332,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000222,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000233,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000265,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.00022,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000369,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000233,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000238,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000259,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000216,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000339,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000222,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000231,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000204,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000222,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.00021,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000213,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000208,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000234,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.00021,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.00023,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",177.0,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000202,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000187,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000234,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000227,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),237.0,,,,
1.7.189,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00338,,,,
1.7.189,SM,persistent hash maps,[key :f0] (hash key),0.000189,,,,
1.7.189,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000179,,,,
1.7.189,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000182,,,,
1.7.189,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.71,,,,
1.7.189,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.38,,,,
1.7.189,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.14,,,,
1.7.189,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.73,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000241,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000228,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000217,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000251,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00066,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000554,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),299.0,,,,
1.7.189,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000289,,,,
1.7.189,SM,set ops,[] #{},0.000163,,,,
1.7.189,SM,set ops,[] #{1 3 2},0.000153,,,,
1.7.189,SM,set ops,[v [1 2 3]] (set v),0.0004,,,,
1.7.189,SM,set ops,[] (hash-set 1 2 3),0.000153,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000386,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (get coll 2),0.00024,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000204,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (coll 2),0.000238,,,,
1.7.189,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.7.189,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.102,,,,
1.7.189,SM,reader,[s big-str-data] (reader/read-string s),1.705,,,,
1.7.189,SM,range,[r (range 1000000)] (last r),46.0,,,,
1.7.189,SM,lazy-seq - first run,[r r] (last r),431.0,,,,
1.7.189,SM,lazy-seq - second run,[r r] (last r),55.0,,,,
1.7.189,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.594,,,,
1.7.189,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.446,,,,
1.7.189,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),215.0,,,,
1.7.189,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),92.25,,,,
1.7.189,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),198.5,,,,
1.7.189,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),123.5,,,,
1.7.189,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),28.0,,,,
1.7.189,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.7.189,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),232.0,,,,
1.7.189,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1527.0,,,,
1.7.189,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.7.189,SM,multimethods,[] (simple-multi :foo),0.000306,,,,
1.7.189,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00352,,,,
1.7.189,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00203,,,,
1.7.189,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00396,,,,
1.7.189,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),205.9,,,,
1.7.189,JSC,identity,[x 1] (identity x),1.13e-05,,,,
1.7.189,JSC,symbol construction,[] (symbol (quote foo)),4.6e-05,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.67,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.62,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.03,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.189,JSC,instance?,[coll []] (instance? PersistentVector coll),5.2e-05,,,,
1.7.189,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.189,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),5.2e-05,,,,
1.7.189,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000128,,,,
1.7.189,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6.1e-05,,,,
1.7.189,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000182,,,,
1.7.189,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.1e-05,,,,
1.7.189,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.189,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.189,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7e-05,,,,
1.7.189,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000213,,,,
1.7.189,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (first coll),4.6e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.7.189,JSC,list ops,[] (list),3.7e-05,,,,
1.7.189,JSC,list ops,[] (list 1 2 3),0.000103,,,,
1.7.189,JSC,vector ops,[] [],3.7e-05,,,,
1.7.189,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000101,,,,
1.7.189,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.5e-05,,,,
1.7.189,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000101,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00031,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.6e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (coll 0),5e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.2e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.6e-05,,,,
1.7.189,JSC,vector ops,[coll []] (-conj coll 1),7.5e-05,,,,
1.7.189,JSC,vector ops,[coll [1]] (-conj coll 2),7.3e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.9e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.3e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),7e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000149,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.7e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.7.189,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.7.189,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00037,,,,
1.7.189,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00057,,,,
1.7.189,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00022,,,,
1.7.189,JSC,chunked seqs,[] (-first v),5.8e-05,,,,
1.7.189,JSC,chunked seqs,[] (-next v),0.000185,,,,
1.7.189,JSC,chunked seqs,[] (-rest v),6.2e-05,,,,
1.7.189,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.7.189,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.28,,,,
1.7.189,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.59,,,,
1.7.189,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),35.0,,,,
1.7.189,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.7.189,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.7.189,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),44.0,,,,
1.7.189,JSC,apply,[] (list 1 2 3 4 5),0.00018,,,,
1.7.189,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000163,,,,
1.7.189,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000222,,,,
1.7.189,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000168,,,,
1.7.189,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000171,,,,
1.7.189,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000531,,,,
1.7.189,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000231,,,,
1.7.189,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000224,,,,
1.7.189,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000271,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000953,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.6e-05,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.7.189,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001052,,,,
1.7.189,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000102,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000102,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000102,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000114,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.3e-05,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.6e-05,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000107,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.6e-05,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.00011,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.8e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",6e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.3e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000119,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8.5e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.6e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.7e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.6e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.5e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),78.0,,,,
1.7.189,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00204,,,,
1.7.189,JSC,persistent hash maps,[key :f0] (hash key),4.9e-05,,,,
1.7.189,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.5e-05,,,,
1.7.189,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.8e-05,,,,
1.7.189,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.33,,,,
1.7.189,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.7.189,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.6,,,,
1.7.189,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.69,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000101,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.2e-05,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.1e-05,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000108,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000161,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000239,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),122.0,,,,
1.7.189,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000141,,,,
1.7.189,JSC,set ops,[] #{},3.3e-05,,,,
1.7.189,JSC,set ops,[] #{1 3 2},4e-05,,,,
1.7.189,JSC,set ops,[v [1 2 3]] (set v),0.000349,,,,
1.7.189,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000159,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.1e-05,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.5e-05,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.7.189,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.189,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.7.189,JSC,reader,[s big-str-data] (reader/read-string s),0.622,,,,
1.7.189,JSC,range,[r (range 1000000)] (last r),26.0,,,,
1.7.189,JSC,lazy-seq - first run,[r r] (last r),194.0,,,,
1.7.189,JSC,lazy-seq - second run,[r r] (last r),62.0,,,,
1.7.189,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.653,,,,
1.7.189,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.19,,,,
1.7.189,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),145.0,,,,
1.7.189,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.5,,,,
1.7.189,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.0,,,,
1.7.189,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.189,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),44.0,,,,
1.7.189,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),47.0,,,,
1.7.189,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),99.0,,,,
1.7.189,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),853.0,,,,
1.7.189,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),46.0,,,,
1.7.189,JSC,multimethods,[] (simple-multi :foo),0.000247,,,,
1.7.189,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.189,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.7.189,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00092,,,,
1.7.189,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),141.2,,,,
1.7.170,V8,identity,[x 1] (identity x),9.25e-06,,,,
1.7.170,V8,symbol construction,[] (symbol (quote foo)),2.5e-05,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.34,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.34,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.21,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.2,,,,
1.7.170,V8,instance?,[coll []] (instance? PersistentVector coll),0.000519,,,,
1.7.170,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000513,,,,
1.7.170,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000511,,,,
1.7.170,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.7e-05,,,,
1.7.170,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.4e-05,,,,
1.7.170,V8,array & string ops,[coll (array 1 2 3)] (first coll),4e-05,,,,
1.7.170,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000114,,,,
1.7.170,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.6e-05,,,,
1.7.170,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.4e-05,,,,
1.7.170,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.3e-05,,,,
1.7.170,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000585,,,,
1.7.170,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.3e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (first coll),2e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (-first coll),2e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.7.170,V8,list ops,[] (list),4e-06,,,,
1.7.170,V8,list ops,[] (list 1 2 3),0.000556,,,,
1.7.170,V8,vector ops,[] [],4e-06,,,,
1.7.170,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000576,,,,
1.7.170,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000553,,,,
1.7.170,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000566,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (transient coll),0.00025,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (coll 0),0.000513,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (conj coll 4),5e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.170,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.170,V8,vector ops,[coll [1]] (-conj coll 2),3.9e-05,,,,
1.7.170,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (seq coll),4.1e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.7e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.170,V8,large vector ops,[] (reduce conj [] (range 40000)),7.0,,,,
1.7.170,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.170,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00066,,,,
1.7.170,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00026,,,,
1.7.170,V8,chunked seqs,[] (-first v),1.9e-05,,,,
1.7.170,V8,chunked seqs,[] (-next v),3.8e-05,,,,
1.7.170,V8,chunked seqs,[] (-rest v),3.4e-05,,,,
1.7.170,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),38.0,,,,
1.7.170,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.27,,,,
1.7.170,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.5,,,,
1.7.170,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),79.0,,,,
1.7.170,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),33.0,,,,
1.7.170,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),39.0,,,,
1.7.170,V8,apply,[coll (into [] (range 1000000))] (apply + coll),80.0,,,,
1.7.170,V8,apply,[] (list 1 2 3 4 5),0.000609,,,,
1.7.170,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000135,,,,
1.7.170,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000428,,,,
1.7.170,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000141,,,,
1.7.170,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000236,,,,
1.7.170,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000821,,,,
1.7.170,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000316,,,,
1.7.170,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000298,,,,
1.7.170,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000246,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001465,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.170,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001143,,,,
1.7.170,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.2e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.6e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.1e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.4e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000103,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.2e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.6e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.1e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000103,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.7e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.6e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.9e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.1e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.6e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000102,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.7e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.9e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.6e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.4e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),37.0,,,,
1.7.170,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00307,,,,
1.7.170,V8,persistent hash maps,[key :f0] (hash key),2e-05,,,,
1.7.170,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.7.170,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.170,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.2,,,,
1.7.170,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.07,,,,
1.7.170,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.74,,,,
1.7.170,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.95,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (:f0 coll),6.7e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (get coll :f0),5.3e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.4e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000255,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000418,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),82.0,,,,
1.7.170,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000166,,,,
1.7.170,V8,set ops,[] #{},4e-06,,,,
1.7.170,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.170,V8,set ops,[v [1 2 3]] (set v),0.000305,,,,
1.7.170,V8,set ops,[] (hash-set 1 2 3),3e-06,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000271,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (get coll 2),6.8e-05,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (coll 2),6.8e-05,,,,
1.7.170,V8,seq ops,[coll (range 500000)] (reduce + coll),31.0,,,,
1.7.170,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.035,,,,
1.7.170,V8,reader,[s big-str-data] (reader/read-string s),0.781,,,,
1.7.170,V8,range,[r (range 1000000)] (last r),39.0,,,,
1.7.170,V8,lazy-seq - first run,[r r] (last r),465.0,,,,
1.7.170,V8,lazy-seq - second run,[r r] (last r),103.0,,,,
1.7.170,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.48,,,,
1.7.170,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.129,,,,
1.7.170,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),343.0,,,,
1.7.170,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),55.0,,,,
1.7.170,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),47.75,,,,
1.7.170,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.7.170,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),104.0,,,,
1.7.170,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),139.0,,,,
1.7.170,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1854.0,,,,
1.7.170,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1800.0,,,,
1.7.170,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),90.0,,,,
1.7.170,V8,multimethods,[] (simple-multi :foo),0.000154,,,,
1.7.170,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.170,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00035,,,,
1.7.170,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00108,,,,
1.7.170,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),195.9,,,,
1.7.170,SM,identity,[x 1] (identity x),8.22e-06,,,,
1.7.170,SM,symbol construction,[] (symbol (quote foo)),4.2e-05,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.89,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),2.86,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.49,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.52,,,,
1.7.170,SM,instance?,[coll []] (instance? PersistentVector coll),1.8e-05,,,,
1.7.170,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.7.170,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3.1e-05,,,,
1.7.170,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000666,,,,
1.7.170,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.00135,,,,
1.7.170,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000875,,,,
1.7.170,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001326,,,,
1.7.170,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000163,,,,
1.7.170,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000843,,,,
1.7.170,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000446,,,,
1.7.170,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001858,,,,
1.7.170,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (first coll),0.000112,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (rest coll),7.9e-05,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.7.170,SM,list ops,[] (list),9e-06,,,,
1.7.170,SM,list ops,[] (list 1 2 3),0.001186,,,,
1.7.170,SM,vector ops,[] [],9e-06,,,,
1.7.170,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000603,,,,
1.7.170,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000667,,,,
1.7.170,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000534,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (transient coll),0.00191,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000211,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000237,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (coll 0),0.000191,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000955,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000807,,,,
1.7.170,SM,vector ops,[coll []] (-conj coll 1),0.000728,,,,
1.7.170,SM,vector ops,[coll [1]] (-conj coll 2),0.000808,,,,
1.7.170,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000862,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (seq coll),0.000624,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000333,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000202,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000175,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000194,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000174,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000266,,,,
1.7.170,SM,large vector ops,[] (reduce conj [] (range 40000)),10.2,,,,
1.7.170,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00167,,,,
1.7.170,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00244,,,,
1.7.170,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00168,,,,
1.7.170,SM,chunked seqs,[] (-first v),0.000171,,,,
1.7.170,SM,chunked seqs,[] (-next v),0.000182,,,,
1.7.170,SM,chunked seqs,[] (-rest v),0.00018,,,,
1.7.170,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),55.0,,,,
1.7.170,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.96,,,,
1.7.170,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.78,,,,
1.7.170,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.7.170,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.170,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),12.0,,,,
1.7.170,SM,apply,[coll (into [] (range 1000000))] (apply + coll),52.0,,,,
1.7.170,SM,apply,[] (list 1 2 3 4 5),0.000341,,,,
1.7.170,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.00031,,,,
1.7.170,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000367,,,,
1.7.170,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000347,,,,
1.7.170,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000332,,,,
1.7.170,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000653,,,,
1.7.170,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000346,,,,
1.7.170,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.00035,,,,
1.7.170,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000387,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000182,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002389,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000176,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000176,,,,
1.7.170,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.00268,,,,
1.7.170,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000247,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000207,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000322,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000206,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.00021,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000261,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000211,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000354,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000225,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000233,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000258,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000205,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000353,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000205,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000227,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000215,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000211,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000208,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000202,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000204,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000236,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000204,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000202,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",168.0,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000177,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000178,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000216,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000219,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),236.0,,,,
1.7.170,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00334,,,,
1.7.170,SM,persistent hash maps,[key :f0] (hash key),0.00018,,,,
1.7.170,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000171,,,,
1.7.170,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000175,,,,
1.7.170,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.17,,,,
1.7.170,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.17,,,,
1.7.170,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.06,,,,
1.7.170,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.49,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000244,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000233,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000206,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000261,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000608,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000628,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),289.0,,,,
1.7.170,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000277,,,,
1.7.170,SM,set ops,[] #{},0.000154,,,,
1.7.170,SM,set ops,[] #{1 3 2},0.000152,,,,
1.7.170,SM,set ops,[v [1 2 3]] (set v),0.000385,,,,
1.7.170,SM,set ops,[] (hash-set 1 2 3),0.000147,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000383,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000232,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000201,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (coll 2),0.000224,,,,
1.7.170,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.7.170,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.093,,,,
1.7.170,SM,reader,[s big-str-data] (reader/read-string s),1.837,,,,
1.7.170,SM,range,[r (range 1000000)] (last r),24.0,,,,
1.7.170,SM,lazy-seq - first run,[r r] (last r),441.0,,,,
1.7.170,SM,lazy-seq - second run,[r r] (last r),47.0,,,,
1.7.170,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.671,,,,
1.7.170,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.436,,,,
1.7.170,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),209.0,,,,
1.7.170,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.75,,,,
1.7.170,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),191.75,,,,
1.7.170,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),106.5,,,,
1.7.170,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),32.0,,,,
1.7.170,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),283.0,,,,
1.7.170,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),260.0,,,,
1.7.170,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1519.0,,,,
1.7.170,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.7.170,SM,multimethods,[] (simple-multi :foo),0.000285,,,,
1.7.170,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00309,,,,
1.7.170,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00191,,,,
1.7.170,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00275,,,,
1.7.170,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),206.8,,,,
1.7.170,JSC,identity,[x 1] (identity x),2.167e-05,,,,
1.7.170,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.98,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.36,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.07,,,,
1.7.170,JSC,instance?,[coll []] (instance? PersistentVector coll),4.8e-05,,,,
1.7.170,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.170,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.7e-05,,,,
1.7.170,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000134,,,,
1.7.170,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.7e-05,,,,
1.7.170,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000181,,,,
1.7.170,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.7e-05,,,,
1.7.170,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.170,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.170,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.8e-05,,,,
1.7.170,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000216,,,,
1.7.170,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.9e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (first coll),4.6e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.7e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.6e-05,,,,
1.7.170,JSC,list ops,[] (list),3.2e-05,,,,
1.7.170,JSC,list ops,[] (list 1 2 3),9.4e-05,,,,
1.7.170,JSC,vector ops,[] [],3.5e-05,,,,
1.7.170,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.7.170,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000101,,,,
1.7.170,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.7e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (coll 0),5e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.7e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.9e-05,,,,
1.7.170,JSC,vector ops,[coll []] (-conj coll 1),7.3e-05,,,,
1.7.170,JSC,vector ops,[coll [1]] (-conj coll 2),7.3e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.7e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.3e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.8e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000147,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.5e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.7.170,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.3,,,,
1.7.170,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00037,,,,
1.7.170,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.7.170,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.170,JSC,chunked seqs,[] (-first v),5.3e-05,,,,
1.7.170,JSC,chunked seqs,[] (-next v),0.000188,,,,
1.7.170,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.7.170,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.7.170,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.28,,,,
1.7.170,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.47,,,,
1.7.170,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),50.0,,,,
1.7.170,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),12.0,,,,
1.7.170,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.7.170,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),38.0,,,,
1.7.170,JSC,apply,[] (list 1 2 3 4 5),0.000164,,,,
1.7.170,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000169,,,,
1.7.170,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000228,,,,
1.7.170,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000179,,,,
1.7.170,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000171,,,,
1.7.170,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000539,,,,
1.7.170,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000234,,,,
1.7.170,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000213,,,,
1.7.170,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000289,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000945,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),5.1e-05,,,,
1.7.170,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001088,,,,
1.7.170,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),9.8e-05,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000112,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.00011,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),8.5e-05,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000118,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.2e-05,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8e-05,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000102,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000118,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.5e-05,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.4e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",7e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.00012,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.6e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.5e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.5e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),6.9e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.7e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),75.0,,,,
1.7.170,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00211,,,,
1.7.170,JSC,persistent hash maps,[key :f0] (hash key),5.3e-05,,,,
1.7.170,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.5e-05,,,,
1.7.170,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.5e-05,,,,
1.7.170,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.4,,,,
1.7.170,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.28,,,,
1.7.170,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.65,,,,
1.7.170,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.7,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.8e-05,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (get coll :f0),9e-05,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),7.9e-05,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000106,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000164,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000241,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),118.0,,,,
1.7.170,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00014,,,,
1.7.170,JSC,set ops,[] #{},3.7e-05,,,,
1.7.170,JSC,set ops,[] #{1 3 2},3.3e-05,,,,
1.7.170,JSC,set ops,[v [1 2 3]] (set v),0.000364,,,,
1.7.170,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000158,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.3e-05,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.7.170,JSC,seq ops,[coll (range 500000)] (reduce + coll),19.0,,,,
1.7.170,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.7.170,JSC,reader,[s big-str-data] (reader/read-string s),0.628,,,,
1.7.170,JSC,range,[r (range 1000000)] (last r),30.0,,,,
1.7.170,JSC,lazy-seq - first run,[r r] (last r),232.0,,,,
1.7.170,JSC,lazy-seq - second run,[r r] (last r),67.0,,,,
1.7.170,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.634,,,,
1.7.170,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.193,,,,
1.7.170,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),153.0,,,,
1.7.170,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.0,,,,
1.7.170,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.75,,,,
1.7.170,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.170,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),46.0,,,,
1.7.170,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),49.0,,,,
1.7.170,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),92.0,,,,
1.7.170,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),746.0,,,,
1.7.170,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),48.0,,,,
1.7.170,JSC,multimethods,[] (simple-multi :foo),0.000379,,,,
1.7.170,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.170,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0003,,,,
1.7.170,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00079,,,,
1.7.170,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),139.5,,,,
1.7.166,V8,identity,[x 1] (identity x),9.34e-06,,,,
1.7.166,V8,symbol construction,[] (symbol (quote foo)),2.2e-05,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.4,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.29,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.2,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.19,,,,
1.7.166,V8,instance?,[coll []] (instance? PersistentVector coll),0.00053,,,,
1.7.166,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000522,,,,
1.7.166,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.00051,,,,
1.7.166,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.8e-05,,,,
1.7.166,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.1e-05,,,,
1.7.166,V8,array & string ops,[coll (array 1 2 3)] (first coll),4e-05,,,,
1.7.166,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000115,,,,
1.7.166,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.8e-05,,,,
1.7.166,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.7.166,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.3e-05,,,,
1.7.166,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000577,,,,
1.7.166,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.3e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (first coll),2.2e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.7.166,V8,list ops,[] (list),4e-06,,,,
1.7.166,V8,list ops,[] (list 1 2 3),0.000556,,,,
1.7.166,V8,vector ops,[] [],4e-06,,,,
1.7.166,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000582,,,,
1.7.166,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000549,,,,
1.7.166,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000569,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.5e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.2e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (coll 0),0.00051,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.166,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.166,V8,vector ops,[coll [1]] (-conj coll 2),3.9e-05,,,,
1.7.166,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (seq coll),4e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.7e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.166,V8,large vector ops,[] (reduce conj [] (range 40000)),7.2,,,,
1.7.166,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.166,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0007,,,,
1.7.166,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.166,V8,chunked seqs,[] (-first v),1.5e-05,,,,
1.7.166,V8,chunked seqs,[] (-next v),3.5e-05,,,,
1.7.166,V8,chunked seqs,[] (-rest v),4.1e-05,,,,
1.7.166,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.7.166,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.25,,,,
1.7.166,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.73,,,,
1.7.166,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),75.0,,,,
1.7.166,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),32.0,,,,
1.7.166,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),39.0,,,,
1.7.166,V8,apply,[coll (into [] (range 1000000))] (apply + coll),75.0,,,,
1.7.166,V8,apply,[] (list 1 2 3 4 5),0.000606,,,,
1.7.166,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000141,,,,
1.7.166,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000444,,,,
1.7.166,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000147,,,,
1.7.166,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000233,,,,
1.7.166,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000832,,,,
1.7.166,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000313,,,,
1.7.166,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000294,,,,
1.7.166,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000251,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.5e-05,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001506,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.166,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.00116,,,,
1.7.166,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.4e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.2e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.8e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.8e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.3e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000104,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.3e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.4e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.4e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.5e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000103,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.7e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.2e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.6e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.6e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.5e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000104,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.9e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",9.1e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.5e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),37.0,,,,
1.7.166,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00307,,,,
1.7.166,V8,persistent hash maps,[key :f0] (hash key),2e-05,,,,
1.7.166,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.2e-05,,,,
1.7.166,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.166,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.16,,,,
1.7.166,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.06,,,,
1.7.166,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.81,,,,
1.7.166,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.09,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (:f0 coll),7.4e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (get coll :f0),5.4e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.5e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000243,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000419,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),84.0,,,,
1.7.166,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000162,,,,
1.7.166,V8,set ops,[] #{},4e-06,,,,
1.7.166,V8,set ops,[] #{1 3 2},3e-06,,,,
1.7.166,V8,set ops,[v [1 2 3]] (set v),0.0003,,,,
1.7.166,V8,set ops,[] (hash-set 1 2 3),3e-06,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.00027,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (get coll 2),7.1e-05,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (coll 2),7.6e-05,,,,
1.7.166,V8,seq ops,[coll (range 500000)] (reduce + coll),29.0,,,,
1.7.166,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.033,,,,
1.7.166,V8,reader,[s big-str-data] (reader/read-string s),0.756,,,,
1.7.166,V8,range,[r (range 1000000)] (last r),41.0,,,,
1.7.166,V8,lazy-seq - first run,[r r] (last r),466.0,,,,
1.7.166,V8,lazy-seq - second run,[r r] (last r),88.0,,,,
1.7.166,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.483,,,,
1.7.166,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.137,,,,
1.7.166,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),312.0,,,,
1.7.166,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.0,,,,
1.7.166,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),52.5,,,,
1.7.166,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.7.166,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),100.0,,,,
1.7.166,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),141.0,,,,
1.7.166,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1899.0,,,,
1.7.166,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1735.0,,,,
1.7.166,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),92.0,,,,
1.7.166,V8,multimethods,[] (simple-multi :foo),0.000155,,,,
1.7.166,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.166,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00035,,,,
1.7.166,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00107,,,,
1.7.166,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),158.5,,,,
1.7.166,SM,identity,[x 1] (identity x),8.15e-06,,,,
1.7.166,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.93,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.26,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.5,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.53,,,,
1.7.166,SM,instance?,[coll []] (instance? PersistentVector coll),1.8e-05,,,,
1.7.166,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.7.166,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3.2e-05,,,,
1.7.166,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.00056,,,,
1.7.166,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001383,,,,
1.7.166,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000803,,,,
1.7.166,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001221,,,,
1.7.166,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000163,,,,
1.7.166,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000824,,,,
1.7.166,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000455,,,,
1.7.166,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001802,,,,
1.7.166,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (first coll),0.000111,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (-first coll),7.7e-05,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (rest coll),8.6e-05,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.7.166,SM,list ops,[] (list),9e-06,,,,
1.7.166,SM,list ops,[] (list 1 2 3),0.001164,,,,
1.7.166,SM,vector ops,[] [],9e-06,,,,
1.7.166,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000559,,,,
1.7.166,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000629,,,,
1.7.166,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000485,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (transient coll),0.00202,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000226,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.00026,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000228,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (coll 0),0.00019,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000883,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.00084,,,,
1.7.166,SM,vector ops,[coll []] (-conj coll 1),0.000765,,,,
1.7.166,SM,vector ops,[coll [1]] (-conj coll 2),0.000761,,,,
1.7.166,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000806,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (seq coll),0.000603,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000636,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000181,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.00017,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000186,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000191,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000266,,,,
1.7.166,SM,large vector ops,[] (reduce conj [] (range 40000)),8.1,,,,
1.7.166,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00168,,,,
1.7.166,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00248,,,,
1.7.166,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00172,,,,
1.7.166,SM,chunked seqs,[] (-first v),0.000174,,,,
1.7.166,SM,chunked seqs,[] (-next v),0.000187,,,,
1.7.166,SM,chunked seqs,[] (-rest v),0.000195,,,,
1.7.166,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),55.0,,,,
1.7.166,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.91,,,,
1.7.166,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.65,,,,
1.7.166,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.7.166,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),9.0,,,,
1.7.166,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),10.0,,,,
1.7.166,SM,apply,[coll (into [] (range 1000000))] (apply + coll),54.0,,,,
1.7.166,SM,apply,[] (list 1 2 3 4 5),0.000367,,,,
1.7.166,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000316,,,,
1.7.166,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000366,,,,
1.7.166,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.00036,,,,
1.7.166,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000358,,,,
1.7.166,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000664,,,,
1.7.166,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00038,,,,
1.7.166,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000383,,,,
1.7.166,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000425,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000186,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002334,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000179,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000174,,,,
1.7.166,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002686,,,,
1.7.166,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.00025,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000205,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000355,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000206,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000235,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000264,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000215,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000332,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000226,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000226,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000256,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000209,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000323,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000232,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000232,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000212,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000213,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000203,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000211,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000202,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000234,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.0002,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000208,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",169.0,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000189,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000177,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000226,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000215,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),237.0,,,,
1.7.166,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00334,,,,
1.7.166,SM,persistent hash maps,[key :f0] (hash key),0.000184,,,,
1.7.166,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000168,,,,
1.7.166,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.00018,,,,
1.7.166,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.13,,,,
1.7.166,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.09,,,,
1.7.166,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.19,,,,
1.7.166,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.71,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000233,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000232,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000204,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000262,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000573,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000664,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),285.0,,,,
1.7.166,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000296,,,,
1.7.166,SM,set ops,[] #{},0.000155,,,,
1.7.166,SM,set ops,[] #{1 3 2},0.000156,,,,
1.7.166,SM,set ops,[v [1 2 3]] (set v),0.000384,,,,
1.7.166,SM,set ops,[] (hash-set 1 2 3),0.000146,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000387,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000227,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000213,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (coll 2),0.000205,,,,
1.7.166,SM,seq ops,[coll (range 500000)] (reduce + coll),20.0,,,,
1.7.166,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.092,,,,
1.7.166,SM,reader,[s big-str-data] (reader/read-string s),1.847,,,,
1.7.166,SM,range,[r (range 1000000)] (last r),24.0,,,,
1.7.166,SM,lazy-seq - first run,[r r] (last r),442.0,,,,
1.7.166,SM,lazy-seq - second run,[r r] (last r),46.0,,,,
1.7.166,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.59,,,,
1.7.166,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.421,,,,
1.7.166,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),204.0,,,,
1.7.166,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.25,,,,
1.7.166,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),190.25,,,,
1.7.166,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),107.25,,,,
1.7.166,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),31.0,,,,
1.7.166,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),273.0,,,,
1.7.166,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),251.0,,,,
1.7.166,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1506.0,,,,
1.7.166,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.7.166,SM,multimethods,[] (simple-multi :foo),0.000291,,,,
1.7.166,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00312,,,,
1.7.166,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00187,,,,
1.7.166,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00276,,,,
1.7.166,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),202.1,,,,
1.7.166,JSC,identity,[x 1] (identity x),1.355e-05,,,,
1.7.166,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.98,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.4,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.05,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.7.166,JSC,instance?,[coll []] (instance? PersistentVector coll),4.8e-05,,,,
1.7.166,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.166,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.7e-05,,,,
1.7.166,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000134,,,,
1.7.166,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.7e-05,,,,
1.7.166,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.00018,,,,
1.7.166,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.3e-05,,,,
1.7.166,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.166,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.166,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.6e-05,,,,
1.7.166,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000214,,,,
1.7.166,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (first coll),4.2e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.166,JSC,list ops,[] (list),3.2e-05,,,,
1.7.166,JSC,list ops,[] (list 1 2 3),0.0001,,,,
1.7.166,JSC,vector ops,[] [],3.4e-05,,,,
1.7.166,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.7e-05,,,,
1.7.166,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.5e-05,,,,
1.7.166,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.3e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00031,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (coll 0),5e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.3e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.5e-05,,,,
1.7.166,JSC,vector ops,[coll []] (-conj coll 1),7.3e-05,,,,
1.7.166,JSC,vector ops,[coll [1]] (-conj coll 2),7.3e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.7e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (seq coll),6.2e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-seq coll),6e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.8e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000153,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.3e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.7.166,JSC,large vector ops,[] (reduce conj [] (range 40000)),6.0,,,,
1.7.166,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00038,,,,
1.7.166,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.7.166,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.166,JSC,chunked seqs,[] (-first v),5.9e-05,,,,
1.7.166,JSC,chunked seqs,[] (-next v),0.000186,,,,
1.7.166,JSC,chunked seqs,[] (-rest v),5.8e-05,,,,
1.7.166,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.7.166,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.26,,,,
1.7.166,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.38,,,,
1.7.166,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),49.0,,,,
1.7.166,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),12.0,,,,
1.7.166,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),10.0,,,,
1.7.166,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),40.0,,,,
1.7.166,JSC,apply,[] (list 1 2 3 4 5),0.000163,,,,
1.7.166,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000163,,,,
1.7.166,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000225,,,,
1.7.166,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000171,,,,
1.7.166,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000175,,,,
1.7.166,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000538,,,,
1.7.166,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000242,,,,
1.7.166,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000223,,,,
1.7.166,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00028,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000949,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.6e-05,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),5e-05,,,,
1.7.166,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001031,,,,
1.7.166,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000105,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000108,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.6e-05,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.2e-05,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.00011,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),8.4e-05,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000123,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.7e-05,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.1e-05,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000111,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000118,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.8e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.6e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.00012,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.6e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.3e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.5e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),6.9e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.8e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.7.166,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00196,,,,
1.7.166,JSC,persistent hash maps,[key :f0] (hash key),5.3e-05,,,,
1.7.166,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.166,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.5e-05,,,,
1.7.166,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.36,,,,
1.7.166,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.28,,,,
1.7.166,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.63,,,,
1.7.166,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.67,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.6e-05,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (get coll :f0),9e-05,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),7.8e-05,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.0001,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00016,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000237,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),118.0,,,,
1.7.166,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000146,,,,
1.7.166,JSC,set ops,[] #{},4.1e-05,,,,
1.7.166,JSC,set ops,[] #{1 3 2},3.6e-05,,,,
1.7.166,JSC,set ops,[v [1 2 3]] (set v),0.000356,,,,
1.7.166,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000159,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.2e-05,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (coll 2),0.000101,,,,
1.7.166,JSC,seq ops,[coll (range 500000)] (reduce + coll),19.0,,,,
1.7.166,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.023,,,,
1.7.166,JSC,reader,[s big-str-data] (reader/read-string s),0.655,,,,
1.7.166,JSC,range,[r (range 1000000)] (last r),27.0,,,,
1.7.166,JSC,lazy-seq - first run,[r r] (last r),224.0,,,,
1.7.166,JSC,lazy-seq - second run,[r r] (last r),63.0,,,,
1.7.166,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.646,,,,
1.7.166,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.196,,,,
1.7.166,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),141.0,,,,
1.7.166,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),39.75,,,,
1.7.166,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),44.5,,,,
1.7.166,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.166,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),45.0,,,,
1.7.166,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),49.0,,,,
1.7.166,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),91.0,,,,
1.7.166,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),738.0,,,,
1.7.166,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),49.0,,,,
1.7.166,JSC,multimethods,[] (simple-multi :foo),0.000269,,,,
1.7.166,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00125,,,,
1.7.166,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00027,,,,
1.7.166,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00082,,,,
1.7.166,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),140.9,,,,
1.7.58,V8,identity,[x 1] (identity x),9.14e-06,,,,
1.7.58,V8,symbol construction,[] (symbol (quote foo)),2.5e-05,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.24,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.21,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.58,V8,instance?,[coll []] (instance? PersistentVector coll),0.000521,,,,
1.7.58,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000509,,,,
1.7.58,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.00051,,,,
1.7.58,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.9e-05,,,,
1.7.58,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.4e-05,,,,
1.7.58,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.58,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000111,,,,
1.7.58,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.8e-05,,,,
1.7.58,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.4e-05,,,,
1.7.58,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.4e-05,,,,
1.7.58,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000577,,,,
1.7.58,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (first coll),2e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (-first coll),2e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.7.58,V8,list ops,[] (list),4e-06,,,,
1.7.58,V8,list ops,[] (list 1 2 3),0.000561,,,,
1.7.58,V8,vector ops,[] [],3e-06,,,,
1.7.58,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000571,,,,
1.7.58,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00057,,,,
1.7.58,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000563,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.1e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (coll 0),0.000513,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (conj coll 4),5.1e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.7.58,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.58,V8,vector ops,[coll [1]] (-conj coll 2),3.9e-05,,,,
1.7.58,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (seq coll),3.7e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.9e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.1e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.4e-05,,,,
1.7.58,V8,large vector ops,[] (reduce conj [] (range 40000)),6.5,,,,
1.7.58,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.58,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0007,,,,
1.7.58,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.58,V8,chunked seqs,[] (-first v),1.5e-05,,,,
1.7.58,V8,chunked seqs,[] (-next v),3.6e-05,,,,
1.7.58,V8,chunked seqs,[] (-rest v),2.9e-05,,,,
1.7.58,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),40.0,,,,
1.7.58,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.17,,,,
1.7.58,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.74,,,,
1.7.58,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),82.0,,,,
1.7.58,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.7.58,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),28.0,,,,
1.7.58,V8,apply,[coll (into [] (range 1000000))] (apply + coll),62.0,,,,
1.7.58,V8,apply,[] (list 1 2 3 4 5),0.000613,,,,
1.7.58,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000134,,,,
1.7.58,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000435,,,,
1.7.58,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000139,,,,
1.7.58,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000234,,,,
1.7.58,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000805,,,,
1.7.58,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000315,,,,
1.7.58,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000306,,,,
1.7.58,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000252,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.9e-05,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001563,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.58,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001183,,,,
1.7.58,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.1e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.6e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.6e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.3e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.1e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.0001,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.9e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.8e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.4e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000103,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.9e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.1e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.3e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.3e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.8e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.8e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.2e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.3e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.8e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.2e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.4e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.4e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),38.0,,,,
1.7.58,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00299,,,,
1.7.58,V8,persistent hash maps,[key :f0] (hash key),2.5e-05,,,,
1.7.58,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.2e-05,,,,
1.7.58,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.58,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.16,,,,
1.7.58,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.05,,,,
1.7.58,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.78,,,,
1.7.58,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.21,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (:f0 coll),6.4e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (get coll :f0),5.1e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.6e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000254,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000417,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),82.0,,,,
1.7.58,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00016,,,,
1.7.58,V8,set ops,[] #{},4e-06,,,,
1.7.58,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.58,V8,set ops,[v [1 2 3]] (set v),0.000291,,,,
1.7.58,V8,set ops,[] (hash-set 1 2 3),3e-06,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000272,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (get coll 2),6.5e-05,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.3e-05,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (coll 2),7.2e-05,,,,
1.7.58,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.7.58,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.031,,,,
1.7.58,V8,reader,[s big-str-data] (reader/read-string s),0.762,,,,
1.7.58,V8,range,[r (range 1000000)] (last r),41.0,,,,
1.7.58,V8,lazy-seq - first run,[r r] (last r),467.0,,,,
1.7.58,V8,lazy-seq - second run,[r r] (last r),83.0,,,,
1.7.58,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.491,,,,
1.7.58,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.134,,,,
1.7.58,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),334.0,,,,
1.7.58,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),53.0,,,,
1.7.58,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.25,,,,
1.7.58,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.58,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),83.0,,,,
1.7.58,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),119.0,,,,
1.7.58,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1874.0,,,,
1.7.58,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1716.0,,,,
1.7.58,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),79.0,,,,
1.7.58,V8,multimethods,[] (simple-multi :foo),0.000155,,,,
1.7.58,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.58,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00032,,,,
1.7.58,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00121,,,,
1.7.58,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),151.8,,,,
1.7.58,SM,identity,[x 1] (identity x),8.45e-06,,,,
1.7.58,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.56,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.13,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.36,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.38,,,,
1.7.58,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.7.58,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.7.58,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.7.58,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000531,,,,
1.7.58,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001382,,,,
1.7.58,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000763,,,,
1.7.58,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001355,,,,
1.7.58,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000175,,,,
1.7.58,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000813,,,,
1.7.58,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000411,,,,
1.7.58,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001876,,,,
1.7.58,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (first coll),0.000122,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (rest coll),8.4e-05,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.7.58,SM,list ops,[] (list),9e-06,,,,
1.7.58,SM,list ops,[] (list 1 2 3),0.001323,,,,
1.7.58,SM,vector ops,[] [],9e-06,,,,
1.7.58,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000547,,,,
1.7.58,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000646,,,,
1.7.58,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000487,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (transient coll),0.00186,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000228,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000246,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000216,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (coll 0),0.000193,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000918,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000825,,,,
1.7.58,SM,vector ops,[coll []] (-conj coll 1),0.00071,,,,
1.7.58,SM,vector ops,[coll [1]] (-conj coll 2),0.000727,,,,
1.7.58,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000757,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (seq coll),0.000539,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000597,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000198,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000166,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000191,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000173,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000264,,,,
1.7.58,SM,large vector ops,[] (reduce conj [] (range 40000)),8.0,,,,
1.7.58,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00164,,,,
1.7.58,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00247,,,,
1.7.58,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00172,,,,
1.7.58,SM,chunked seqs,[] (-first v),0.000176,,,,
1.7.58,SM,chunked seqs,[] (-next v),0.000187,,,,
1.7.58,SM,chunked seqs,[] (-rest v),0.000178,,,,
1.7.58,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),18.0,,,,
1.7.58,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.46,,,,
1.7.58,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.2,,,,
1.7.58,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),83.0,,,,
1.7.58,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.7.58,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),7.0,,,,
1.7.58,SM,apply,[coll (into [] (range 1000000))] (apply + coll),41.0,,,,
1.7.58,SM,apply,[] (list 1 2 3 4 5),0.000353,,,,
1.7.58,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000351,,,,
1.7.58,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000382,,,,
1.7.58,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000363,,,,
1.7.58,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000362,,,,
1.7.58,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.0009,,,,
1.7.58,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.0004,,,,
1.7.58,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000377,,,,
1.7.58,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000406,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000194,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002446,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000185,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000191,,,,
1.7.58,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.00272,,,,
1.7.58,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000258,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000222,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000374,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000224,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000235,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000269,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000216,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000339,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000233,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000232,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.00028,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000222,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000345,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.00022,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000222,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000224,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000219,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000209,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000207,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000208,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000232,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.00021,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000238,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",175.0,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000187,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000185,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.00024,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000234,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),247.0,,,,
1.7.58,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00334,,,,
1.7.58,SM,persistent hash maps,[key :f0] (hash key),0.000189,,,,
1.7.58,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000187,,,,
1.7.58,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.00018,,,,
1.7.58,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.6,,,,
1.7.58,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.2,,,,
1.7.58,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.04,,,,
1.7.58,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.79,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000243,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000244,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000213,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000248,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000562,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000559,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),307.0,,,,
1.7.58,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000277,,,,
1.7.58,SM,set ops,[] #{},0.000162,,,,
1.7.58,SM,set ops,[] #{1 3 2},0.000151,,,,
1.7.58,SM,set ops,[v [1 2 3]] (set v),0.000402,,,,
1.7.58,SM,set ops,[] (hash-set 1 2 3),0.000151,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000412,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000237,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000204,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (coll 2),0.000208,,,,
1.7.58,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.7.58,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.098,,,,
1.7.58,SM,reader,[s big-str-data] (reader/read-string s),1.733,,,,
1.7.58,SM,range,[r (range 1000000)] (last r),46.0,,,,
1.7.58,SM,lazy-seq - first run,[r r] (last r),429.0,,,,
1.7.58,SM,lazy-seq - second run,[r r] (last r),55.0,,,,
1.7.58,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.606,,,,
1.7.58,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.416,,,,
1.7.58,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),217.0,,,,
1.7.58,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),93.25,,,,
1.7.58,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),208.0,,,,
1.7.58,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),124.0,,,,
1.7.58,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),33.0,,,,
1.7.58,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),34.0,,,,
1.7.58,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),238.0,,,,
1.7.58,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1526.0,,,,
1.7.58,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.7.58,SM,multimethods,[] (simple-multi :foo),0.000314,,,,
1.7.58,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00354,,,,
1.7.58,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00207,,,,
1.7.58,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00388,,,,
1.7.58,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),205.4,,,,
1.7.58,JSC,identity,[x 1] (identity x),1.237e-05,,,,
1.7.58,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.7,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.59,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.58,JSC,instance?,[coll []] (instance? PersistentVector coll),5.1e-05,,,,
1.7.58,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.58,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.6e-05,,,,
1.7.58,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.00013,,,,
1.7.58,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6e-05,,,,
1.7.58,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000178,,,,
1.7.58,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.1e-05,,,,
1.7.58,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.58,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.58,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.1e-05,,,,
1.7.58,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000223,,,,
1.7.58,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (first coll),4.7e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.8e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.7e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.6e-05,,,,
1.7.58,JSC,list ops,[] (list),3.2e-05,,,,
1.7.58,JSC,list ops,[] (list 1 2 3),9.6e-05,,,,
1.7.58,JSC,vector ops,[] [],3.6e-05,,,,
1.7.58,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.6e-05,,,,
1.7.58,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.8e-05,,,,
1.7.58,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.7e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (coll 0),5e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.6e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.6e-05,,,,
1.7.58,JSC,vector ops,[coll []] (-conj coll 1),7.6e-05,,,,
1.7.58,JSC,vector ops,[coll [1]] (-conj coll 2),7.3e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.4e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (seq coll),5.4e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.3e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.8e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000155,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.7.58,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.7.58,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00033,,,,
1.7.58,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.7.58,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.58,JSC,chunked seqs,[] (-first v),5.8e-05,,,,
1.7.58,JSC,chunked seqs,[] (-next v),0.000184,,,,
1.7.58,JSC,chunked seqs,[] (-rest v),5.9e-05,,,,
1.7.58,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),16.0,,,,
1.7.58,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.21,,,,
1.7.58,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.6,,,,
1.7.58,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),35.0,,,,
1.7.58,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.7.58,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.7.58,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),41.0,,,,
1.7.58,JSC,apply,[] (list 1 2 3 4 5),0.000179,,,,
1.7.58,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000159,,,,
1.7.58,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000228,,,,
1.7.58,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000163,,,,
1.7.58,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000164,,,,
1.7.58,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000528,,,,
1.7.58,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000228,,,,
1.7.58,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000212,,,,
1.7.58,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000287,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000964,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.7.58,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001043,,,,
1.7.58,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),9.9e-05,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000106,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.2e-05,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.00011,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),8.1e-05,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000122,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.8e-05,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.2e-05,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000103,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000117,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.3e-05,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.8e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.5e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",6e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",7.4e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",7e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000124,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.6e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.6e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",8.0,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.9e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.2e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.9e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.7.58,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00208,,,,
1.7.58,JSC,persistent hash maps,[key :f0] (hash key),4.8e-05,,,,
1.7.58,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.58,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.5e-05,,,,
1.7.58,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.33,,,,
1.7.58,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.25,,,,
1.7.58,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.6,,,,
1.7.58,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.69,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000102,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (get coll :f0),9e-05,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),7.9e-05,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000107,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000173,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000243,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),119.0,,,,
1.7.58,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000139,,,,
1.7.58,JSC,set ops,[] #{},3.7e-05,,,,
1.7.58,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.7.58,JSC,set ops,[v [1 2 3]] (set v),0.00034,,,,
1.7.58,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000154,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.2e-05,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),8.2e-05,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.7.58,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.58,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.025,,,,
1.7.58,JSC,reader,[s big-str-data] (reader/read-string s),0.636,,,,
1.7.58,JSC,range,[r (range 1000000)] (last r),27.0,,,,
1.7.58,JSC,lazy-seq - first run,[r r] (last r),195.0,,,,
1.7.58,JSC,lazy-seq - second run,[r r] (last r),61.0,,,,
1.7.58,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.654,,,,
1.7.58,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.193,,,,
1.7.58,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),143.0,,,,
1.7.58,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.5,,,,
1.7.58,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.25,,,,
1.7.58,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),12.75,,,,
1.7.58,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),45.0,,,,
1.7.58,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),44.0,,,,
1.7.58,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),95.0,,,,
1.7.58,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),790.0,,,,
1.7.58,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),49.0,,,,
1.7.58,JSC,multimethods,[] (simple-multi :foo),0.000314,,,,
1.7.58,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00062,,,,
1.7.58,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00028,,,,
1.7.58,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00083,,,,
1.7.58,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),142.7,,,,
1.7.48,V8,identity,[x 1] (identity x),9.28e-06,,,,
1.7.48,V8,symbol construction,[] (symbol (quote foo)),2.7e-05,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.26,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.22,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.48,V8,instance?,[coll []] (instance? PersistentVector coll),0.000524,,,,
1.7.48,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000505,,,,
1.7.48,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000513,,,,
1.7.48,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.7e-05,,,,
1.7.48,V8,array & string ops,"[coll ""foobar""] (seq coll)",0.0001,,,,
1.7.48,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.48,V8,array & string ops,"[coll ""foobar""] (first coll)",0.00011,,,,
1.7.48,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.8e-05,,,,
1.7.48,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.4e-05,,,,
1.7.48,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.5e-05,,,,
1.7.48,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000579,,,,
1.7.48,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (first coll),2e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (-first coll),1.9e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.7.48,V8,list ops,[] (list),4e-06,,,,
1.7.48,V8,list ops,[] (list 1 2 3),0.000558,,,,
1.7.48,V8,vector ops,[] [],4e-06,,,,
1.7.48,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00058,,,,
1.7.48,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000572,,,,
1.7.48,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000565,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.1e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (coll 0),0.000516,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.48,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.48,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.48,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (seq coll),3.7e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.8e-05,,,,
1.7.48,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.7.48,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.48,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0007,,,,
1.7.48,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.48,V8,chunked seqs,[] (-first v),1.4e-05,,,,
1.7.48,V8,chunked seqs,[] (-next v),3e-05,,,,
1.7.48,V8,chunked seqs,[] (-rest v),3.2e-05,,,,
1.7.48,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),38.0,,,,
1.7.48,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.18,,,,
1.7.48,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.77,,,,
1.7.48,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),84.0,,,,
1.7.48,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.7.48,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),29.0,,,,
1.7.48,V8,apply,[coll (into [] (range 1000000))] (apply + coll),61.0,,,,
1.7.48,V8,apply,[] (list 1 2 3 4 5),0.000611,,,,
1.7.48,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000139,,,,
1.7.48,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000429,,,,
1.7.48,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000139,,,,
1.7.48,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000237,,,,
1.7.48,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000823,,,,
1.7.48,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000315,,,,
1.7.48,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000297,,,,
1.7.48,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000251,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.3e-05,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001477,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.7.48,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001186,,,,
1.7.48,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),7.9e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.6e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.3e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.9e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.0001,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.9e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.7e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.8e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.0001,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.5e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.3e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.5e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.3e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.8e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.4e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.1e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.1e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.7e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.2e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.2e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.7.48,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00307,,,,
1.7.48,V8,persistent hash maps,[key :f0] (hash key),2.6e-05,,,,
1.7.48,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.6e-05,,,,
1.7.48,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.48,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.14,,,,
1.7.48,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.99,,,,
1.7.48,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.83,,,,
1.7.48,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.08,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (:f0 coll),6.6e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (get coll :f0),5.2e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.3e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.4e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000248,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000419,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),80.0,,,,
1.7.48,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000162,,,,
1.7.48,V8,set ops,[] #{},4e-06,,,,
1.7.48,V8,set ops,[] #{1 3 2},3e-06,,,,
1.7.48,V8,set ops,[v [1 2 3]] (set v),0.000311,,,,
1.7.48,V8,set ops,[] (hash-set 1 2 3),3e-06,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000271,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (get coll 2),6.6e-05,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.3e-05,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (coll 2),6.9e-05,,,,
1.7.48,V8,seq ops,[coll (range 500000)] (reduce + coll),26.0,,,,
1.7.48,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.036,,,,
1.7.48,V8,reader,[s big-str-data] (reader/read-string s),0.775,,,,
1.7.48,V8,range,[r (range 1000000)] (last r),37.0,,,,
1.7.48,V8,lazy-seq - first run,[r r] (last r),480.0,,,,
1.7.48,V8,lazy-seq - second run,[r r] (last r),91.0,,,,
1.7.48,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.509,,,,
1.7.48,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.133,,,,
1.7.48,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),327.0,,,,
1.7.48,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),53.5,,,,
1.7.48,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),41.75,,,,
1.7.48,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.48,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),86.0,,,,
1.7.48,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),112.0,,,,
1.7.48,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2234.0,,,,
1.7.48,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1681.0,,,,
1.7.48,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),81.0,,,,
1.7.48,V8,multimethods,[] (simple-multi :foo),0.000156,,,,
1.7.48,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.48,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00032,,,,
1.7.48,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00105,,,,
1.7.48,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),170.4,,,,
1.7.48,SM,identity,[x 1] (identity x),8.18e-06,,,,
1.7.48,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),2.73,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.37,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.39,,,,
1.7.48,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.7.48,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.7.48,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3.1e-05,,,,
1.7.48,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000636,,,,
1.7.48,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001279,,,,
1.7.48,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000812,,,,
1.7.48,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001364,,,,
1.7.48,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000175,,,,
1.7.48,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000985,,,,
1.7.48,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000416,,,,
1.7.48,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001836,,,,
1.7.48,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (first coll),0.000115,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (rest coll),8.1e-05,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.5e-05,,,,
1.7.48,SM,list ops,[] (list),9e-06,,,,
1.7.48,SM,list ops,[] (list 1 2 3),0.001259,,,,
1.7.48,SM,vector ops,[] [],9e-06,,,,
1.7.48,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000567,,,,
1.7.48,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000643,,,,
1.7.48,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.0005,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (transient coll),0.00202,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000241,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000209,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000214,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (coll 0),0.000193,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000847,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000794,,,,
1.7.48,SM,vector ops,[coll []] (-conj coll 1),0.000718,,,,
1.7.48,SM,vector ops,[coll [1]] (-conj coll 2),0.000746,,,,
1.7.48,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000772,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (seq coll),0.000544,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000616,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000201,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000176,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000195,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000174,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000263,,,,
1.7.48,SM,large vector ops,[] (reduce conj [] (range 40000)),8.4,,,,
1.7.48,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00165,,,,
1.7.48,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00246,,,,
1.7.48,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00168,,,,
1.7.48,SM,chunked seqs,[] (-first v),0.000175,,,,
1.7.48,SM,chunked seqs,[] (-next v),0.000178,,,,
1.7.48,SM,chunked seqs,[] (-rest v),0.000176,,,,
1.7.48,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.48,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.63,,,,
1.7.48,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.33,,,,
1.7.48,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),75.0,,,,
1.7.48,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.7.48,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),7.0,,,,
1.7.48,SM,apply,[coll (into [] (range 1000000))] (apply + coll),46.0,,,,
1.7.48,SM,apply,[] (list 1 2 3 4 5),0.00036,,,,
1.7.48,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000343,,,,
1.7.48,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000371,,,,
1.7.48,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.0004,,,,
1.7.48,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000376,,,,
1.7.48,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000804,,,,
1.7.48,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000379,,,,
1.7.48,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.00038,,,,
1.7.48,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000402,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000193,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002246,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000189,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000186,,,,
1.7.48,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002811,,,,
1.7.48,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000258,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000218,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000337,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.00022,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000233,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000267,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000224,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00036,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000232,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.00024,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000263,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000216,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000333,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.00022,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000232,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000226,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000221,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000216,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000208,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000212,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000242,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000208,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000238,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",174.0,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000201,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000181,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000235,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000233,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),247.0,,,,
1.7.48,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0036,,,,
1.7.48,SM,persistent hash maps,[key :f0] (hash key),0.000192,,,,
1.7.48,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000174,,,,
1.7.48,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000183,,,,
1.7.48,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.58,,,,
1.7.48,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.34,,,,
1.7.48,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.13,,,,
1.7.48,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.97,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (:f0 coll),0.00024,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (get coll :f0),0.00023,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000213,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000263,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000615,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000555,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),302.0,,,,
1.7.48,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000286,,,,
1.7.48,SM,set ops,[] #{},0.000163,,,,
1.7.48,SM,set ops,[] #{1 3 2},0.000152,,,,
1.7.48,SM,set ops,[v [1 2 3]] (set v),0.000391,,,,
1.7.48,SM,set ops,[] (hash-set 1 2 3),0.000151,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000386,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000216,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000213,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (coll 2),0.000212,,,,
1.7.48,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.48,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.098,,,,
1.7.48,SM,reader,[s big-str-data] (reader/read-string s),1.711,,,,
1.7.48,SM,range,[r (range 1000000)] (last r),44.0,,,,
1.7.48,SM,lazy-seq - first run,[r r] (last r),421.0,,,,
1.7.48,SM,lazy-seq - second run,[r r] (last r),54.0,,,,
1.7.48,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.673,,,,
1.7.48,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.43,,,,
1.7.48,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),217.0,,,,
1.7.48,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),93.0,,,,
1.7.48,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),209.0,,,,
1.7.48,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),121.75,,,,
1.7.48,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),29.0,,,,
1.7.48,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),33.0,,,,
1.7.48,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),229.0,,,,
1.7.48,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1589.0,,,,
1.7.48,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.7.48,SM,multimethods,[] (simple-multi :foo),0.000305,,,,
1.7.48,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0036,,,,
1.7.48,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00205,,,,
1.7.48,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.0039,,,,
1.7.48,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),200.0,,,,
1.7.48,JSC,identity,[x 1] (identity x),1.139e-05,,,,
1.7.48,JSC,symbol construction,[] (symbol (quote foo)),4.6e-05,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.59,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.03,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.48,JSC,instance?,[coll []] (instance? PersistentVector coll),4.7e-05,,,,
1.7.48,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.48,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.7e-05,,,,
1.7.48,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000129,,,,
1.7.48,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.9e-05,,,,
1.7.48,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000177,,,,
1.7.48,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.3e-05,,,,
1.7.48,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.48,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.7e-05,,,,
1.7.48,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.3e-05,,,,
1.7.48,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000214,,,,
1.7.48,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (first coll),4.5e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.7e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.48,JSC,list ops,[] (list),3.1e-05,,,,
1.7.48,JSC,list ops,[] (list 1 2 3),9.9e-05,,,,
1.7.48,JSC,vector ops,[] [],3.4e-05,,,,
1.7.48,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000105,,,,
1.7.48,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000101,,,,
1.7.48,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.4e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00031,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.5e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.6e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (coll 0),5e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.1e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.7.48,JSC,vector ops,[coll []] (-conj coll 1),7.6e-05,,,,
1.7.48,JSC,vector ops,[coll [1]] (-conj coll 2),7.3e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.7e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),7.3e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000146,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.4e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.8e-05,,,,
1.7.48,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.3,,,,
1.7.48,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00037,,,,
1.7.48,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00062,,,,
1.7.48,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.48,JSC,chunked seqs,[] (-first v),5.5e-05,,,,
1.7.48,JSC,chunked seqs,[] (-next v),0.000186,,,,
1.7.48,JSC,chunked seqs,[] (-rest v),6.1e-05,,,,
1.7.48,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),18.0,,,,
1.7.48,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.22,,,,
1.7.48,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.57,,,,
1.7.48,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),30.0,,,,
1.7.48,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),15.0,,,,
1.7.48,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.7.48,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),39.0,,,,
1.7.48,JSC,apply,[] (list 1 2 3 4 5),0.000185,,,,
1.7.48,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000158,,,,
1.7.48,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000227,,,,
1.7.48,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000162,,,,
1.7.48,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000164,,,,
1.7.48,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000525,,,,
1.7.48,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00023,,,,
1.7.48,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.00022,,,,
1.7.48,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000276,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.7e-05,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000977,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.7.48,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001077,,,,
1.7.48,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),9.5e-05,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000105,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.00011,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),8e-05,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000116,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.4e-05,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.9e-05,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000103,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000116,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.4e-05,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.8e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.4e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.3e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000124,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.6e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.7e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.4e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),6.9e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.8e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.7.48,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00201,,,,
1.7.48,JSC,persistent hash maps,[key :f0] (hash key),5.2e-05,,,,
1.7.48,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.48,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.5e-05,,,,
1.7.48,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.34,,,,
1.7.48,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.7.48,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.63,,,,
1.7.48,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.68,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.0001,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.2e-05,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.1e-05,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000102,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000168,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000243,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),120.0,,,,
1.7.48,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000143,,,,
1.7.48,JSC,set ops,[] #{},3.5e-05,,,,
1.7.48,JSC,set ops,[] #{1 3 2},3.8e-05,,,,
1.7.48,JSC,set ops,[v [1 2 3]] (set v),0.000354,,,,
1.7.48,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.00016,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (get coll 2),9e-05,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (coll 2),0.000101,,,,
1.7.48,JSC,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.7.48,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.026,,,,
1.7.48,JSC,reader,[s big-str-data] (reader/read-string s),0.632,,,,
1.7.48,JSC,range,[r (range 1000000)] (last r),26.0,,,,
1.7.48,JSC,lazy-seq - first run,[r r] (last r),191.0,,,,
1.7.48,JSC,lazy-seq - second run,[r r] (last r),62.0,,,,
1.7.48,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.654,,,,
1.7.48,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.19,,,,
1.7.48,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),143.0,,,,
1.7.48,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.5,,,,
1.7.48,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.5,,,,
1.7.48,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.48,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),48.0,,,,
1.7.48,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),46.0,,,,
1.7.48,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),91.0,,,,
1.7.48,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),812.0,,,,
1.7.48,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),47.0,,,,
1.7.48,JSC,multimethods,[] (simple-multi :foo),0.000269,,,,
1.7.48,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.48,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00037,,,,
1.7.48,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00151,,,,
1.7.48,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),141.7,,,,
1.7.28,V8,identity,[x 1] (identity x),9.27e-06,,,,
1.7.28,V8,symbol construction,[] (symbol (quote foo)),0.000569,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.27,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.19,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.28,V8,instance?,[coll []] (instance? PersistentVector coll),0.000531,,,,
1.7.28,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000517,,,,
1.7.28,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000515,,,,
1.7.28,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3.1e-05,,,,
1.7.28,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.3e-05,,,,
1.7.28,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.7.28,V8,array & string ops,"[coll ""foobar""] (first coll)",0.00011,,,,
1.7.28,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.6e-05,,,,
1.7.28,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.7.28,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.8e-05,,,,
1.7.28,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000572,,,,
1.7.28,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (first coll),2.2e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (-first coll),1.9e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.7.28,V8,list ops,[] (list),3e-06,,,,
1.7.28,V8,list ops,[] (list 1 2 3),0.000563,,,,
1.7.28,V8,vector ops,[] [],3e-06,,,,
1.7.28,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000575,,,,
1.7.28,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000577,,,,
1.7.28,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000577,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (coll 0),0.000524,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (conj coll 4),5e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.7e-05,,,,
1.7.28,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.28,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.28,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (seq coll),4e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.28,V8,large vector ops,[] (reduce conj [] (range 40000)),6.8,,,,
1.7.28,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.28,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00071,,,,
1.7.28,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.28,V8,chunked seqs,[] (-first v),1.5e-05,,,,
1.7.28,V8,chunked seqs,[] (-next v),3.6e-05,,,,
1.7.28,V8,chunked seqs,[] (-rest v),3e-05,,,,
1.7.28,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.7.28,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.25,,,,
1.7.28,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.46,,,,
1.7.28,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.7.28,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),23.0,,,,
1.7.28,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),28.0,,,,
1.7.28,V8,apply,[coll (into [] (range 1000000))] (apply + coll),66.0,,,,
1.7.28,V8,apply,[] (list 1 2 3 4 5),0.000124,,,,
1.7.28,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000136,,,,
1.7.28,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00044,,,,
1.7.28,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.00014,,,,
1.7.28,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000232,,,,
1.7.28,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000807,,,,
1.7.28,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00031,,,,
1.7.28,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000297,,,,
1.7.28,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000252,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.6e-05,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001478,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.28,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001147,,,,
1.7.28,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.8e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.6e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.9e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000103,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.9e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.2e-05,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000163,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000107,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000176,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000115,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000126,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.5e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000106,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",9.6e-05,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000136,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.2e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8e-05,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",8.0,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.2e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.4e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),38.0,,,,
1.7.28,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00322,,,,
1.7.28,V8,persistent hash maps,[key :f0] (hash key),2.1e-05,,,,
1.7.28,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.2e-05,,,,
1.7.28,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.28,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.16,,,,
1.7.28,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.1,,,,
1.7.28,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.78,,,,
1.7.28,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.0,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (:f0 coll),6.1e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (get coll :f0),5.3e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.2e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000252,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000416,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),102.0,,,,
1.7.28,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00016,,,,
1.7.28,V8,set ops,[] #{},4e-06,,,,
1.7.28,V8,set ops,[] #{1 3 2},3e-06,,,,
1.7.28,V8,set ops,[v [1 2 3]] (set v),0.000303,,,,
1.7.28,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000281,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (get coll 2),6.7e-05,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.6e-05,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (coll 2),7e-05,,,,
1.7.28,V8,seq ops,[coll (range 500000)] (reduce + coll),26.0,,,,
1.7.28,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.033,,,,
1.7.28,V8,reader,[s big-str-data] (reader/read-string s),0.765,,,,
1.7.28,V8,range,[r (range 1000000)] (last r),39.0,,,,
1.7.28,V8,lazy-seq - first run,[r r] (last r),528.0,,,,
1.7.28,V8,lazy-seq - second run,[r r] (last r),84.0,,,,
1.7.28,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.469,,,,
1.7.28,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.134,,,,
1.7.28,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),307.0,,,,
1.7.28,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),53.75,,,,
1.7.28,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),42.5,,,,
1.7.28,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.28,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),95.0,,,,
1.7.28,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),116.0,,,,
1.7.28,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2128.0,,,,
1.7.28,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1641.0,,,,
1.7.28,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),81.0,,,,
1.7.28,V8,multimethods,[] (simple-multi :foo),0.000643,,,,
1.7.28,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.28,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00033,,,,
1.7.28,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00104,,,,
1.7.28,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),203.5,,,,
1.7.28,SM,identity,[x 1] (identity x),8.21e-06,,,,
1.7.28,SM,symbol construction,[] (symbol (quote foo)),0.000396,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.59,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.11,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.41,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.47,,,,
1.7.28,SM,instance?,[coll []] (instance? PersistentVector coll),1.8e-05,,,,
1.7.28,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.7.28,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.8e-05,,,,
1.7.28,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000544,,,,
1.7.28,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001476,,,,
1.7.28,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000827,,,,
1.7.28,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001312,,,,
1.7.28,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000164,,,,
1.7.28,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000788,,,,
1.7.28,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000446,,,,
1.7.28,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00181,,,,
1.7.28,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),7.1e-05,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (first coll),0.000113,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (-first coll),7.8e-05,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (rest coll),0.000109,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (-rest coll),6.9e-05,,,,
1.7.28,SM,list ops,[] (list),1.2e-05,,,,
1.7.28,SM,list ops,[] (list 1 2 3),0.001306,,,,
1.7.28,SM,vector ops,[] [],9e-06,,,,
1.7.28,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000537,,,,
1.7.28,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000633,,,,
1.7.28,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000489,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (transient coll),0.0018,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.00021,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000215,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (coll 0),0.000194,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000843,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000813,,,,
1.7.28,SM,vector ops,[coll []] (-conj coll 1),0.000739,,,,
1.7.28,SM,vector ops,[coll [1]] (-conj coll 2),0.000771,,,,
1.7.28,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000795,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (seq coll),0.000623,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000489,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000191,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000164,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000196,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000197,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000253,,,,
1.7.28,SM,large vector ops,[] (reduce conj [] (range 40000)),8.3,,,,
1.7.28,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00173,,,,
1.7.28,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00247,,,,
1.7.28,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00174,,,,
1.7.28,SM,chunked seqs,[] (-first v),0.000173,,,,
1.7.28,SM,chunked seqs,[] (-next v),0.000183,,,,
1.7.28,SM,chunked seqs,[] (-rest v),0.000181,,,,
1.7.28,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),54.0,,,,
1.7.28,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),7.02,,,,
1.7.28,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.87,,,,
1.7.28,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.7.28,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),7.0,,,,
1.7.28,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.7.28,SM,apply,[coll (into [] (range 1000000))] (apply + coll),54.0,,,,
1.7.28,SM,apply,[] (list 1 2 3 4 5),0.000375,,,,
1.7.28,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.0003,,,,
1.7.28,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000364,,,,
1.7.28,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.00033,,,,
1.7.28,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.00037,,,,
1.7.28,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000637,,,,
1.7.28,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000381,,,,
1.7.28,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000375,,,,
1.7.28,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000432,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000184,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002301,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000176,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.00018,,,,
1.7.28,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002844,,,,
1.7.28,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000255,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000207,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000354,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000205,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000211,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000267,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000211,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00033,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.00023,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000229,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000857,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000454,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000944,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000475,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000473,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000222,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000458,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.00021,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000481,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.00021,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000544,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000205,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000206,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",171.0,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000196,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000177,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.00023,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.00025,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),260.0,,,,
1.7.28,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00377,,,,
1.7.28,SM,persistent hash maps,[key :f0] (hash key),0.000179,,,,
1.7.28,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.00018,,,,
1.7.28,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000175,,,,
1.7.28,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.17,,,,
1.7.28,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.18,,,,
1.7.28,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.03,,,,
1.7.28,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.42,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000248,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000229,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000206,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000253,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000577,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00062,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),285.0,,,,
1.7.28,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000286,,,,
1.7.28,SM,set ops,[] #{},0.000173,,,,
1.7.28,SM,set ops,[] #{1 3 2},0.000218,,,,
1.7.28,SM,set ops,[v [1 2 3]] (set v),0.000403,,,,
1.7.28,SM,set ops,[] (hash-set 1 2 3),0.00015,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000418,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000212,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000225,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (coll 2),0.000242,,,,
1.7.28,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.28,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.091,,,,
1.7.28,SM,reader,[s big-str-data] (reader/read-string s),1.819,,,,
1.7.28,SM,range,[r (range 1000000)] (last r),23.0,,,,
1.7.28,SM,lazy-seq - first run,[r r] (last r),438.0,,,,
1.7.28,SM,lazy-seq - second run,[r r] (last r),46.0,,,,
1.7.28,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.635,,,,
1.7.28,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.478,,,,
1.7.28,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),209.0,,,,
1.7.28,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.5,,,,
1.7.28,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),198.25,,,,
1.7.28,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),126.25,,,,
1.7.28,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),32.0,,,,
1.7.28,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),280.0,,,,
1.7.28,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),259.0,,,,
1.7.28,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1490.0,,,,
1.7.28,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),28.0,,,,
1.7.28,SM,multimethods,[] (simple-multi :foo),0.000304,,,,
1.7.28,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00321,,,,
1.7.28,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00196,,,,
1.7.28,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00276,,,,
1.7.28,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),193.4,,,,
1.7.28,JSC,identity,[x 1] (identity x),2.424e-05,,,,
1.7.28,JSC,symbol construction,[] (symbol (quote foo)),0.000173,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.11,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.11,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.7.28,JSC,instance?,[coll []] (instance? PersistentVector coll),5.2e-05,,,,
1.7.28,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.4e-05,,,,
1.7.28,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.7.28,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000156,,,,
1.7.28,JSC,array & string ops,"[coll ""foobar""] (seq coll)",0.000191,,,,
1.7.28,JSC,array & string ops,[coll (array 1 2 3)] (first coll),7.2e-05,,,,
1.7.28,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.4e-05,,,,
1.7.28,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.28,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.2e-05,,,,
1.7.28,JSC,cloning & specify,[coll [1 2 3]] (clone coll),5.5e-05,,,,
1.7.28,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00022,,,,
1.7.28,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (first coll),4.7e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.7e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.28,JSC,list ops,[] (list),3.3e-05,,,,
1.7.28,JSC,list ops,[] (list 1 2 3),9.7e-05,,,,
1.7.28,JSC,vector ops,[] [],3.4e-05,,,,
1.7.28,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.7.28,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.0001,,,,
1.7.28,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.6e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00028,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.4e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.9e-05,,,,
1.7.28,JSC,vector ops,[coll []] (-conj coll 1),7.3e-05,,,,
1.7.28,JSC,vector ops,[coll [1]] (-conj coll 2),7.8e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2]] (-conj coll 3),8e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (seq coll),5.5e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.3e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.2e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),7.1e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000151,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.3e-05,,,,
1.7.28,JSC,large vector ops,[] (reduce conj [] (range 40000)),4.9,,,,
1.7.28,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00034,,,,
1.7.28,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.7.28,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.28,JSC,chunked seqs,[] (-first v),5.6e-05,,,,
1.7.28,JSC,chunked seqs,[] (-next v),0.00018,,,,
1.7.28,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.7.28,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.7.28,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.26,,,,
1.7.28,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.61,,,,
1.7.28,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),33.0,,,,
1.7.28,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.28,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.7.28,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),44.0,,,,
1.7.28,JSC,apply,[] (list 1 2 3 4 5),0.000178,,,,
1.7.28,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000163,,,,
1.7.28,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000239,,,,
1.7.28,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000164,,,,
1.7.28,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000165,,,,
1.7.28,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000517,,,,
1.7.28,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000237,,,,
1.7.28,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000212,,,,
1.7.28,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000279,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000858,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.6e-05,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.7.28,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001061,,,,
1.7.28,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),9.9e-05,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.3e-05,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000108,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.9e-05,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000111,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.5e-05,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000112,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.2e-05,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.6e-05,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000142,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),8.7e-05,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.00016,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),9e-05,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.6e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.4e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",9e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.5e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",8.5e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000129,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.8e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.8e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.5e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),71.0,,,,
1.7.28,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00203,,,,
1.7.28,JSC,persistent hash maps,[key :f0] (hash key),5e-05,,,,
1.7.28,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.5e-05,,,,
1.7.28,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.5e-05,,,,
1.7.28,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.34,,,,
1.7.28,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.7.28,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.62,,,,
1.7.28,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.66,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.9e-05,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (get coll :f0),9e-05,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.7e-05,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000106,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000166,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000239,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),119.0,,,,
1.7.28,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000139,,,,
1.7.28,JSC,set ops,[] #{},3.8e-05,,,,
1.7.28,JSC,set ops,[] #{1 3 2},3.3e-05,,,,
1.7.28,JSC,set ops,[v [1 2 3]] (set v),0.000345,,,,
1.7.28,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000153,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.6e-05,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (coll 2),9.6e-05,,,,
1.7.28,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.28,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.023,,,,
1.7.28,JSC,reader,[s big-str-data] (reader/read-string s),0.639,,,,
1.7.28,JSC,range,[r (range 1000000)] (last r),27.0,,,,
1.7.28,JSC,lazy-seq - first run,[r r] (last r),193.0,,,,
1.7.28,JSC,lazy-seq - second run,[r r] (last r),57.0,,,,
1.7.28,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.651,,,,
1.7.28,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.191,,,,
1.7.28,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),146.0,,,,
1.7.28,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.5,,,,
1.7.28,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),44.75,,,,
1.7.28,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.25,,,,
1.7.28,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),48.0,,,,
1.7.28,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),50.0,,,,
1.7.28,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),96.0,,,,
1.7.28,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),835.0,,,,
1.7.28,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),48.0,,,,
1.7.28,JSC,multimethods,[] (simple-multi :foo),0.000298,,,,
1.7.28,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.28,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00029,,,,
1.7.28,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00145,,,,
1.7.28,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),136.5,,,,
1.7.10,V8,identity,[x 1] (identity x),9.22e-06,,,,
1.7.10,V8,symbol construction,[] (symbol (quote foo)),0.000573,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.25,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.23,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.10,V8,instance?,[coll []] (instance? PersistentVector coll),0.000536,,,,
1.7.10,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000528,,,,
1.7.10,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000511,,,,
1.7.10,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.5e-05,,,,
1.7.10,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.5e-05,,,,
1.7.10,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.7.10,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000109,,,,
1.7.10,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.7.10,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.7.10,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.6e-05,,,,
1.7.10,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000581,,,,
1.7.10,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.6e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (first coll),1.9e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (-first coll),1.7e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (rest coll),1.5e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.7.10,V8,list ops,[] (list),4e-06,,,,
1.7.10,V8,list ops,[] (list 1 2 3),0.000561,,,,
1.7.10,V8,vector ops,[] [],3e-06,,,,
1.7.10,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000581,,,,
1.7.10,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000574,,,,
1.7.10,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000576,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (transient coll),0.00021,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.5e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.7e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (coll 0),0.000515,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.7.10,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.10,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.10,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (seq coll),4.1e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.7e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.1e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.4e-05,,,,
1.7.10,V8,large vector ops,[] (reduce conj [] (range 40000)),7.3,,,,
1.7.10,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.10,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00067,,,,
1.7.10,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.10,V8,chunked seqs,[] (-first v),2e-05,,,,
1.7.10,V8,chunked seqs,[] (-next v),3e-05,,,,
1.7.10,V8,chunked seqs,[] (-rest v),2.9e-05,,,,
1.7.10,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.7.10,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.12,,,,
1.7.10,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.42,,,,
1.7.10,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.7.10,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),23.0,,,,
1.7.10,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),29.0,,,,
1.7.10,V8,apply,[coll (into [] (range 1000000))] (apply + coll),70.0,,,,
1.7.10,V8,apply,[] (list 1 2 3 4 5),0.000122,,,,
1.7.10,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000135,,,,
1.7.10,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000431,,,,
1.7.10,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000141,,,,
1.7.10,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000232,,,,
1.7.10,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000825,,,,
1.7.10,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000316,,,,
1.7.10,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000297,,,,
1.7.10,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000252,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001435,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.7.10,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001146,,,,
1.7.10,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.3e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.3e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.9e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.3e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.2e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000101,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.6e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.1e-05,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000158,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000107,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000174,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.00012,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000127,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.3e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000107,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",9.8e-05,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000136,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.1e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.6e-05,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",8.0,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.1e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.3e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),37.0,,,,
1.7.10,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00309,,,,
1.7.10,V8,persistent hash maps,[key :f0] (hash key),2.2e-05,,,,
1.7.10,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.2e-05,,,,
1.7.10,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.10,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.12,,,,
1.7.10,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.03,,,,
1.7.10,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.75,,,,
1.7.10,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.06,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (:f0 coll),6.3e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (get coll :f0),5.5e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.4e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000244,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000418,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),87.0,,,,
1.7.10,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000165,,,,
1.7.10,V8,set ops,[] #{},3e-06,,,,
1.7.10,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.10,V8,set ops,[v [1 2 3]] (set v),0.000301,,,,
1.7.10,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000274,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (get coll 2),6.6e-05,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.4e-05,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (coll 2),7.3e-05,,,,
1.7.10,V8,seq ops,[coll (range 500000)] (reduce + coll),25.0,,,,
1.7.10,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.04,,,,
1.7.10,V8,reader,[s big-str-data] (reader/read-string s),0.754,,,,
1.7.10,V8,range,[r (range 1000000)] (last r),40.0,,,,
1.7.10,V8,lazy-seq - first run,[r r] (last r),526.0,,,,
1.7.10,V8,lazy-seq - second run,[r r] (last r),92.0,,,,
1.7.10,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.479,,,,
1.7.10,SM,identity,[x 1] (identity x),8.2e-06,,,,
1.7.10,SM,symbol construction,[] (symbol (quote foo)),0.00037,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.09,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.7.10,SM,instance?,[coll []] (instance? PersistentVector coll),1.5e-05,,,,
1.7.10,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.7e-05,,,,
1.7.10,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.7.10,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.00051,,,,
1.7.10,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001457,,,,
1.7.10,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000833,,,,
1.7.10,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001299,,,,
1.7.10,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000177,,,,
1.7.10,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000871,,,,
1.7.10,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000427,,,,
1.7.10,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001835,,,,
1.7.10,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (first coll),0.000103,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (-first coll),6.6e-05,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (rest coll),9.6e-05,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (-rest coll),8.5e-05,,,,
1.7.10,SM,list ops,[] (list),1.1e-05,,,,
1.7.10,SM,list ops,[] (list 1 2 3),0.00127,,,,
1.7.10,SM,vector ops,[] [],9e-06,,,,
1.7.10,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000557,,,,
1.7.10,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000644,,,,
1.7.10,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000502,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (transient coll),0.00179,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000216,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000215,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (coll 0),0.000195,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000867,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000887,,,,
1.7.10,SM,vector ops,[coll []] (-conj coll 1),0.000751,,,,
1.7.10,SM,vector ops,[coll [1]] (-conj coll 2),0.000778,,,,
1.7.10,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000818,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (seq coll),0.000678,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000345,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000191,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000175,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000199,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000198,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000253,,,,
1.7.10,SM,large vector ops,[] (reduce conj [] (range 40000)),8.1,,,,
1.7.10,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00173,,,,
1.7.10,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00252,,,,
1.7.10,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00175,,,,
1.7.10,SM,chunked seqs,[] (-first v),0.000181,,,,
1.7.10,SM,chunked seqs,[] (-next v),0.000182,,,,
1.7.10,SM,chunked seqs,[] (-rest v),0.000187,,,,
1.7.10,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.10,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.53,,,,
1.7.10,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.23,,,,
1.7.10,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),79.0,,,,
1.7.10,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.10,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.7.10,SM,apply,[coll (into [] (range 1000000))] (apply + coll),47.0,,,,
1.7.10,SM,apply,[] (list 1 2 3 4 5),0.00037,,,,
1.7.10,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000322,,,,
1.7.10,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000373,,,,
1.7.10,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000376,,,,
1.7.10,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000377,,,,
1.7.10,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000833,,,,
1.7.10,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000411,,,,
1.7.10,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000383,,,,
1.7.10,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000414,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000199,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00234,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000191,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000191,,,,
1.7.10,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002785,,,,
1.7.10,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000262,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000224,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000347,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000221,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000245,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000272,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000221,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00034,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000221,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000237,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.00083,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000483,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.001012,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.00048,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000486,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000228,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000479,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000218,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000481,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000203,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000524,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.00022,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000223,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",183.0,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000187,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000186,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000229,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000232,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),250.0,,,,
1.7.10,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00349,,,,
1.7.10,SM,persistent hash maps,[key :f0] (hash key),0.000191,,,,
1.7.10,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000182,,,,
1.7.10,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000183,,,,
1.7.10,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.58,,,,
1.7.10,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.26,,,,
1.7.10,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.07,,,,
1.7.10,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.77,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000241,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000237,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000212,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000262,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000602,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000557,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),306.0,,,,
1.7.10,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000282,,,,
1.7.10,SM,set ops,[] #{},0.000164,,,,
1.7.10,SM,set ops,[] #{1 3 2},0.000155,,,,
1.7.10,SM,set ops,[v [1 2 3]] (set v),0.000381,,,,
1.7.10,SM,set ops,[] (hash-set 1 2 3),0.000156,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000416,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000219,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000213,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (coll 2),0.000213,,,,
1.7.10,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.7.10,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.097,,,,
1.7.10,SM,reader,[s big-str-data] (reader/read-string s),1.757,,,,
1.7.10,SM,range,[r (range 1000000)] (last r),48.0,,,,
1.7.10,SM,lazy-seq - first run,[r r] (last r),425.0,,,,
1.7.10,SM,lazy-seq - second run,[r r] (last r),59.0,,,,
1.7.10,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.589,,,,
1.7.10,JSC,identity,[x 1] (identity x),1.645e-05,,,,
1.7.10,JSC,symbol construction,[] (symbol (quote foo)),0.000178,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.1,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.1,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.10,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.7.10,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.4e-05,,,,
1.7.10,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.7.10,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000144,,,,
1.7.10,JSC,array & string ops,"[coll ""foobar""] (seq coll)",0.000211,,,,
1.7.10,JSC,array & string ops,[coll (array 1 2 3)] (first coll),8.2e-05,,,,
1.7.10,JSC,array & string ops,"[coll ""foobar""] (first coll)",9.9e-05,,,,
1.7.10,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),5.2e-05,,,,
1.7.10,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.7e-05,,,,
1.7.10,JSC,cloning & specify,[coll [1 2 3]] (clone coll),5.4e-05,,,,
1.7.10,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000222,,,,
1.7.10,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (first coll),4.7e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (-first coll),4.1e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.10,JSC,list ops,[] (list),3.2e-05,,,,
1.7.10,JSC,list ops,[] (list 1 2 3),9.6e-05,,,,
1.7.10,JSC,vector ops,[] [],3.8e-05,,,,
1.7.10,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.9e-05,,,,
1.7.10,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000103,,,,
1.7.10,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000102,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00028,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),5.2e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),5.5e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (coll 0),0.000136,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.5e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.9e-05,,,,
1.7.10,JSC,vector ops,[coll []] (-conj coll 1),8.2e-05,,,,
1.7.10,JSC,vector ops,[coll [1]] (-conj coll 2),8.8e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2]] (-conj coll 3),8.4e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (seq coll),6.5e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-seq coll),6.2e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (first coll),6e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.3e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),5.4e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),6.2e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (next coll),6.3e-05,,,,
1.7.10,JSC,large vector ops,[] (reduce conj [] (range 40000)),6.1,,,,
1.7.10,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00052,,,,
1.7.10,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00063,,,,
1.7.10,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00027,,,,
1.7.10,JSC,chunked seqs,[] (-first v),5e-05,,,,
1.7.10,JSC,chunked seqs,[] (-next v),6.5e-05,,,,
1.7.10,JSC,chunked seqs,[] (-rest v),7.1e-05,,,,
1.7.10,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),17.0,,,,
1.7.10,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.93,,,,
1.7.10,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),7.62,,,,
1.7.10,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),48.0,,,,
1.7.10,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.10,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),10.0,,,,
1.7.10,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),42.0,,,,
1.7.10,JSC,apply,[] (list 1 2 3 4 5),0.000167,,,,
1.7.10,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000168,,,,
1.7.10,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000239,,,,
1.7.10,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000171,,,,
1.7.10,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000181,,,,
1.7.10,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000505,,,,
1.7.10,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000238,,,,
1.7.10,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000223,,,,
1.7.10,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000306,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5.9e-05,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001089,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),5.8e-05,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),5.7e-05,,,,
1.7.10,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001214,,,,
1.7.10,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000112,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),7.4e-05,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000113,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7e-05,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000105,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00012,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.9e-05,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.8e-05,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000158,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),9.4e-05,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000162,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),9.6e-05,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.9e-05,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.6e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",8.8e-05,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",8.5e-05,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000127,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.6e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.5e-05,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.6e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),75.0,,,,
1.7.10,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00212,,,,
1.7.10,JSC,persistent hash maps,[key :f0] (hash key),5.3e-05,,,,
1.7.10,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.5e-05,,,,
1.7.10,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.5e-05,,,,
1.7.10,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.34,,,,
1.7.10,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.7.10,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.65,,,,
1.7.10,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.64,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.6e-05,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.1e-05,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8e-05,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000105,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000166,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000233,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),117.0,,,,
1.7.10,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000144,,,,
1.7.10,JSC,set ops,[] #{},4.1e-05,,,,
1.7.10,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.7.10,JSC,set ops,[v [1 2 3]] (set v),0.000355,,,,
1.7.10,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000154,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.1e-05,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.5e-05,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.7.10,JSC,seq ops,[coll (range 500000)] (reduce + coll),24.0,,,,
1.7.10,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.025,,,,
1.7.10,JSC,reader,[s big-str-data] (reader/read-string s),0.635,,,,
1.7.10,JSC,range,[r (range 1000000)] (last r),25.0,,,,
1.7.10,JSC,lazy-seq - first run,[r r] (last r),200.0,,,,
1.7.10,JSC,lazy-seq - second run,[r r] (last r),64.0,,,,
1.7.10,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.656,,,,
