Version,Engine,Section,Name,Mean,Deviation,MOE,RME,SEM
1.9.36,V8,identity,[x 1] (identity x),9.11e-06,,,,
1.9.36,V8,symbol construction,[] (symbol (quote foo)),2.2e-05,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.23,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.2,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.9.36,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.08,,,,
1.9.36,V8,instance?,[coll []] (instance? PersistentVector coll),0.000527,,,,
1.9.36,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.00051,,,,
1.9.36,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000511,,,,
1.9.36,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.7e-05,,,,
1.9.36,V8,array & string ops,"[coll ""foobar""] (seq coll)",0.0001,,,,
1.9.36,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.5e-05,,,,
1.9.36,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000117,,,,
1.9.36,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.9.36,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.9.36,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.5e-05,,,,
1.9.36,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000573,,,,
1.9.36,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.6e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (first coll),1.9e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (-first coll),1.7e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.9.36,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.9.36,V8,list ops,[] (list),4e-06,,,,
1.9.36,V8,list ops,[] (list 1 2 3),0.000557,,,,
1.9.36,V8,vector ops,[] [],4e-06,,,,
1.9.36,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000578,,,,
1.9.36,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000599,,,,
1.9.36,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000566,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.1e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (coll 0),0.000511,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.9.36,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.9.36,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.9.36,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.9.36,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.9.36,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.5e-05,,,,
1.9.36,V8,large vector ops,[] (reduce conj [] (range 40000)),6.8,,,,
1.9.36,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00029,,,,
1.9.36,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0007,,,,
1.9.36,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.9.36,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.9.36,V8,chunked seqs,[] (-next v),3e-05,,,,
1.9.36,V8,chunked seqs,[] (-rest v),3e-05,,,,
1.9.36,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),554.0,,,,
1.9.36,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),34.0,,,,
1.9.36,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.17,,,,
1.9.36,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.7,,,,
1.9.36,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),79.0,,,,
1.9.36,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),16.0,,,,
1.9.36,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),21.0,,,,
1.9.36,V8,apply,[coll (into [] (range 1000000))] (apply + coll),64.0,,,,
1.9.36,V8,apply,[] (list 1 2 3 4 5),0.000127,,,,
1.9.36,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000139,,,,
1.9.36,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000429,,,,
1.9.36,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000142,,,,
1.9.36,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.00025,,,,
1.9.36,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000811,,,,
1.9.36,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000329,,,,
1.9.36,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000312,,,,
1.9.36,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000253,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001543,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.9.36,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.9.36,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001146,,,,
1.9.36,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.2e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),7.9e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.9.36,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.6e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),8.8e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.8e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000101,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.3e-05,,,,
1.9.36,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.9e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000101,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8.3e-05,,,,
1.9.36,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.9e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.4e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.6e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.8e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.3e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000101,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.8e-05,,,,
1.9.36,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.6e-05,,,,
1.9.36,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.9e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.8e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.7e-05,,,,
1.9.36,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.9.36,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00326,,,,
1.9.36,V8,persistent hash maps,[key :f0] (hash key),2.4e-05,,,,
1.9.36,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.9.36,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.9.36,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.15,,,,
1.9.36,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.05,,,,
1.9.36,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.78,,,,
1.9.36,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.99,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (:f0 coll),6.8e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (get coll :f0),5e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.2e-05,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000324,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000342,,,,
1.9.36,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),81.0,,,,
1.9.36,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000104,,,,
1.9.36,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),69.0,,,,
1.9.36,V8,set ops,[] #{},4e-06,,,,
1.9.36,V8,set ops,[] #{1 3 2},4e-06,,,,
1.9.36,V8,set ops,[v [1 2 3]] (set v),0.000353,,,,
1.9.36,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000271,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (get coll 2),7.8e-05,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.9.36,V8,set ops,[coll #{1 3 2}] (coll 2),7.3e-05,,,,
1.9.36,V8,seq ops,[coll (range 500000)] (reduce + coll),24.0,,,,
1.9.36,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.023,,,,
1.9.36,V8,reader,[s big-str-data] (reader/read-string s),0.737,,,,
1.9.36,V8,range,[r (range 1000000)] (last r),41.0,,,,
1.9.36,V8,lazy-seq - first run,[r r] (last r),422.0,,,,
1.9.36,V8,lazy-seq - second run,[r r] (last r),103.0,,,,
1.9.36,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.499,,,,
1.9.36,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.131,,,,
1.9.36,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),335.0,,,,
1.9.36,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.5,,,,
1.9.36,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),47.75,,,,
1.9.36,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.9.36,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),94.0,,,,
1.9.36,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),117.0,,,,
1.9.36,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2333.0,,,,
1.9.36,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1638.0,,,,
1.9.36,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),86.0,,,,
1.9.36,V8,multimethods,[] (simple-multi :foo),0.000157,,,,
1.9.36,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00013,,,,
1.9.36,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00037,,,,
1.9.36,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00116,,,,
1.9.36,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),155.4,,,,
1.9.36,SM,identity,[x 1] (identity x),8.3e-06,,,,
1.9.36,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.57,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.09,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.9.36,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.9.36,SM,instance?,[coll []] (instance? PersistentVector coll),1.8e-05,,,,
1.9.36,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.9.36,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3.2e-05,,,,
1.9.36,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000498,,,,
1.9.36,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001226,,,,
1.9.36,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000806,,,,
1.9.36,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001357,,,,
1.9.36,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.00018,,,,
1.9.36,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000854,,,,
1.9.36,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000451,,,,
1.9.36,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00194,,,,
1.9.36,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (first coll),0.00011,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (-first coll),7.5e-05,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (rest coll),7.4e-05,,,,
1.9.36,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.9.36,SM,list ops,[] (list),9e-06,,,,
1.9.36,SM,list ops,[] (list 1 2 3),0.001218,,,,
1.9.36,SM,vector ops,[] [],1.1e-05,,,,
1.9.36,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000562,,,,
1.9.36,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000647,,,,
1.9.36,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000492,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (transient coll),0.00188,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000227,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000195,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000168,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (coll 0),0.00019,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000868,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000969,,,,
1.9.36,SM,vector ops,[coll []] (-conj coll 1),0.000735,,,,
1.9.36,SM,vector ops,[coll [1]] (-conj coll 2),0.00077,,,,
1.9.36,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000796,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (seq coll),0.000533,,,,
1.9.36,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000404,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.5e-05,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (-first coll),7.8e-05,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000481,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000181,,,,
1.9.36,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000191,,,,
1.9.36,SM,large vector ops,[] (reduce conj [] (range 40000)),8.3,,,,
1.9.36,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00173,,,,
1.9.36,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00257,,,,
1.9.36,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00182,,,,
1.9.36,SM,chunked seqs,[] (-first v),0.000179,,,,
1.9.36,SM,chunked seqs,[] (-next v),0.000193,,,,
1.9.36,SM,chunked seqs,[] (-rest v),0.000189,,,,
1.9.36,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),236.0,,,,
1.9.36,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.9.36,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.57,,,,
1.9.36,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.07,,,,
1.9.36,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),79.0,,,,
1.9.36,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),12.0,,,,
1.9.36,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.9.36,SM,apply,[coll (into [] (range 1000000))] (apply + coll),43.0,,,,
1.9.36,SM,apply,[] (list 1 2 3 4 5),0.000403,,,,
1.9.36,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000364,,,,
1.9.36,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000384,,,,
1.9.36,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000365,,,,
1.9.36,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000377,,,,
1.9.36,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000814,,,,
1.9.36,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000399,,,,
1.9.36,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000386,,,,
1.9.36,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00044,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000195,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002259,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000194,,,,
1.9.36,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000193,,,,
1.9.36,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002531,,,,
1.9.36,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000268,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000223,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000332,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000226,,,,
1.9.36,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000226,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000277,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000232,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000404,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000245,,,,
1.9.36,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.00025,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000271,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000221,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000463,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000248,,,,
1.9.36,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000242,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000236,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000222,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000223,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000219,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000211,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000246,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000218,,,,
1.9.36,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000226,,,,
1.9.36,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",183.0,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000195,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000189,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000239,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000236,,,,
1.9.36,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),254.0,,,,
1.9.36,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00353,,,,
1.9.36,SM,persistent hash maps,[key :f0] (hash key),0.000187,,,,
1.9.36,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000183,,,,
1.9.36,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000193,,,,
1.9.36,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.51,,,,
1.9.36,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.2,,,,
1.9.36,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.04,,,,
1.9.36,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.23,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000254,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000245,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000224,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000271,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000609,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000558,,,,
1.9.36,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),295.0,,,,
1.9.36,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000305,,,,
1.9.36,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),501.0,,,,
1.9.36,SM,set ops,[] #{},0.000158,,,,
1.9.36,SM,set ops,[] #{1 3 2},0.000146,,,,
1.9.36,SM,set ops,[v [1 2 3]] (set v),0.0004,,,,
1.9.36,SM,set ops,[] (hash-set 1 2 3),0.000143,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000395,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000217,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000191,,,,
1.9.36,SM,set ops,[coll #{1 3 2}] (coll 2),0.000207,,,,
1.9.36,SM,seq ops,[coll (range 500000)] (reduce + coll),14.0,,,,
1.9.36,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.084,,,,
1.9.36,SM,reader,[s big-str-data] (reader/read-string s),1.76,,,,
1.9.36,SM,range,[r (range 1000000)] (last r),47.0,,,,
1.9.36,SM,lazy-seq - first run,[r r] (last r),450.0,,,,
1.9.36,SM,lazy-seq - second run,[r r] (last r),54.0,,,,
1.9.36,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.611,,,,
1.9.36,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.426,,,,
1.9.36,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),224.0,,,,
1.9.36,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),41.75,,,,
1.9.36,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),209.5,,,,
1.9.36,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),124.0,,,,
1.9.36,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),27.0,,,,
1.9.36,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.9.36,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),243.0,,,,
1.9.36,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1532.0,,,,
1.9.36,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.9.36,SM,multimethods,[] (simple-multi :foo),0.000326,,,,
1.9.36,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00365,,,,
1.9.36,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00207,,,,
1.9.36,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00285,,,,
1.9.36,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),199.9,,,,
1.9.36,JSC,identity,[x 1] (identity x),1.197e-05,,,,
1.9.36,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.65,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.62,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.05,,,,
1.9.36,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.9.36,JSC,instance?,[coll []] (instance? PersistentVector coll),5.2e-05,,,,
1.9.36,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.9.36,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.9.36,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000138,,,,
1.9.36,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.7e-05,,,,
1.9.36,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000184,,,,
1.9.36,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.4e-05,,,,
1.9.36,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.9.36,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.9.36,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.2e-05,,,,
1.9.36,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000217,,,,
1.9.36,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (first coll),5e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.9.36,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.9.36,JSC,list ops,[] (list),3.2e-05,,,,
1.9.36,JSC,list ops,[] (list 1 2 3),9.8e-05,,,,
1.9.36,JSC,vector ops,[] [],3.7e-05,,,,
1.9.36,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.8e-05,,,,
1.9.36,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000106,,,,
1.9.36,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.7e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.6e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (coll 0),5.8e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (conj coll 4),0.00022,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.9.36,JSC,vector ops,[coll []] (-conj coll 1),7.4e-05,,,,
1.9.36,JSC,vector ops,[coll [1]] (-conj coll 2),7.6e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.6e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (seq coll),5.5e-05,,,,
1.9.36,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.3e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),5.5e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.5e-05,,,,
1.9.36,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.9.36,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.3,,,,
1.9.36,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.9.36,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00057,,,,
1.9.36,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.9.36,JSC,chunked seqs,[] (-first v),5.3e-05,,,,
1.9.36,JSC,chunked seqs,[] (-next v),6.1e-05,,,,
1.9.36,JSC,chunked seqs,[] (-rest v),6.3e-05,,,,
1.9.36,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),74.0,,,,
1.9.36,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.9.36,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.17,,,,
1.9.36,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.62,,,,
1.9.36,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),29.0,,,,
1.9.36,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.9.36,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),10.0,,,,
1.9.36,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),39.0,,,,
1.9.36,JSC,apply,[] (list 1 2 3 4 5),0.000191,,,,
1.9.36,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000162,,,,
1.9.36,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00023,,,,
1.9.36,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000162,,,,
1.9.36,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000174,,,,
1.9.36,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000499,,,,
1.9.36,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000227,,,,
1.9.36,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.00022,,,,
1.9.36,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00029,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000912,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.8e-05,,,,
1.9.36,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.9.36,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001031,,,,
1.9.36,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000102,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000104,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.9.36,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000107,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.00011,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.5e-05,,,,
1.9.36,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.2e-05,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000105,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000111,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.9.36,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.4e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.6e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",6.1e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000121,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.7e-05,,,,
1.9.36,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.2e-05,,,,
1.9.36,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.6e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.8e-05,,,,
1.9.36,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),71.0,,,,
1.9.36,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00196,,,,
1.9.36,JSC,persistent hash maps,[key :f0] (hash key),5.3e-05,,,,
1.9.36,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",5e-05,,,,
1.9.36,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.7e-05,,,,
1.9.36,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.3,,,,
1.9.36,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.9.36,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.65,,,,
1.9.36,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.62,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000101,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.5e-05,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.5e-05,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000108,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000171,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000241,,,,
1.9.36,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),127.0,,,,
1.9.36,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000143,,,,
1.9.36,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),43.0,,,,
1.9.36,JSC,set ops,[] #{},3.8e-05,,,,
1.9.36,JSC,set ops,[] #{1 3 2},3.5e-05,,,,
1.9.36,JSC,set ops,[v [1 2 3]] (set v),0.000351,,,,
1.9.36,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000161,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.7e-05,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.9.36,JSC,set ops,[coll #{1 3 2}] (coll 2),0.0001,,,,
1.9.36,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.9.36,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.9.36,JSC,reader,[s big-str-data] (reader/read-string s),0.615,,,,
1.9.36,JSC,range,[r (range 1000000)] (last r),25.0,,,,
1.9.36,JSC,lazy-seq - first run,[r r] (last r),193.0,,,,
1.9.36,JSC,lazy-seq - second run,[r r] (last r),64.0,,,,
1.9.36,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.643,,,,
1.9.36,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.197,,,,
1.9.36,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),151.0,,,,
1.9.36,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.75,,,,
1.9.36,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.5,,,,
1.9.36,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.9.36,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),44.0,,,,
1.9.36,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),49.0,,,,
1.9.36,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),90.0,,,,
1.9.36,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),770.0,,,,
1.9.36,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),48.0,,,,
1.9.36,JSC,multimethods,[] (simple-multi :foo),0.00039,,,,
1.9.36,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00011,,,,
1.9.36,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00032,,,,
1.9.36,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00166,,,,
1.9.36,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),99.1,,,,
1.9.35,V8,identity,[x 1] (identity x),9.12e-06,,,,
1.9.35,V8,symbol construction,[] (symbol (quote foo)),2.8e-05,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.26,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.19,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.9.35,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.9.35,V8,instance?,[coll []] (instance? PersistentVector coll),0.00052,,,,
1.9.35,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000515,,,,
1.9.35,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000509,,,,
1.9.35,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.7e-05,,,,
1.9.35,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.8e-05,,,,
1.9.35,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.9.35,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000114,,,,
1.9.35,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.9.35,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.9e-05,,,,
1.9.35,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.5e-05,,,,
1.9.35,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000579,,,,
1.9.35,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (first coll),2e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (-first coll),2.1e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (rest coll),1.7e-05,,,,
1.9.35,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.9.35,V8,list ops,[] (list),3e-06,,,,
1.9.35,V8,list ops,[] (list 1 2 3),0.00057,,,,
1.9.35,V8,vector ops,[] [],4e-06,,,,
1.9.35,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000585,,,,
1.9.35,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000573,,,,
1.9.35,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000567,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (transient coll),0.00025,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.1e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.2e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.7e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (coll 0),0.000512,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.9.35,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.9.35,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.9.35,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.9.35,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.7e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.9.35,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.5e-05,,,,
1.9.35,V8,large vector ops,[] (reduce conj [] (range 40000)),6.7,,,,
1.9.35,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.0003,,,,
1.9.35,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0007,,,,
1.9.35,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.9.35,V8,chunked seqs,[] (-first v),1.7e-05,,,,
1.9.35,V8,chunked seqs,[] (-next v),3e-05,,,,
1.9.35,V8,chunked seqs,[] (-rest v),3e-05,,,,
1.9.35,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),556.0,,,,
1.9.35,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),38.0,,,,
1.9.35,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.15,,,,
1.9.35,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.46,,,,
1.9.35,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.9.35,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.9.35,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),22.0,,,,
1.9.35,V8,apply,[coll (into [] (range 1000000))] (apply + coll),78.0,,,,
1.9.35,V8,apply,[] (list 1 2 3 4 5),0.000156,,,,
1.9.35,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000142,,,,
1.9.35,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000444,,,,
1.9.35,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000142,,,,
1.9.35,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000236,,,,
1.9.35,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.00083,,,,
1.9.35,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000331,,,,
1.9.35,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000316,,,,
1.9.35,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000247,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.6e-05,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001355,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.9.35,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.9.35,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001145,,,,
1.9.35,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.5e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.2e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.3e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.9.35,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.8e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.2e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000101,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.3e-05,,,,
1.9.35,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.4e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.8e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),7.3e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),9.7e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.6e-05,,,,
1.9.35,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.6e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.7e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.2e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.5e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.6e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.2e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000104,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.3e-05,,,,
1.9.35,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.9.35,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.4e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.4e-05,,,,
1.9.35,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.9.35,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00308,,,,
1.9.35,V8,persistent hash maps,[key :f0] (hash key),2.1e-05,,,,
1.9.35,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.6e-05,,,,
1.9.35,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.9.35,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.26,,,,
1.9.35,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.17,,,,
1.9.35,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.78,,,,
1.9.35,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.0,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (:f0 coll),6.8e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (get coll :f0),5.1e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.7e-05,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000258,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000342,,,,
1.9.35,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),83.0,,,,
1.9.35,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000109,,,,
1.9.35,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),64.0,,,,
1.9.35,V8,set ops,[] #{},4e-06,,,,
1.9.35,V8,set ops,[] #{1 3 2},4e-06,,,,
1.9.35,V8,set ops,[v [1 2 3]] (set v),0.000303,,,,
1.9.35,V8,set ops,[] (hash-set 1 2 3),3e-06,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000272,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (get coll 2),6.7e-05,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (contains? coll 2),5.1e-05,,,,
1.9.35,V8,set ops,[coll #{1 3 2}] (coll 2),7.4e-05,,,,
1.9.35,V8,seq ops,[coll (range 500000)] (reduce + coll),30.0,,,,
1.9.35,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.026,,,,
1.9.35,V8,reader,[s big-str-data] (reader/read-string s),0.755,,,,
1.9.35,V8,range,[r (range 1000000)] (last r),37.0,,,,
1.9.35,V8,lazy-seq - first run,[r r] (last r),425.0,,,,
1.9.35,V8,lazy-seq - second run,[r r] (last r),82.0,,,,
1.9.35,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.469,,,,
1.9.35,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.138,,,,
1.9.35,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),327.0,,,,
1.9.35,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),87.5,,,,
1.9.35,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),48.5,,,,
1.9.35,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.9.35,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),96.0,,,,
1.9.35,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),110.0,,,,
1.9.35,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1826.0,,,,
1.9.35,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1680.0,,,,
1.9.35,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),81.0,,,,
1.9.35,V8,multimethods,[] (simple-multi :foo),0.000155,,,,
1.9.35,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.9.35,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00036,,,,
1.9.35,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00114,,,,
1.9.35,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),126.6,,,,
1.9.35,SM,identity,[x 1] (identity x),9.28e-06,,,,
1.9.35,SM,symbol construction,[] (symbol (quote foo)),4.6e-05,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.07,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.9.35,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.9.35,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.9.35,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.9.35,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.9.35,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000526,,,,
1.9.35,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001256,,,,
1.9.35,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000711,,,,
1.9.35,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001188,,,,
1.9.35,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000178,,,,
1.9.35,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000856,,,,
1.9.35,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000479,,,,
1.9.35,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001854,,,,
1.9.35,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.2e-05,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (first coll),0.000111,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (-first coll),7.5e-05,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (rest coll),7.3e-05,,,,
1.9.35,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.5e-05,,,,
1.9.35,SM,list ops,[] (list),8e-06,,,,
1.9.35,SM,list ops,[] (list 1 2 3),0.001244,,,,
1.9.35,SM,vector ops,[] [],9e-06,,,,
1.9.35,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000571,,,,
1.9.35,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000667,,,,
1.9.35,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000515,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (transient coll),0.0019,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000165,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000167,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (coll 0),0.000189,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000879,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000972,,,,
1.9.35,SM,vector ops,[coll []] (-conj coll 1),0.000828,,,,
1.9.35,SM,vector ops,[coll [1]] (-conj coll 2),0.000815,,,,
1.9.35,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000834,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (seq coll),0.000537,,,,
1.9.35,SM,vector ops,[coll [1 2 3]] (-seq coll),0.00042,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.5e-05,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (-first coll),7.7e-05,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000399,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000189,,,,
1.9.35,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000194,,,,
1.9.35,SM,large vector ops,[] (reduce conj [] (range 40000)),7.9,,,,
1.9.35,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00176,,,,
1.9.35,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00257,,,,
1.9.35,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00181,,,,
1.9.35,SM,chunked seqs,[] (-first v),0.000179,,,,
1.9.35,SM,chunked seqs,[] (-next v),0.000195,,,,
1.9.35,SM,chunked seqs,[] (-rest v),0.000191,,,,
1.9.35,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),234.0,,,,
1.9.35,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.9.35,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.66,,,,
1.9.35,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.5,,,,
1.9.35,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.9.35,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),12.0,,,,
1.9.35,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),4.0,,,,
1.9.35,SM,apply,[coll (into [] (range 1000000))] (apply + coll),44.0,,,,
1.9.35,SM,apply,[] (list 1 2 3 4 5),0.000368,,,,
1.9.35,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000336,,,,
1.9.35,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000388,,,,
1.9.35,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000362,,,,
1.9.35,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000391,,,,
1.9.35,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000816,,,,
1.9.35,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000405,,,,
1.9.35,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000353,,,,
1.9.35,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000398,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000203,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002494,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.0002,,,,
1.9.35,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000195,,,,
1.9.35,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002833,,,,
1.9.35,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000267,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000225,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000366,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000232,,,,
1.9.35,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000229,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000282,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000234,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000353,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000244,,,,
1.9.35,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000247,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000273,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000221,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000351,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000232,,,,
1.9.35,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000243,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.00024,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000223,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000225,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000225,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000213,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000254,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000217,,,,
1.9.35,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000232,,,,
1.9.35,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",182.0,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000207,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000201,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000239,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000237,,,,
1.9.35,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),252.0,,,,
1.9.35,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00351,,,,
1.9.35,SM,persistent hash maps,[key :f0] (hash key),0.000182,,,,
1.9.35,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.00018,,,,
1.9.35,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.00019,,,,
1.9.35,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.57,,,,
1.9.35,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.27,,,,
1.9.35,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.03,,,,
1.9.35,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.4,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000248,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000241,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000221,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.00026,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000617,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000561,,,,
1.9.35,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),343.0,,,,
1.9.35,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000306,,,,
1.9.35,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),515.0,,,,
1.9.35,SM,set ops,[] #{},0.000162,,,,
1.9.35,SM,set ops,[] #{1 3 2},0.000157,,,,
1.9.35,SM,set ops,[v [1 2 3]] (set v),0.000402,,,,
1.9.35,SM,set ops,[] (hash-set 1 2 3),0.000148,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000391,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000234,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000212,,,,
1.9.35,SM,set ops,[coll #{1 3 2}] (coll 2),0.00021,,,,
1.9.35,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.9.35,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.082,,,,
1.9.35,SM,reader,[s big-str-data] (reader/read-string s),1.767,,,,
1.9.35,SM,range,[r (range 1000000)] (last r),48.0,,,,
1.9.35,SM,lazy-seq - first run,[r r] (last r),456.0,,,,
1.9.35,SM,lazy-seq - second run,[r r] (last r),62.0,,,,
1.9.35,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.611,,,,
1.9.35,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.453,,,,
1.9.35,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),212.0,,,,
1.9.35,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.25,,,,
1.9.35,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),208.0,,,,
1.9.35,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),122.25,,,,
1.9.35,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),30.0,,,,
1.9.35,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.9.35,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),246.0,,,,
1.9.35,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1531.0,,,,
1.9.35,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.9.35,SM,multimethods,[] (simple-multi :foo),0.000319,,,,
1.9.35,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00376,,,,
1.9.35,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00218,,,,
1.9.35,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00288,,,,
1.9.35,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),208.0,,,,
1.9.35,JSC,identity,[x 1] (identity x),8.54e-06,,,,
1.9.35,JSC,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.65,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.64,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.9.35,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.9.35,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.9.35,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.9.35,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.9.35,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000136,,,,
1.9.35,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.7e-05,,,,
1.9.35,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000182,,,,
1.9.35,JSC,array & string ops,"[coll ""foobar""] (first coll)",8e-05,,,,
1.9.35,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.9.35,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.2e-05,,,,
1.9.35,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7e-05,,,,
1.9.35,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000221,,,,
1.9.35,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),4e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (first coll),4.5e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.9.35,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.9.35,JSC,list ops,[] (list),3.5e-05,,,,
1.9.35,JSC,list ops,[] (list 1 2 3),0.000102,,,,
1.9.35,JSC,vector ops,[] [],3.4e-05,,,,
1.9.35,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000102,,,,
1.9.35,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000105,,,,
1.9.35,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.0001,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.5e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),5e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (conj coll 4),9e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8.1e-05,,,,
1.9.35,JSC,vector ops,[coll []] (-conj coll 1),7.7e-05,,,,
1.9.35,JSC,vector ops,[coll [1]] (-conj coll 2),8.3e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2]] (-conj coll 3),8e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (seq coll),5.9e-05,,,,
1.9.35,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.2e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.2e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.7e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000182,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.5e-05,,,,
1.9.35,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.9.35,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.3,,,,
1.9.35,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00037,,,,
1.9.35,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.9.35,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.9.35,JSC,chunked seqs,[] (-first v),5.5e-05,,,,
1.9.35,JSC,chunked seqs,[] (-next v),0.000192,,,,
1.9.35,JSC,chunked seqs,[] (-rest v),6.1e-05,,,,
1.9.35,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),66.0,,,,
1.9.35,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.9.35,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.08,,,,
1.9.35,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.65,,,,
1.9.35,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),26.0,,,,
1.9.35,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.9.35,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.9.35,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),39.0,,,,
1.9.35,JSC,apply,[] (list 1 2 3 4 5),0.000184,,,,
1.9.35,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000161,,,,
1.9.35,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000235,,,,
1.9.35,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000169,,,,
1.9.35,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000174,,,,
1.9.35,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000509,,,,
1.9.35,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000238,,,,
1.9.35,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000214,,,,
1.9.35,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000273,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001073,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.9.35,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.9.35,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001051,,,,
1.9.35,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000104,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000107,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.7e-05,,,,
1.9.35,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000102,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.5e-05,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000108,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.4e-05,,,,
1.9.35,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.9e-05,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000101,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000108,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.3e-05,,,,
1.9.35,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.8e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",7e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000122,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8.1e-05,,,,
1.9.35,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.2e-05,,,,
1.9.35,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.5e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.8e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.2e-05,,,,
1.9.35,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.9.35,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00197,,,,
1.9.35,JSC,persistent hash maps,[key :f0] (hash key),5.6e-05,,,,
1.9.35,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.5e-05,,,,
1.9.35,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.8e-05,,,,
1.9.35,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.33,,,,
1.9.35,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.9.35,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.7,,,,
1.9.35,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.68,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.0001,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.4e-05,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.1e-05,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000112,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000173,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000238,,,,
1.9.35,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),127.0,,,,
1.9.35,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000137,,,,
1.9.35,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),48.0,,,,
1.9.35,JSC,set ops,[] #{},3.8e-05,,,,
1.9.35,JSC,set ops,[] #{1 3 2},3.6e-05,,,,
1.9.35,JSC,set ops,[v [1 2 3]] (set v),0.000346,,,,
1.9.35,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000155,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.9e-05,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.9.35,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.9.35,JSC,seq ops,[coll (range 500000)] (reduce + coll),22.0,,,,
1.9.35,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.02,,,,
1.9.35,JSC,reader,[s big-str-data] (reader/read-string s),0.631,,,,
1.9.35,JSC,range,[r (range 1000000)] (last r),27.0,,,,
1.9.35,JSC,lazy-seq - first run,[r r] (last r),203.0,,,,
1.9.35,JSC,lazy-seq - second run,[r r] (last r),66.0,,,,
1.9.35,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.639,,,,
1.9.35,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.199,,,,
1.9.35,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),147.0,,,,
1.9.35,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),40.0,,,,
1.9.35,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.25,,,,
1.9.35,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.25,,,,
1.9.35,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),46.0,,,,
1.9.35,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),50.0,,,,
1.9.35,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),95.0,,,,
1.9.35,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),769.0,,,,
1.9.35,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),46.0,,,,
1.9.35,JSC,multimethods,[] (simple-multi :foo),0.00038,,,,
1.9.35,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00014,,,,
1.9.35,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00031,,,,
1.9.35,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00082,,,,
1.9.35,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),113.7,,,,
1.9.14,V8,identity,[x 1] (identity x),9.23e-06,,,,
1.9.14,V8,symbol construction,[] (symbol (quote foo)),2.5e-05,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.24,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.23,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.9.14,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.1,,,,
1.9.14,V8,instance?,[coll []] (instance? PersistentVector coll),0.000519,,,,
1.9.14,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000507,,,,
1.9.14,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000507,,,,
1.9.14,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.8e-05,,,,
1.9.14,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.3e-05,,,,
1.9.14,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.9.14,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000113,,,,
1.9.14,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.9.14,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.9.14,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.6e-05,,,,
1.9.14,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000572,,,,
1.9.14,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (first coll),1.9e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (-first coll),2.1e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.9.14,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.9.14,V8,list ops,[] (list),4e-06,,,,
1.9.14,V8,list ops,[] (list 1 2 3),0.000552,,,,
1.9.14,V8,vector ops,[] [],4e-06,,,,
1.9.14,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000566,,,,
1.9.14,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000558,,,,
1.9.14,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000567,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (coll 0),0.000512,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.9e-05,,,,
1.9.14,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.9.14,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.9.14,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.9.14,V8,vector ops,[coll [1 2 3]] (-seq coll),2.6e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.7e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.2e-05,,,,
1.9.14,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.8e-05,,,,
1.9.14,V8,large vector ops,[] (reduce conj [] (range 40000)),6.7,,,,
1.9.14,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.9.14,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00067,,,,
1.9.14,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.9.14,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.9.14,V8,chunked seqs,[] (-next v),2.9e-05,,,,
1.9.14,V8,chunked seqs,[] (-rest v),3.8e-05,,,,
1.9.14,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),560.0,,,,
1.9.14,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),34.0,,,,
1.9.14,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.18,,,,
1.9.14,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.36,,,,
1.9.14,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.9.14,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.9.14,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),21.0,,,,
1.9.14,V8,apply,[coll (into [] (range 1000000))] (apply + coll),54.0,,,,
1.9.14,V8,apply,[] (list 1 2 3 4 5),0.000131,,,,
1.9.14,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000136,,,,
1.9.14,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000424,,,,
1.9.14,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000145,,,,
1.9.14,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000233,,,,
1.9.14,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000822,,,,
1.9.14,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000311,,,,
1.9.14,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000319,,,,
1.9.14,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000252,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.5e-05,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001623,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.9.14,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.9.14,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001153,,,,
1.9.14,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.8e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.2e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.5e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.7e-05,,,,
1.9.14,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.8e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.5e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.8e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000101,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.4e-05,,,,
1.9.14,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.1e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.5e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),7.2e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),9.9e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8.1e-05,,,,
1.9.14,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.8e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.8e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.3e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.2e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000102,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.8e-05,,,,
1.9.14,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",9.5e-05,,,,
1.9.14,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.9e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.5e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.9.14,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.9.14,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00331,,,,
1.9.14,V8,persistent hash maps,[key :f0] (hash key),2.5e-05,,,,
1.9.14,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.2e-05,,,,
1.9.14,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2.1e-05,,,,
1.9.14,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.17,,,,
1.9.14,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.08,,,,
1.9.14,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.78,,,,
1.9.14,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (:f0 coll),7e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (get coll :f0),5.3e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.3e-05,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000266,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000349,,,,
1.9.14,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),78.0,,,,
1.9.14,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000104,,,,
1.9.14,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),65.0,,,,
1.9.14,V8,set ops,[] #{},3e-06,,,,
1.9.14,V8,set ops,[] #{1 3 2},4e-06,,,,
1.9.14,V8,set ops,[v [1 2 3]] (set v),0.000307,,,,
1.9.14,V8,set ops,[] (hash-set 1 2 3),3e-06,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000271,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (get coll 2),7.3e-05,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.9.14,V8,set ops,[coll #{1 3 2}] (coll 2),7e-05,,,,
1.9.14,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.9.14,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.9.14,V8,reader,[s big-str-data] (reader/read-string s),0.75,,,,
1.9.14,V8,range,[r (range 1000000)] (last r),38.0,,,,
1.9.14,V8,lazy-seq - first run,[r r] (last r),500.0,,,,
1.9.14,V8,lazy-seq - second run,[r r] (last r),80.0,,,,
1.9.14,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.533,,,,
1.9.14,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.128,,,,
1.9.14,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),318.0,,,,
1.9.14,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),57.0,,,,
1.9.14,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.5,,,,
1.9.14,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.25,,,,
1.9.14,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),90.0,,,,
1.9.14,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),102.0,,,,
1.9.14,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2029.0,,,,
1.9.14,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1707.0,,,,
1.9.14,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),79.0,,,,
1.9.14,V8,multimethods,[] (simple-multi :foo),0.000157,,,,
1.9.14,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.9.14,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00033,,,,
1.9.14,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00126,,,,
1.9.14,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),166.5,,,,
1.9.14,SM,identity,[x 1] (identity x),8.17e-06,,,,
1.9.14,SM,symbol construction,[] (symbol (quote foo)),4.9e-05,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.56,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.22,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.42,,,,
1.9.14,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.45,,,,
1.9.14,SM,instance?,[coll []] (instance? PersistentVector coll),1.8e-05,,,,
1.9.14,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.7e-05,,,,
1.9.14,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3.1e-05,,,,
1.9.14,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000474,,,,
1.9.14,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001276,,,,
1.9.14,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000696,,,,
1.9.14,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001177,,,,
1.9.14,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000177,,,,
1.9.14,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000864,,,,
1.9.14,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000417,,,,
1.9.14,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001842,,,,
1.9.14,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (first coll),0.000112,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (rest coll),7.5e-05,,,,
1.9.14,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.9.14,SM,list ops,[] (list),9e-06,,,,
1.9.14,SM,list ops,[] (list 1 2 3),0.001417,,,,
1.9.14,SM,vector ops,[] [],8e-06,,,,
1.9.14,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000549,,,,
1.9.14,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00063,,,,
1.9.14,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000482,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (transient coll),0.00187,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000232,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000172,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000173,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (coll 0),0.000198,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000858,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000835,,,,
1.9.14,SM,vector ops,[coll []] (-conj coll 1),0.000736,,,,
1.9.14,SM,vector ops,[coll [1]] (-conj coll 2),0.000781,,,,
1.9.14,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000837,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (seq coll),0.000513,,,,
1.9.14,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000381,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.4e-05,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (-first coll),7.8e-05,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000769,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000184,,,,
1.9.14,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000187,,,,
1.9.14,SM,large vector ops,[] (reduce conj [] (range 40000)),8.0,,,,
1.9.14,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00176,,,,
1.9.14,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00253,,,,
1.9.14,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00182,,,,
1.9.14,SM,chunked seqs,[] (-first v),0.000188,,,,
1.9.14,SM,chunked seqs,[] (-next v),0.000194,,,,
1.9.14,SM,chunked seqs,[] (-rest v),0.00019,,,,
1.9.14,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),233.0,,,,
1.9.14,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.9.14,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.65,,,,
1.9.14,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.94,,,,
1.9.14,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),74.0,,,,
1.9.14,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.9.14,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.9.14,SM,apply,[coll (into [] (range 1000000))] (apply + coll),42.0,,,,
1.9.14,SM,apply,[] (list 1 2 3 4 5),0.000395,,,,
1.9.14,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000338,,,,
1.9.14,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000391,,,,
1.9.14,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.0004,,,,
1.9.14,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000374,,,,
1.9.14,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000843,,,,
1.9.14,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000371,,,,
1.9.14,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000374,,,,
1.9.14,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000453,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000204,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002301,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000198,,,,
1.9.14,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000198,,,,
1.9.14,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002637,,,,
1.9.14,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000265,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000229,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000347,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000219,,,,
1.9.14,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000242,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000282,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000221,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000378,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000246,,,,
1.9.14,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.00025,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000269,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000218,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000382,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000218,,,,
1.9.14,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000249,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000235,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000225,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000216,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000224,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000217,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000249,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000216,,,,
1.9.14,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000221,,,,
1.9.14,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",181.0,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000191,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000193,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000232,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.00024,,,,
1.9.14,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),253.0,,,,
1.9.14,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00332,,,,
1.9.14,SM,persistent hash maps,[key :f0] (hash key),0.00019,,,,
1.9.14,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.00018,,,,
1.9.14,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000186,,,,
1.9.14,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.56,,,,
1.9.14,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.24,,,,
1.9.14,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.03,,,,
1.9.14,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.12,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (:f0 coll),0.00025,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000242,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.00024,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000259,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000613,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000552,,,,
1.9.14,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),296.0,,,,
1.9.14,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000292,,,,
1.9.14,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),516.0,,,,
1.9.14,SM,set ops,[] #{},0.00016,,,,
1.9.14,SM,set ops,[] #{1 3 2},0.000148,,,,
1.9.14,SM,set ops,[v [1 2 3]] (set v),0.00038,,,,
1.9.14,SM,set ops,[] (hash-set 1 2 3),0.000149,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.00039,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000214,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.00022,,,,
1.9.14,SM,set ops,[coll #{1 3 2}] (coll 2),0.000212,,,,
1.9.14,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.9.14,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.096,,,,
1.9.14,SM,reader,[s big-str-data] (reader/read-string s),1.841,,,,
1.9.14,SM,range,[r (range 1000000)] (last r),45.0,,,,
1.9.14,SM,lazy-seq - first run,[r r] (last r),458.0,,,,
1.9.14,SM,lazy-seq - second run,[r r] (last r),59.0,,,,
1.9.14,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.613,,,,
1.9.14,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.418,,,,
1.9.14,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),226.0,,,,
1.9.14,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),43.25,,,,
1.9.14,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),196.25,,,,
1.9.14,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),122.5,,,,
1.9.14,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),27.0,,,,
1.9.14,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.9.14,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),251.0,,,,
1.9.14,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1524.0,,,,
1.9.14,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),34.0,,,,
1.9.14,SM,multimethods,[] (simple-multi :foo),0.00031,,,,
1.9.14,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00368,,,,
1.9.14,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00211,,,,
1.9.14,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00282,,,,
1.9.14,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),205.3,,,,
1.9.14,JSC,identity,[x 1] (identity x),1.061e-05,,,,
1.9.14,JSC,symbol construction,[] (symbol (quote foo)),4.8e-05,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.62,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.07,,,,
1.9.14,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.9.14,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.9.14,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.9.14,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.9.14,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000138,,,,
1.9.14,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.7e-05,,,,
1.9.14,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000187,,,,
1.9.14,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.3e-05,,,,
1.9.14,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.9.14,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.9.14,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.1e-05,,,,
1.9.14,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000221,,,,
1.9.14,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (first coll),4.9e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.9.14,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.9.14,JSC,list ops,[] (list),3.3e-05,,,,
1.9.14,JSC,list ops,[] (list 1 2 3),9.7e-05,,,,
1.9.14,JSC,vector ops,[] [],3.3e-05,,,,
1.9.14,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.9.14,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.9e-05,,,,
1.9.14,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000101,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00031,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.5e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.5e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.9.14,JSC,vector ops,[coll []] (-conj coll 1),7.9e-05,,,,
1.9.14,JSC,vector ops,[coll [1]] (-conj coll 2),7.6e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.9.14,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.3e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.2e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.7e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000188,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.2e-05,,,,
1.9.14,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.9.14,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.9.14,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00034,,,,
1.9.14,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00056,,,,
1.9.14,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00022,,,,
1.9.14,JSC,chunked seqs,[] (-first v),5.8e-05,,,,
1.9.14,JSC,chunked seqs,[] (-next v),0.00019,,,,
1.9.14,JSC,chunked seqs,[] (-rest v),5.9e-05,,,,
1.9.14,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),71.0,,,,
1.9.14,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),16.0,,,,
1.9.14,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.14,,,,
1.9.14,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.56,,,,
1.9.14,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),27.0,,,,
1.9.14,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),12.0,,,,
1.9.14,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.9.14,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),37.0,,,,
1.9.14,JSC,apply,[] (list 1 2 3 4 5),0.000182,,,,
1.9.14,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000154,,,,
1.9.14,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000228,,,,
1.9.14,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000167,,,,
1.9.14,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000175,,,,
1.9.14,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000506,,,,
1.9.14,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000231,,,,
1.9.14,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000205,,,,
1.9.14,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000273,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000855,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.9.14,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.9.14,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001037,,,,
1.9.14,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),9.9e-05,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000103,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.9.14,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000109,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.5e-05,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000106,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.1e-05,,,,
1.9.14,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.9e-05,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000108,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000111,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.2e-05,,,,
1.9.14,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.8e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.6e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",7e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.00012,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8e-05,,,,
1.9.14,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.5e-05,,,,
1.9.14,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.5e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.3e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.9e-05,,,,
1.9.14,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.9.14,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00197,,,,
1.9.14,JSC,persistent hash maps,[key :f0] (hash key),5.6e-05,,,,
1.9.14,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",5e-05,,,,
1.9.14,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.7e-05,,,,
1.9.14,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.3,,,,
1.9.14,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.24,,,,
1.9.14,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.66,,,,
1.9.14,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.66,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000104,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.4e-05,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.2e-05,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000109,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000174,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000232,,,,
1.9.14,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),122.0,,,,
1.9.14,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000142,,,,
1.9.14,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),46.0,,,,
1.9.14,JSC,set ops,[] #{},3.5e-05,,,,
1.9.14,JSC,set ops,[] #{1 3 2},3.6e-05,,,,
1.9.14,JSC,set ops,[v [1 2 3]] (set v),0.00035,,,,
1.9.14,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000159,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.4e-05,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.9.14,JSC,set ops,[coll #{1 3 2}] (coll 2),9.4e-05,,,,
1.9.14,JSC,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.9.14,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.027,,,,
1.9.14,JSC,reader,[s big-str-data] (reader/read-string s),0.624,,,,
1.9.14,JSC,range,[r (range 1000000)] (last r),26.0,,,,
1.9.14,JSC,lazy-seq - first run,[r r] (last r),209.0,,,,
1.9.14,JSC,lazy-seq - second run,[r r] (last r),68.0,,,,
1.9.14,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.625,,,,
1.9.14,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.198,,,,
1.9.14,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),150.0,,,,
1.9.14,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.5,,,,
1.9.14,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.5,,,,
1.9.14,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.9.14,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),47.0,,,,
1.9.14,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),52.0,,,,
1.9.14,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),98.0,,,,
1.9.14,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),766.0,,,,
1.9.14,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),47.0,,,,
1.9.14,JSC,multimethods,[] (simple-multi :foo),0.000426,,,,
1.9.14,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.9.14,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0003,,,,
1.9.14,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00085,,,,
1.9.14,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),144.0,,,,
1.8.51,V8,identity,[x 1] (identity x),9.2e-06,,,,
1.8.51,V8,symbol construction,[] (symbol (quote foo)),2.6e-05,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.24,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.19,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.8.51,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.1,,,,
1.8.51,V8,instance?,[coll []] (instance? PersistentVector coll),0.000519,,,,
1.8.51,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000513,,,,
1.8.51,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000503,,,,
1.8.51,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3e-05,,,,
1.8.51,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.9e-05,,,,
1.8.51,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.8.51,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000113,,,,
1.8.51,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.8.51,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.8.51,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.4e-05,,,,
1.8.51,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000567,,,,
1.8.51,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (first coll),2.5e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (-first coll),1.5e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.8.51,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.7e-05,,,,
1.8.51,V8,list ops,[] (list),3e-06,,,,
1.8.51,V8,list ops,[] (list 1 2 3),0.00056,,,,
1.8.51,V8,vector ops,[] [],4e-06,,,,
1.8.51,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000566,,,,
1.8.51,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000569,,,,
1.8.51,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000563,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (transient coll),0.00021,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.1e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (coll 0),0.000517,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (conj coll 4),5.1e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.8.51,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.8.51,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.8.51,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (seq coll),4e-05,,,,
1.8.51,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.8e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.2e-05,,,,
1.8.51,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.8e-05,,,,
1.8.51,V8,large vector ops,[] (reduce conj [] (range 40000)),7.3,,,,
1.8.51,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.8.51,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.8.51,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.8.51,V8,chunked seqs,[] (-first v),2e-05,,,,
1.8.51,V8,chunked seqs,[] (-next v),3.3e-05,,,,
1.8.51,V8,chunked seqs,[] (-rest v),3e-05,,,,
1.8.51,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),563.0,,,,
1.8.51,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.8.51,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.18,,,,
1.8.51,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.52,,,,
1.8.51,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),81.0,,,,
1.8.51,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.8.51,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),21.0,,,,
1.8.51,V8,apply,[coll (into [] (range 1000000))] (apply + coll),57.0,,,,
1.8.51,V8,apply,[] (list 1 2 3 4 5),0.000132,,,,
1.8.51,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.00016,,,,
1.8.51,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000439,,,,
1.8.51,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000138,,,,
1.8.51,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000231,,,,
1.8.51,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000817,,,,
1.8.51,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000318,,,,
1.8.51,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000298,,,,
1.8.51,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000251,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.5e-05,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001605,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.8.51,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.8.51,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001192,,,,
1.8.51,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.1e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.8.51,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),8.7e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.8e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.0001,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.8e-05,,,,
1.8.51,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.1e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.2e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),9.9e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8.2e-05,,,,
1.8.51,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.3e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.4e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.9e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.5e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.2e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000101,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.2e-05,,,,
1.8.51,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.7e-05,,,,
1.8.51,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.5e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.7e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.2e-05,,,,
1.8.51,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.8.51,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00311,,,,
1.8.51,V8,persistent hash maps,[key :f0] (hash key),2.3e-05,,,,
1.8.51,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.6e-05,,,,
1.8.51,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2.1e-05,,,,
1.8.51,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.14,,,,
1.8.51,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.1,,,,
1.8.51,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.84,,,,
1.8.51,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (:f0 coll),6.6e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (get coll :f0),5.5e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),3.8e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.4e-05,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000255,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000344,,,,
1.8.51,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),83.0,,,,
1.8.51,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000104,,,,
1.8.51,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),62.0,,,,
1.8.51,V8,set ops,[] #{},4e-06,,,,
1.8.51,V8,set ops,[] #{1 3 2},4e-06,,,,
1.8.51,V8,set ops,[v [1 2 3]] (set v),0.000305,,,,
1.8.51,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000277,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (get coll 2),7e-05,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.8e-05,,,,
1.8.51,V8,set ops,[coll #{1 3 2}] (coll 2),7.1e-05,,,,
1.8.51,V8,seq ops,[coll (range 500000)] (reduce + coll),26.0,,,,
1.8.51,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.03,,,,
1.8.51,V8,reader,[s big-str-data] (reader/read-string s),0.778,,,,
1.8.51,V8,range,[r (range 1000000)] (last r),44.0,,,,
1.8.51,V8,lazy-seq - first run,[r r] (last r),515.0,,,,
1.8.51,V8,lazy-seq - second run,[r r] (last r),86.0,,,,
1.8.51,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.461,,,,
1.8.51,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.13,,,,
1.8.51,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),323.0,,,,
1.8.51,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),56.75,,,,
1.8.51,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),47.25,,,,
1.8.51,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.8.51,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),89.0,,,,
1.8.51,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),102.0,,,,
1.8.51,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2162.0,,,,
1.8.51,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1742.0,,,,
1.8.51,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),80.0,,,,
1.8.51,V8,multimethods,[] (simple-multi :foo),0.000155,,,,
1.8.51,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.8.51,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00035,,,,
1.8.51,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00116,,,,
1.8.51,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),151.6,,,,
1.8.51,SM,identity,[x 1] (identity x),8.17e-06,,,,
1.8.51,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.12,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.8.51,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.8.51,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.8.51,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.8.51,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3e-05,,,,
1.8.51,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000617,,,,
1.8.51,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.00146,,,,
1.8.51,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000876,,,,
1.8.51,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001147,,,,
1.8.51,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000175,,,,
1.8.51,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.00081,,,,
1.8.51,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000587,,,,
1.8.51,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001981,,,,
1.8.51,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),7.4e-05,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (first coll),0.00011,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (rest coll),7.4e-05,,,,
1.8.51,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.8.51,SM,list ops,[] (list),9e-06,,,,
1.8.51,SM,list ops,[] (list 1 2 3),0.001775,,,,
1.8.51,SM,vector ops,[] [],9e-06,,,,
1.8.51,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000773,,,,
1.8.51,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000822,,,,
1.8.51,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000603,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (transient coll),0.00186,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000223,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000162,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000166,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (coll 0),0.00019,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000954,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000906,,,,
1.8.51,SM,vector ops,[coll []] (-conj coll 1),0.000864,,,,
1.8.51,SM,vector ops,[coll [1]] (-conj coll 2),0.000937,,,,
1.8.51,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000765,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (seq coll),0.0002,,,,
1.8.51,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000176,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000198,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000168,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000183,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000186,,,,
1.8.51,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000189,,,,
1.8.51,SM,large vector ops,[] (reduce conj [] (range 40000)),8.0,,,,
1.8.51,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00175,,,,
1.8.51,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00263,,,,
1.8.51,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00181,,,,
1.8.51,SM,chunked seqs,[] (-first v),0.000186,,,,
1.8.51,SM,chunked seqs,[] (-next v),0.000196,,,,
1.8.51,SM,chunked seqs,[] (-rest v),0.000189,,,,
1.8.51,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),231.0,,,,
1.8.51,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.8.51,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.54,,,,
1.8.51,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.04,,,,
1.8.51,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),74.0,,,,
1.8.51,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.8.51,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.8.51,SM,apply,[coll (into [] (range 1000000))] (apply + coll),43.0,,,,
1.8.51,SM,apply,[] (list 1 2 3 4 5),0.000369,,,,
1.8.51,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000331,,,,
1.8.51,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000387,,,,
1.8.51,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000394,,,,
1.8.51,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000376,,,,
1.8.51,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000812,,,,
1.8.51,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000392,,,,
1.8.51,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000371,,,,
1.8.51,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000428,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000198,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00221,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000197,,,,
1.8.51,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000194,,,,
1.8.51,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.003039,,,,
1.8.51,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000267,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000227,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000362,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000221,,,,
1.8.51,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000229,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000287,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000234,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000346,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000249,,,,
1.8.51,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000246,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000267,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000217,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000349,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000232,,,,
1.8.51,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000229,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000231,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000224,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000227,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000217,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000206,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000247,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000225,,,,
1.8.51,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000242,,,,
1.8.51,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",183.0,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000194,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000193,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000238,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000243,,,,
1.8.51,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),262.0,,,,
1.8.51,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0035,,,,
1.8.51,SM,persistent hash maps,[key :f0] (hash key),0.000193,,,,
1.8.51,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000184,,,,
1.8.51,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000193,,,,
1.8.51,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.57,,,,
1.8.51,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.21,,,,
1.8.51,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.06,,,,
1.8.51,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.34,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000247,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000238,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000221,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000299,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.0006,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00058,,,,
1.8.51,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),292.0,,,,
1.8.51,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000327,,,,
1.8.51,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),507.0,,,,
1.8.51,SM,set ops,[] #{},0.000157,,,,
1.8.51,SM,set ops,[] #{1 3 2},0.000151,,,,
1.8.51,SM,set ops,[v [1 2 3]] (set v),0.000382,,,,
1.8.51,SM,set ops,[] (hash-set 1 2 3),0.000149,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.00039,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000233,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000204,,,,
1.8.51,SM,set ops,[coll #{1 3 2}] (coll 2),0.000204,,,,
1.8.51,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.8.51,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.098,,,,
1.8.51,SM,reader,[s big-str-data] (reader/read-string s),1.816,,,,
1.8.51,SM,range,[r (range 1000000)] (last r),46.0,,,,
1.8.51,SM,lazy-seq - first run,[r r] (last r),457.0,,,,
1.8.51,SM,lazy-seq - second run,[r r] (last r),59.0,,,,
1.8.51,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.665,,,,
1.8.51,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.462,,,,
1.8.51,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),218.0,,,,
1.8.51,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),43.5,,,,
1.8.51,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),200.5,,,,
1.8.51,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),124.5,,,,
1.8.51,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),28.0,,,,
1.8.51,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.8.51,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),249.0,,,,
1.8.51,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1551.0,,,,
1.8.51,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.8.51,SM,multimethods,[] (simple-multi :foo),0.000324,,,,
1.8.51,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00363,,,,
1.8.51,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00209,,,,
1.8.51,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00283,,,,
1.8.51,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),201.5,,,,
1.8.51,JSC,identity,[x 1] (identity x),9.54e-06,,,,
1.8.51,JSC,symbol construction,[] (symbol (quote foo)),4.6e-05,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.67,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.62,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.06,,,,
1.8.51,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.8.51,JSC,instance?,[coll []] (instance? PersistentVector coll),4.9e-05,,,,
1.8.51,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.8.51,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.8.51,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000134,,,,
1.8.51,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.7e-05,,,,
1.8.51,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000187,,,,
1.8.51,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.4e-05,,,,
1.8.51,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.8.51,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.2e-05,,,,
1.8.51,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7e-05,,,,
1.8.51,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000223,,,,
1.8.51,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (first coll),4.8e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.8.51,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.8.51,JSC,list ops,[] (list),3.6e-05,,,,
1.8.51,JSC,list ops,[] (list 1 2 3),9.9e-05,,,,
1.8.51,JSC,vector ops,[] [],3.7e-05,,,,
1.8.51,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.8.51,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000103,,,,
1.8.51,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.4e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.9e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.6e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (coll 0),5.5e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.5e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.6e-05,,,,
1.8.51,JSC,vector ops,[coll []] (-conj coll 1),7.6e-05,,,,
1.8.51,JSC,vector ops,[coll [1]] (-conj coll 2),7.6e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2]] (-conj coll 3),8e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (seq coll),5.9e-05,,,,
1.8.51,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.2e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.2e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.9e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000184,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.4e-05,,,,
1.8.51,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.6e-05,,,,
1.8.51,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.2,,,,
1.8.51,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00034,,,,
1.8.51,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00058,,,,
1.8.51,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.8.51,JSC,chunked seqs,[] (-first v),6e-05,,,,
1.8.51,JSC,chunked seqs,[] (-next v),0.000187,,,,
1.8.51,JSC,chunked seqs,[] (-rest v),5.8e-05,,,,
1.8.51,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),68.0,,,,
1.8.51,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),18.0,,,,
1.8.51,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.09,,,,
1.8.51,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.68,,,,
1.8.51,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),26.0,,,,
1.8.51,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),13.0,,,,
1.8.51,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.8.51,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),40.0,,,,
1.8.51,JSC,apply,[] (list 1 2 3 4 5),0.00018,,,,
1.8.51,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000161,,,,
1.8.51,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000233,,,,
1.8.51,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000164,,,,
1.8.51,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000177,,,,
1.8.51,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000507,,,,
1.8.51,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000233,,,,
1.8.51,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.00021,,,,
1.8.51,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000278,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000948,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.8e-05,,,,
1.8.51,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.8e-05,,,,
1.8.51,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001039,,,,
1.8.51,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000103,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000102,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.8.51,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000107,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.8e-05,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000108,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.2e-05,,,,
1.8.51,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.5e-05,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000104,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000111,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.5e-05,,,,
1.8.51,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.8e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.5e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000126,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8.1e-05,,,,
1.8.51,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.6e-05,,,,
1.8.51,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",9.0,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.5e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.4e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.2e-05,,,,
1.8.51,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.8.51,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00199,,,,
1.8.51,JSC,persistent hash maps,[key :f0] (hash key),4.9e-05,,,,
1.8.51,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.8.51,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.7e-05,,,,
1.8.51,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.31,,,,
1.8.51,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.26,,,,
1.8.51,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.69,,,,
1.8.51,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.74,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000101,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.9e-05,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.7e-05,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000121,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000184,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000233,,,,
1.8.51,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),124.0,,,,
1.8.51,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000138,,,,
1.8.51,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),45.0,,,,
1.8.51,JSC,set ops,[] #{},4.4e-05,,,,
1.8.51,JSC,set ops,[] #{1 3 2},3.3e-05,,,,
1.8.51,JSC,set ops,[v [1 2 3]] (set v),0.000344,,,,
1.8.51,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000152,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.2e-05,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),8.1e-05,,,,
1.8.51,JSC,set ops,[coll #{1 3 2}] (coll 2),9.4e-05,,,,
1.8.51,JSC,seq ops,[coll (range 500000)] (reduce + coll),21.0,,,,
1.8.51,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.8.51,JSC,reader,[s big-str-data] (reader/read-string s),0.619,,,,
1.8.51,JSC,range,[r (range 1000000)] (last r),26.0,,,,
1.8.51,JSC,lazy-seq - first run,[r r] (last r),196.0,,,,
1.8.51,JSC,lazy-seq - second run,[r r] (last r),63.0,,,,
1.8.51,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.636,,,,
1.8.51,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.202,,,,
1.8.51,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),162.0,,,,
1.8.51,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.75,,,,
1.8.51,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.0,,,,
1.8.51,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.25,,,,
1.8.51,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),45.0,,,,
1.8.51,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),49.0,,,,
1.8.51,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),92.0,,,,
1.8.51,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),772.0,,,,
1.8.51,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),44.0,,,,
1.8.51,JSC,multimethods,[] (simple-multi :foo),0.000369,,,,
1.8.51,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.8.51,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00028,,,,
1.8.51,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00082,,,,
1.8.51,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),142.5,,,,
1.8.40,V8,identity,[x 1] (identity x),9.11e-06,,,,
1.8.40,V8,symbol construction,[] (symbol (quote foo)),2.3e-05,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.23,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.24,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.12,,,,
1.8.40,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.1,,,,
1.8.40,V8,instance?,[coll []] (instance? PersistentVector coll),0.000518,,,,
1.8.40,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000508,,,,
1.8.40,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000508,,,,
1.8.40,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.8e-05,,,,
1.8.40,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.5e-05,,,,
1.8.40,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.8.40,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000113,,,,
1.8.40,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.8.40,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.4e-05,,,,
1.8.40,V8,cloning & specify,[coll [1 2 3]] (clone coll),3e-05,,,,
1.8.40,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000573,,,,
1.8.40,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (first coll),2.1e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (-first coll),2.1e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (rest coll),1.3e-05,,,,
1.8.40,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.8.40,V8,list ops,[] (list),5e-06,,,,
1.8.40,V8,list ops,[] (list 1 2 3),0.000564,,,,
1.8.40,V8,vector ops,[] [],4e-06,,,,
1.8.40,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00057,,,,
1.8.40,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000566,,,,
1.8.40,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000568,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (transient coll),0.00025,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.1e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (coll 0),0.000517,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.8.40,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.8.40,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.8.40,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (seq coll),4.3e-05,,,,
1.8.40,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.8.40,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.8e-05,,,,
1.8.40,V8,large vector ops,[] (reduce conj [] (range 40000)),6.5,,,,
1.8.40,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00028,,,,
1.8.40,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.8.40,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00026,,,,
1.8.40,V8,chunked seqs,[] (-first v),1.5e-05,,,,
1.8.40,V8,chunked seqs,[] (-next v),3.5e-05,,,,
1.8.40,V8,chunked seqs,[] (-rest v),3e-05,,,,
1.8.40,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),552.0,,,,
1.8.40,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.8.40,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.14,,,,
1.8.40,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.61,,,,
1.8.40,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),75.0,,,,
1.8.40,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),16.0,,,,
1.8.40,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),28.0,,,,
1.8.40,V8,apply,[coll (into [] (range 1000000))] (apply + coll),65.0,,,,
1.8.40,V8,apply,[] (list 1 2 3 4 5),0.000143,,,,
1.8.40,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000136,,,,
1.8.40,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.00043,,,,
1.8.40,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000142,,,,
1.8.40,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000232,,,,
1.8.40,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000795,,,,
1.8.40,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000339,,,,
1.8.40,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000323,,,,
1.8.40,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000244,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001416,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.8.40,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.8.40,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001149,,,,
1.8.40,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.6e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.7e-05,,,,
1.8.40,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.9e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),8.9e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.1e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),9.9e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.3e-05,,,,
1.8.40,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.1e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.8e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.5e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000103,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.8e-05,,,,
1.8.40,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.9e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.8e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.7e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000105,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.6e-05,,,,
1.8.40,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.8.40,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",5.0,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),5e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.5e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.3e-05,,,,
1.8.40,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.8.40,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00314,,,,
1.8.40,V8,persistent hash maps,[key :f0] (hash key),2.4e-05,,,,
1.8.40,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.5e-05,,,,
1.8.40,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.8.40,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.14,,,,
1.8.40,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.06,,,,
1.8.40,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.77,,,,
1.8.40,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.08,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (:f0 coll),6.6e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (get coll :f0),5.3e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.3e-05,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000253,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00025,,,,
1.8.40,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),77.0,,,,
1.8.40,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000105,,,,
1.8.40,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),57.0,,,,
1.8.40,V8,set ops,[] #{},5e-06,,,,
1.8.40,V8,set ops,[] #{1 3 2},3e-06,,,,
1.8.40,V8,set ops,[v [1 2 3]] (set v),0.000328,,,,
1.8.40,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000281,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (get coll 2),6.8e-05,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (contains? coll 2),5e-05,,,,
1.8.40,V8,set ops,[coll #{1 3 2}] (coll 2),7.2e-05,,,,
1.8.40,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.8.40,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.8.40,V8,reader,[s big-str-data] (reader/read-string s),0.766,,,,
1.8.40,V8,range,[r (range 1000000)] (last r),42.0,,,,
1.8.40,V8,lazy-seq - first run,[r r] (last r),423.0,,,,
1.8.40,V8,lazy-seq - second run,[r r] (last r),98.0,,,,
1.8.40,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.465,,,,
1.8.40,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.134,,,,
1.8.40,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),316.0,,,,
1.8.40,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),96.25,,,,
1.8.40,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.0,,,,
1.8.40,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.8.40,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),88.0,,,,
1.8.40,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),130.0,,,,
1.8.40,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1897.0,,,,
1.8.40,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1591.0,,,,
1.8.40,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),76.0,,,,
1.8.40,V8,multimethods,[] (simple-multi :foo),0.000152,,,,
1.8.40,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.8.40,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00032,,,,
1.8.40,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00115,,,,
1.8.40,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),168.7,,,,
1.8.40,SM,identity,[x 1] (identity x),8.3e-06,,,,
1.8.40,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.56,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),2.75,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.42,,,,
1.8.40,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.45,,,,
1.8.40,SM,instance?,[coll []] (instance? PersistentVector coll),2e-05,,,,
1.8.40,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.8.40,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3e-05,,,,
1.8.40,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000612,,,,
1.8.40,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001417,,,,
1.8.40,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000791,,,,
1.8.40,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001178,,,,
1.8.40,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000173,,,,
1.8.40,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000838,,,,
1.8.40,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000466,,,,
1.8.40,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001785,,,,
1.8.40,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (first coll),0.000109,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (-first coll),7.7e-05,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (rest coll),7.6e-05,,,,
1.8.40,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.7e-05,,,,
1.8.40,SM,list ops,[] (list),8e-06,,,,
1.8.40,SM,list ops,[] (list 1 2 3),0.001395,,,,
1.8.40,SM,vector ops,[] [],9e-06,,,,
1.8.40,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000568,,,,
1.8.40,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000645,,,,
1.8.40,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000508,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (transient coll),0.00184,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000231,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000172,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000174,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (coll 0),0.000199,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000866,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000805,,,,
1.8.40,SM,vector ops,[coll []] (-conj coll 1),0.000751,,,,
1.8.40,SM,vector ops,[coll [1]] (-conj coll 2),0.000783,,,,
1.8.40,SM,vector ops,[coll [1 2]] (-conj coll 3),0.00081,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (seq coll),0.000523,,,,
1.8.40,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000406,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (first coll),9.5e-05,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (-first coll),7.8e-05,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000479,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.00018,,,,
1.8.40,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000187,,,,
1.8.40,SM,large vector ops,[] (reduce conj [] (range 40000)),8.5,,,,
1.8.40,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00178,,,,
1.8.40,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00258,,,,
1.8.40,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00176,,,,
1.8.40,SM,chunked seqs,[] (-first v),0.000179,,,,
1.8.40,SM,chunked seqs,[] (-next v),0.00019,,,,
1.8.40,SM,chunked seqs,[] (-rest v),0.000183,,,,
1.8.40,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),236.0,,,,
1.8.40,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),17.0,,,,
1.8.40,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.57,,,,
1.8.40,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.09,,,,
1.8.40,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.8.40,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.8.40,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.8.40,SM,apply,[coll (into [] (range 1000000))] (apply + coll),41.0,,,,
1.8.40,SM,apply,[] (list 1 2 3 4 5),0.00041,,,,
1.8.40,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000358,,,,
1.8.40,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000413,,,,
1.8.40,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000357,,,,
1.8.40,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000378,,,,
1.8.40,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000807,,,,
1.8.40,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.0004,,,,
1.8.40,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000375,,,,
1.8.40,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000437,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000205,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002278,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000197,,,,
1.8.40,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000193,,,,
1.8.40,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002794,,,,
1.8.40,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000278,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000226,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000333,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000228,,,,
1.8.40,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000225,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000287,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000232,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000357,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.00023,,,,
1.8.40,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.00024,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000266,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000224,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000378,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000219,,,,
1.8.40,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000251,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000228,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000221,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000222,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.00022,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000218,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000241,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000217,,,,
1.8.40,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000245,,,,
1.8.40,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",183.0,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000193,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000193,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000237,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000233,,,,
1.8.40,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),248.0,,,,
1.8.40,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00349,,,,
1.8.40,SM,persistent hash maps,[key :f0] (hash key),0.000183,,,,
1.8.40,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000185,,,,
1.8.40,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.00019,,,,
1.8.40,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.51,,,,
1.8.40,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.23,,,,
1.8.40,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.07,,,,
1.8.40,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.26,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000246,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000252,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000217,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000258,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000636,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000564,,,,
1.8.40,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),296.0,,,,
1.8.40,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000306,,,,
1.8.40,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),520.0,,,,
1.8.40,SM,set ops,[] #{},0.000159,,,,
1.8.40,SM,set ops,[] #{1 3 2},0.000147,,,,
1.8.40,SM,set ops,[v [1 2 3]] (set v),0.000398,,,,
1.8.40,SM,set ops,[] (hash-set 1 2 3),0.000145,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000417,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000226,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000208,,,,
1.8.40,SM,set ops,[coll #{1 3 2}] (coll 2),0.000216,,,,
1.8.40,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.8.40,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.098,,,,
1.8.40,SM,reader,[s big-str-data] (reader/read-string s),1.774,,,,
1.8.40,SM,range,[r (range 1000000)] (last r),46.0,,,,
1.8.40,SM,lazy-seq - first run,[r r] (last r),453.0,,,,
1.8.40,SM,lazy-seq - second run,[r r] (last r),54.0,,,,
1.8.40,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.619,,,,
1.8.40,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.435,,,,
1.8.40,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),215.0,,,,
1.8.40,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),41.5,,,,
1.8.40,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),193.5,,,,
1.8.40,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),127.75,,,,
1.8.40,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),27.0,,,,
1.8.40,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.8.40,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),234.0,,,,
1.8.40,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1548.0,,,,
1.8.40,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),28.0,,,,
1.8.40,SM,multimethods,[] (simple-multi :foo),0.000305,,,,
1.8.40,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00364,,,,
1.8.40,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00227,,,,
1.8.40,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00283,,,,
1.8.40,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),225.1,,,,
1.8.40,JSC,identity,[x 1] (identity x),1.147e-05,,,,
1.8.40,JSC,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.65,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.63,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.8.40,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.8.40,JSC,instance?,[coll []] (instance? PersistentVector coll),4.9e-05,,,,
1.8.40,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.8.40,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.7e-05,,,,
1.8.40,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.00014,,,,
1.8.40,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.8e-05,,,,
1.8.40,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000184,,,,
1.8.40,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.4e-05,,,,
1.8.40,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.8.40,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.8.40,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.4e-05,,,,
1.8.40,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000226,,,,
1.8.40,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (first coll),4.6e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (-first coll),4.1e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.7e-05,,,,
1.8.40,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.8.40,JSC,list ops,[] (list),3.2e-05,,,,
1.8.40,JSC,list ops,[] (list 1 2 3),9.9e-05,,,,
1.8.40,JSC,vector ops,[] [],3.5e-05,,,,
1.8.40,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.9e-05,,,,
1.8.40,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.8e-05,,,,
1.8.40,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.7e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00032,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.8e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.6e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (conj coll 4),9e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.4e-05,,,,
1.8.40,JSC,vector ops,[coll []] (-conj coll 1),7.8e-05,,,,
1.8.40,JSC,vector ops,[coll [1]] (-conj coll 2),8e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.5e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (seq coll),6.1e-05,,,,
1.8.40,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.2e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.9e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.2e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000175,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.2e-05,,,,
1.8.40,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.8.40,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.2,,,,
1.8.40,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00034,,,,
1.8.40,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0006,,,,
1.8.40,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.8.40,JSC,chunked seqs,[] (-first v),5.1e-05,,,,
1.8.40,JSC,chunked seqs,[] (-next v),0.000191,,,,
1.8.40,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.8.40,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),72.0,,,,
1.8.40,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),16.0,,,,
1.8.40,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.16,,,,
1.8.40,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.56,,,,
1.8.40,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),28.0,,,,
1.8.40,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.8.40,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.8.40,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),36.0,,,,
1.8.40,JSC,apply,[] (list 1 2 3 4 5),0.000189,,,,
1.8.40,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000153,,,,
1.8.40,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000221,,,,
1.8.40,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.00017,,,,
1.8.40,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000173,,,,
1.8.40,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000508,,,,
1.8.40,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000229,,,,
1.8.40,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000216,,,,
1.8.40,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00028,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00093,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.8.40,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.8.40,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001071,,,,
1.8.40,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.0001,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.00011,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.8.40,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000106,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000109,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.1e-05,,,,
1.8.40,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.5e-05,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000103,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.00011,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.8.40,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.8e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.3e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.8e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000116,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8.1e-05,,,,
1.8.40,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.8.40,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.9e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.3e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.2e-05,,,,
1.8.40,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),70.0,,,,
1.8.40,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00193,,,,
1.8.40,JSC,persistent hash maps,[key :f0] (hash key),5.7e-05,,,,
1.8.40,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.5e-05,,,,
1.8.40,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.8e-05,,,,
1.8.40,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.34,,,,
1.8.40,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.29,,,,
1.8.40,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.65,,,,
1.8.40,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.64,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000104,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.6e-05,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.7e-05,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000114,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000173,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000232,,,,
1.8.40,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),127.0,,,,
1.8.40,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000135,,,,
1.8.40,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),43.0,,,,
1.8.40,JSC,set ops,[] #{},3.7e-05,,,,
1.8.40,JSC,set ops,[] #{1 3 2},3.5e-05,,,,
1.8.40,JSC,set ops,[v [1 2 3]] (set v),0.000345,,,,
1.8.40,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000154,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.6e-05,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.8.40,JSC,set ops,[coll #{1 3 2}] (coll 2),0.000105,,,,
1.8.40,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.8.40,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.023,,,,
1.8.40,JSC,reader,[s big-str-data] (reader/read-string s),0.64,,,,
1.8.40,JSC,range,[r (range 1000000)] (last r),25.0,,,,
1.8.40,JSC,lazy-seq - first run,[r r] (last r),206.0,,,,
1.8.40,JSC,lazy-seq - second run,[r r] (last r),73.0,,,,
1.8.40,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.63,,,,
1.8.40,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.197,,,,
1.8.40,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),142.0,,,,
1.8.40,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),38.75,,,,
1.8.40,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.5,,,,
1.8.40,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.8.40,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),42.0,,,,
1.8.40,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),43.0,,,,
1.8.40,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),91.0,,,,
1.8.40,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),903.0,,,,
1.8.40,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),43.0,,,,
1.8.40,JSC,multimethods,[] (simple-multi :foo),0.00025,,,,
1.8.40,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.8.40,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00033,,,,
1.8.40,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.0009,,,,
1.8.40,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),141.5,,,,
1.8.34,V8,identity,[x 1] (identity x),9.29e-06,,,,
1.8.34,V8,symbol construction,[] (symbol (quote foo)),2.9e-05,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.29,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.2,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.8.34,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.8.34,V8,instance?,[coll []] (instance? PersistentVector coll),0.000524,,,,
1.8.34,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000508,,,,
1.8.34,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000506,,,,
1.8.34,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.9e-05,,,,
1.8.34,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.3e-05,,,,
1.8.34,V8,array & string ops,[coll (array 1 2 3)] (first coll),4.1e-05,,,,
1.8.34,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000114,,,,
1.8.34,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.8.34,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.8.34,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.7e-05,,,,
1.8.34,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00057,,,,
1.8.34,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.3e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (first coll),2.1e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (rest coll),1.3e-05,,,,
1.8.34,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.8.34,V8,list ops,[] (list),4e-06,,,,
1.8.34,V8,list ops,[] (list 1 2 3),0.000562,,,,
1.8.34,V8,vector ops,[] [],3e-06,,,,
1.8.34,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000566,,,,
1.8.34,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000569,,,,
1.8.34,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000567,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (transient coll),0.00021,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (coll 0),0.000508,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.8.34,V8,vector ops,[coll []] (-conj coll 1),4e-05,,,,
1.8.34,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.8.34,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.8.34,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.7e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.2e-05,,,,
1.8.34,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.4e-05,,,,
1.8.34,V8,large vector ops,[] (reduce conj [] (range 40000)),6.5,,,,
1.8.34,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00026,,,,
1.8.34,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.8.34,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.8.34,V8,chunked seqs,[] (-first v),1.8e-05,,,,
1.8.34,V8,chunked seqs,[] (-next v),3e-05,,,,
1.8.34,V8,chunked seqs,[] (-rest v),3.5e-05,,,,
1.8.34,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),550.0,,,,
1.8.34,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),34.0,,,,
1.8.34,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.22,,,,
1.8.34,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.55,,,,
1.8.34,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),75.0,,,,
1.8.34,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.8.34,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),28.0,,,,
1.8.34,V8,apply,[coll (into [] (range 1000000))] (apply + coll),62.0,,,,
1.8.34,V8,apply,[] (list 1 2 3 4 5),0.000145,,,,
1.8.34,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000135,,,,
1.8.34,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000432,,,,
1.8.34,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000139,,,,
1.8.34,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000231,,,,
1.8.34,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000817,,,,
1.8.34,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000315,,,,
1.8.34,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000298,,,,
1.8.34,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000252,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001698,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.8.34,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.8.34,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001138,,,,
1.8.34,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.9e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.3e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.7e-05,,,,
1.8.34,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.9e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.4e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.5e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000105,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.3e-05,,,,
1.8.34,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000101,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.7e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.4e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000101,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.7e-05,,,,
1.8.34,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.1e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.5e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.1e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.2e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000103,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.9e-05,,,,
1.8.34,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.8.34,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.7e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.2e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.8e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.3e-05,,,,
1.8.34,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.8.34,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00301,,,,
1.8.34,V8,persistent hash maps,[key :f0] (hash key),2.3e-05,,,,
1.8.34,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.5e-05,,,,
1.8.34,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.8.34,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.16,,,,
1.8.34,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.98,,,,
1.8.34,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.83,,,,
1.8.34,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.04,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (:f0 coll),6.7e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (get coll :f0),5e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.5e-05,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000315,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000345,,,,
1.8.34,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),78.0,,,,
1.8.34,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000107,,,,
1.8.34,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),57.0,,,,
1.8.34,V8,set ops,[] #{},4e-06,,,,
1.8.34,V8,set ops,[] #{1 3 2},4e-06,,,,
1.8.34,V8,set ops,[v [1 2 3]] (set v),0.000312,,,,
1.8.34,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000284,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (get coll 2),6.8e-05,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (contains? coll 2),5.2e-05,,,,
1.8.34,V8,set ops,[coll #{1 3 2}] (coll 2),7.3e-05,,,,
1.8.34,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.8.34,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.8.34,V8,reader,[s big-str-data] (reader/read-string s),0.787,,,,
1.8.34,V8,range,[r (range 1000000)] (last r),45.0,,,,
1.8.34,V8,lazy-seq - first run,[r r] (last r),413.0,,,,
1.8.34,V8,lazy-seq - second run,[r r] (last r),84.0,,,,
1.8.34,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.505,,,,
1.8.34,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.132,,,,
1.8.34,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),328.0,,,,
1.8.34,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),93.5,,,,
1.8.34,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),41.75,,,,
1.8.34,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.8.34,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),87.0,,,,
1.8.34,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),109.0,,,,
1.8.34,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2041.0,,,,
1.8.34,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1659.0,,,,
1.8.34,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),82.0,,,,
1.8.34,V8,multimethods,[] (simple-multi :foo),0.000155,,,,
1.8.34,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.8.34,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00032,,,,
1.8.34,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00121,,,,
1.8.34,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),151.2,,,,
1.8.34,SM,identity,[x 1] (identity x),8.18e-06,,,,
1.8.34,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.56,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.08,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.8.34,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.8.34,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.8.34,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.7e-05,,,,
1.8.34,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3e-05,,,,
1.8.34,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000623,,,,
1.8.34,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001436,,,,
1.8.34,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000873,,,,
1.8.34,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001261,,,,
1.8.34,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000163,,,,
1.8.34,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000897,,,,
1.8.34,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000584,,,,
1.8.34,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.002067,,,,
1.8.34,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (first coll),0.000112,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (rest coll),9.6e-05,,,,
1.8.34,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.7e-05,,,,
1.8.34,SM,list ops,[] (list),8e-06,,,,
1.8.34,SM,list ops,[] (list 1 2 3),0.001524,,,,
1.8.34,SM,vector ops,[] [],9e-06,,,,
1.8.34,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000775,,,,
1.8.34,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000786,,,,
1.8.34,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000599,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (transient coll),0.00185,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000171,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000168,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (coll 0),0.000193,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000992,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000958,,,,
1.8.34,SM,vector ops,[coll []] (-conj coll 1),0.000874,,,,
1.8.34,SM,vector ops,[coll [1]] (-conj coll 2),0.000901,,,,
1.8.34,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000674,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (seq coll),0.000215,,,,
1.8.34,SM,vector ops,[coll [1 2 3]] (-seq coll),0.00019,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000198,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000173,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000188,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000183,,,,
1.8.34,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000189,,,,
1.8.34,SM,large vector ops,[] (reduce conj [] (range 40000)),8.2,,,,
1.8.34,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00172,,,,
1.8.34,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00257,,,,
1.8.34,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00176,,,,
1.8.34,SM,chunked seqs,[] (-first v),0.000183,,,,
1.8.34,SM,chunked seqs,[] (-next v),0.000196,,,,
1.8.34,SM,chunked seqs,[] (-rest v),0.000193,,,,
1.8.34,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),237.0,,,,
1.8.34,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),17.0,,,,
1.8.34,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.63,,,,
1.8.34,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.23,,,,
1.8.34,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),75.0,,,,
1.8.34,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.8.34,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),4.0,,,,
1.8.34,SM,apply,[coll (into [] (range 1000000))] (apply + coll),42.0,,,,
1.8.34,SM,apply,[] (list 1 2 3 4 5),0.000371,,,,
1.8.34,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000336,,,,
1.8.34,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000385,,,,
1.8.34,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000394,,,,
1.8.34,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000381,,,,
1.8.34,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000854,,,,
1.8.34,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000371,,,,
1.8.34,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000372,,,,
1.8.34,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000453,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000203,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002257,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000198,,,,
1.8.34,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000194,,,,
1.8.34,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002809,,,,
1.8.34,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.00027,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000225,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000333,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000224,,,,
1.8.34,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000226,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000276,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000225,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000379,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000242,,,,
1.8.34,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000247,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000275,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000218,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000347,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000217,,,,
1.8.34,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000247,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000229,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000228,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.00022,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000224,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000204,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000248,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000216,,,,
1.8.34,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.00025,,,,
1.8.34,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",183.0,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000196,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000198,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000231,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000238,,,,
1.8.34,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),250.0,,,,
1.8.34,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00357,,,,
1.8.34,SM,persistent hash maps,[key :f0] (hash key),0.000195,,,,
1.8.34,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.00018,,,,
1.8.34,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000193,,,,
1.8.34,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.52,,,,
1.8.34,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.26,,,,
1.8.34,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.0,,,,
1.8.34,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.18,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (:f0 coll),0.00025,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000257,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000216,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000273,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000621,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000609,,,,
1.8.34,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),290.0,,,,
1.8.34,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000292,,,,
1.8.34,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),544.0,,,,
1.8.34,SM,set ops,[] #{},0.000162,,,,
1.8.34,SM,set ops,[] #{1 3 2},0.000151,,,,
1.8.34,SM,set ops,[v [1 2 3]] (set v),0.000388,,,,
1.8.34,SM,set ops,[] (hash-set 1 2 3),0.000145,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000392,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000215,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000208,,,,
1.8.34,SM,set ops,[coll #{1 3 2}] (coll 2),0.000203,,,,
1.8.34,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.8.34,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.1,,,,
1.8.34,SM,reader,[s big-str-data] (reader/read-string s),1.787,,,,
1.8.34,SM,range,[r (range 1000000)] (last r),45.0,,,,
1.8.34,SM,lazy-seq - first run,[r r] (last r),456.0,,,,
1.8.34,SM,lazy-seq - second run,[r r] (last r),55.0,,,,
1.8.34,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.692,,,,
1.8.34,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.451,,,,
1.8.34,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),246.0,,,,
1.8.34,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.5,,,,
1.8.34,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),200.75,,,,
1.8.34,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),127.75,,,,
1.8.34,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),26.0,,,,
1.8.34,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.8.34,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),247.0,,,,
1.8.34,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1526.0,,,,
1.8.34,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),32.0,,,,
1.8.34,SM,multimethods,[] (simple-multi :foo),0.000326,,,,
1.8.34,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00365,,,,
1.8.34,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00209,,,,
1.8.34,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00285,,,,
1.8.34,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),230.2,,,,
1.8.34,JSC,identity,[x 1] (identity x),9.41e-06,,,,
1.8.34,JSC,symbol construction,[] (symbol (quote foo)),5.1e-05,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.61,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.06,,,,
1.8.34,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.8.34,JSC,instance?,[coll []] (instance? PersistentVector coll),4.7e-05,,,,
1.8.34,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.4e-05,,,,
1.8.34,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.8.34,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.00014,,,,
1.8.34,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.8e-05,,,,
1.8.34,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000186,,,,
1.8.34,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.6e-05,,,,
1.8.34,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.8.34,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.8.34,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.3e-05,,,,
1.8.34,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000226,,,,
1.8.34,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),4e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (first coll),4.6e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.8.34,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.8.34,JSC,list ops,[] (list),3.2e-05,,,,
1.8.34,JSC,list ops,[] (list 1 2 3),9.7e-05,,,,
1.8.34,JSC,vector ops,[] [],3.2e-05,,,,
1.8.34,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000105,,,,
1.8.34,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.8e-05,,,,
1.8.34,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.4e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.6e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.6e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.8.34,JSC,vector ops,[coll []] (-conj coll 1),7.9e-05,,,,
1.8.34,JSC,vector ops,[coll [1]] (-conj coll 2),7.5e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2]] (-conj coll 3),8.1e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (seq coll),5.6e-05,,,,
1.8.34,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.2e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (first coll),4.9e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.2e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000184,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.2e-05,,,,
1.8.34,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.2e-05,,,,
1.8.34,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.8.34,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.8.34,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00055,,,,
1.8.34,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.8.34,JSC,chunked seqs,[] (-first v),5.5e-05,,,,
1.8.34,JSC,chunked seqs,[] (-next v),0.000193,,,,
1.8.34,JSC,chunked seqs,[] (-rest v),5.9e-05,,,,
1.8.34,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),74.0,,,,
1.8.34,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),16.0,,,,
1.8.34,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.15,,,,
1.8.34,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.64,,,,
1.8.34,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),29.0,,,,
1.8.34,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.8.34,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.8.34,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),37.0,,,,
1.8.34,JSC,apply,[] (list 1 2 3 4 5),0.000189,,,,
1.8.34,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000159,,,,
1.8.34,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000226,,,,
1.8.34,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000164,,,,
1.8.34,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.00017,,,,
1.8.34,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000509,,,,
1.8.34,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000233,,,,
1.8.34,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000268,,,,
1.8.34,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000281,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000834,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),5.1e-05,,,,
1.8.34,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.8.34,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001034,,,,
1.8.34,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000103,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000109,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.8.34,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000108,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),8.2e-05,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000108,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.7e-05,,,,
1.8.34,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.6e-05,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000109,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000107,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.8.34,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",7e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.8e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.8e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",7e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000119,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8.1e-05,,,,
1.8.34,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.3e-05,,,,
1.8.34,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.5e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8e-05,,,,
1.8.34,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),78.0,,,,
1.8.34,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00197,,,,
1.8.34,JSC,persistent hash maps,[key :f0] (hash key),5.6e-05,,,,
1.8.34,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.8.34,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.7e-05,,,,
1.8.34,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.31,,,,
1.8.34,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.27,,,,
1.8.34,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.68,,,,
1.8.34,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.7,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000104,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.9e-05,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.5e-05,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000111,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000173,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00023,,,,
1.8.34,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),125.0,,,,
1.8.34,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000141,,,,
1.8.34,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),45.0,,,,
1.8.34,JSC,set ops,[] #{},3.7e-05,,,,
1.8.34,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.8.34,JSC,set ops,[v [1 2 3]] (set v),0.000346,,,,
1.8.34,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000153,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.7e-05,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.8.34,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.8.34,JSC,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.8.34,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.025,,,,
1.8.34,JSC,reader,[s big-str-data] (reader/read-string s),0.628,,,,
1.8.34,JSC,range,[r (range 1000000)] (last r),23.0,,,,
1.8.34,JSC,lazy-seq - first run,[r r] (last r),199.0,,,,
1.8.34,JSC,lazy-seq - second run,[r r] (last r),61.0,,,,
1.8.34,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.633,,,,
1.8.34,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.191,,,,
1.8.34,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),144.0,,,,
1.8.34,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),39.0,,,,
1.8.34,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),48.0,,,,
1.8.34,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.25,,,,
1.8.34,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),43.0,,,,
1.8.34,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),44.0,,,,
1.8.34,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),91.0,,,,
1.8.34,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),790.0,,,,
1.8.34,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),50.0,,,,
1.8.34,JSC,multimethods,[] (simple-multi :foo),0.000372,,,,
1.8.34,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.8.34,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00033,,,,
1.8.34,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00081,,,,
1.8.34,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),142.9,,,,
1.7.228,V8,identity,[x 1] (identity x),9.22e-06,,,,
1.7.228,V8,symbol construction,[] (symbol (quote foo)),2.6e-05,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.23,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.21,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.7.228,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.228,V8,instance?,[coll []] (instance? PersistentVector coll),0.000523,,,,
1.7.228,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000505,,,,
1.7.228,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.00051,,,,
1.7.228,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.8e-05,,,,
1.7.228,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.8e-05,,,,
1.7.228,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.228,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000115,,,,
1.7.228,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),4e-05,,,,
1.7.228,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.7.228,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.9e-05,,,,
1.7.228,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000564,,,,
1.7.228,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (first coll),1.9e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (-first coll),1.7e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.7.228,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.9e-05,,,,
1.7.228,V8,list ops,[] (list),4e-06,,,,
1.7.228,V8,list ops,[] (list 1 2 3),0.000557,,,,
1.7.228,V8,vector ops,[] [],4e-06,,,,
1.7.228,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000577,,,,
1.7.228,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000558,,,,
1.7.228,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000559,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.3e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (coll 0),0.000516,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.228,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.228,V8,vector ops,[coll [1]] (-conj coll 2),4.1e-05,,,,
1.7.228,V8,vector ops,[coll [1 2]] (-conj coll 3),4.1e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (seq coll),3.7e-05,,,,
1.7.228,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.5e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.3e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.7.228,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.228,V8,large vector ops,[] (reduce conj [] (range 40000)),7.2,,,,
1.7.228,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.228,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00069,,,,
1.7.228,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.228,V8,chunked seqs,[] (-first v),1.5e-05,,,,
1.7.228,V8,chunked seqs,[] (-next v),3.2e-05,,,,
1.7.228,V8,chunked seqs,[] (-rest v),2.9e-05,,,,
1.7.228,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),556.0,,,,
1.7.228,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.7.228,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.22,,,,
1.7.228,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.73,,,,
1.7.228,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.7.228,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.7.228,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),22.0,,,,
1.7.228,V8,apply,[coll (into [] (range 1000000))] (apply + coll),57.0,,,,
1.7.228,V8,apply,[] (list 1 2 3 4 5),0.000127,,,,
1.7.228,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000138,,,,
1.7.228,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000424,,,,
1.7.228,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000137,,,,
1.7.228,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000234,,,,
1.7.228,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000799,,,,
1.7.228,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000314,,,,
1.7.228,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000306,,,,
1.7.228,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000253,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.5e-05,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001472,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.228,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.7.228,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001144,,,,
1.7.228,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.5e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.3e-05,,,,
1.7.228,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.6e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.3e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.8e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000103,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.7.228,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.8e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.4e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000102,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.9e-05,,,,
1.7.228,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.8e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.8e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.6e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.6e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.6e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.2e-05,,,,
1.7.228,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.1e-05,,,,
1.7.228,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.1e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.7.228,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),38.0,,,,
1.7.228,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00334,,,,
1.7.228,V8,persistent hash maps,[key :f0] (hash key),2.2e-05,,,,
1.7.228,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.7.228,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.7.228,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.19,,,,
1.7.228,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.03,,,,
1.7.228,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.82,,,,
1.7.228,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.06,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (:f0 coll),6.1e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (get coll :f0),5.3e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.3e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.3e-05,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000249,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000416,,,,
1.7.228,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),86.0,,,,
1.7.228,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000164,,,,
1.7.228,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),57.0,,,,
1.7.228,V8,set ops,[] #{},4e-06,,,,
1.7.228,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.228,V8,set ops,[v [1 2 3]] (set v),0.000314,,,,
1.7.228,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000269,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (get coll 2),6.4e-05,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.2e-05,,,,
1.7.228,V8,set ops,[coll #{1 3 2}] (coll 2),7e-05,,,,
1.7.228,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.7.228,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.028,,,,
1.7.228,V8,reader,[s big-str-data] (reader/read-string s),0.759,,,,
1.7.228,V8,range,[r (range 1000000)] (last r),40.0,,,,
1.7.228,V8,lazy-seq - first run,[r r] (last r),499.0,,,,
1.7.228,V8,lazy-seq - second run,[r r] (last r),85.0,,,,
1.7.228,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.46,,,,
1.7.228,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.133,,,,
1.7.228,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),322.0,,,,
1.7.228,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),56.25,,,,
1.7.228,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),42.0,,,,
1.7.228,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.228,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),86.0,,,,
1.7.228,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),113.0,,,,
1.7.228,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2097.0,,,,
1.7.228,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1622.0,,,,
1.7.228,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),82.0,,,,
1.7.228,V8,multimethods,[] (simple-multi :foo),0.000157,,,,
1.7.228,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00011,,,,
1.7.228,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00031,,,,
1.7.228,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00103,,,,
1.7.228,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),163.7,,,,
1.7.228,SM,identity,[x 1] (identity x),8.15e-06,,,,
1.7.228,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.11,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.7.228,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.7.228,SM,instance?,[coll []] (instance? PersistentVector coll),1.6e-05,,,,
1.7.228,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.7.228,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.8e-05,,,,
1.7.228,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000522,,,,
1.7.228,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001314,,,,
1.7.228,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000737,,,,
1.7.228,SM,array & string ops,"[coll ""foobar""] (first coll)",0.00157,,,,
1.7.228,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000176,,,,
1.7.228,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000872,,,,
1.7.228,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000433,,,,
1.7.228,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00179,,,,
1.7.228,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (first coll),0.000114,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (-first coll),7.8e-05,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (rest coll),8.2e-05,,,,
1.7.228,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.7.228,SM,list ops,[] (list),9e-06,,,,
1.7.228,SM,list ops,[] (list 1 2 3),0.001332,,,,
1.7.228,SM,vector ops,[] [],9e-06,,,,
1.7.228,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000586,,,,
1.7.228,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00068,,,,
1.7.228,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000495,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (transient coll),0.00191,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000213,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000239,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (coll 0),0.000198,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000837,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000788,,,,
1.7.228,SM,vector ops,[coll []] (-conj coll 1),0.000739,,,,
1.7.228,SM,vector ops,[coll [1]] (-conj coll 2),0.00075,,,,
1.7.228,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000785,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (seq coll),0.000557,,,,
1.7.228,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000436,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.00036,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000179,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000195,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.0002,,,,
1.7.228,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000257,,,,
1.7.228,SM,large vector ops,[] (reduce conj [] (range 40000)),8.0,,,,
1.7.228,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00174,,,,
1.7.228,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00243,,,,
1.7.228,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00175,,,,
1.7.228,SM,chunked seqs,[] (-first v),0.000185,,,,
1.7.228,SM,chunked seqs,[] (-next v),0.000193,,,,
1.7.228,SM,chunked seqs,[] (-rest v),0.000184,,,,
1.7.228,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),234.0,,,,
1.7.228,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.228,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.52,,,,
1.7.228,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.07,,,,
1.7.228,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),80.0,,,,
1.7.228,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.228,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.7.228,SM,apply,[coll (into [] (range 1000000))] (apply + coll),46.0,,,,
1.7.228,SM,apply,[] (list 1 2 3 4 5),0.00036,,,,
1.7.228,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000357,,,,
1.7.228,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000392,,,,
1.7.228,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000376,,,,
1.7.228,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000395,,,,
1.7.228,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000865,,,,
1.7.228,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000385,,,,
1.7.228,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000376,,,,
1.7.228,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000438,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000206,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002385,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000195,,,,
1.7.228,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000193,,,,
1.7.228,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002466,,,,
1.7.228,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000282,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000212,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000345,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.00022,,,,
1.7.228,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.00025,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000277,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000241,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000349,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000248,,,,
1.7.228,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000241,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000268,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000226,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000349,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000225,,,,
1.7.228,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000243,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000234,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.00023,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000223,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000218,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000224,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000251,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000229,,,,
1.7.228,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000234,,,,
1.7.228,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",182.0,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000192,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000192,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000236,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000234,,,,
1.7.228,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),261.0,,,,
1.7.228,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00363,,,,
1.7.228,SM,persistent hash maps,[key :f0] (hash key),0.000184,,,,
1.7.228,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000182,,,,
1.7.228,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000187,,,,
1.7.228,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.59,,,,
1.7.228,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.2,,,,
1.7.228,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.09,,,,
1.7.228,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.68,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000262,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000241,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000219,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000257,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000599,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000604,,,,
1.7.228,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),297.0,,,,
1.7.228,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000288,,,,
1.7.228,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),525.0,,,,
1.7.228,SM,set ops,[] #{},0.000154,,,,
1.7.228,SM,set ops,[] #{1 3 2},0.000151,,,,
1.7.228,SM,set ops,[v [1 2 3]] (set v),0.000379,,,,
1.7.228,SM,set ops,[] (hash-set 1 2 3),0.000145,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000397,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000237,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000202,,,,
1.7.228,SM,set ops,[coll #{1 3 2}] (coll 2),0.000209,,,,
1.7.228,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.228,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.103,,,,
1.7.228,SM,reader,[s big-str-data] (reader/read-string s),1.82,,,,
1.7.228,SM,range,[r (range 1000000)] (last r),51.0,,,,
1.7.228,SM,lazy-seq - first run,[r r] (last r),450.0,,,,
1.7.228,SM,lazy-seq - second run,[r r] (last r),57.0,,,,
1.7.228,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.634,,,,
1.7.228,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.471,,,,
1.7.228,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),212.0,,,,
1.7.228,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.75,,,,
1.7.228,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),196.25,,,,
1.7.228,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),125.5,,,,
1.7.228,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),28.0,,,,
1.7.228,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.7.228,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),239.0,,,,
1.7.228,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1568.0,,,,
1.7.228,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),29.0,,,,
1.7.228,SM,multimethods,[] (simple-multi :foo),0.000311,,,,
1.7.228,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00365,,,,
1.7.228,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00209,,,,
1.7.228,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00385,,,,
1.7.228,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),213.0,,,,
1.7.228,JSC,identity,[x 1] (identity x),1.108e-05,,,,
1.7.228,JSC,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.6,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.7.228,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.228,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.7.228,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.228,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),5.1e-05,,,,
1.7.228,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000138,,,,
1.7.228,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.8e-05,,,,
1.7.228,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000182,,,,
1.7.228,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.1e-05,,,,
1.7.228,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.228,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.228,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.9e-05,,,,
1.7.228,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000216,,,,
1.7.228,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.7e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (first coll),4.5e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.7e-05,,,,
1.7.228,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.7.228,JSC,list ops,[] (list),3.6e-05,,,,
1.7.228,JSC,list ops,[] (list 1 2 3),9.3e-05,,,,
1.7.228,JSC,vector ops,[] [],4e-05,,,,
1.7.228,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.7.228,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.5e-05,,,,
1.7.228,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.7e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.7e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.5e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.2e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.6e-05,,,,
1.7.228,JSC,vector ops,[coll []] (-conj coll 1),7.9e-05,,,,
1.7.228,JSC,vector ops,[coll [1]] (-conj coll 2),7.3e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.7.228,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.2e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (first coll),4.8e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.7e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000185,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.4e-05,,,,
1.7.228,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.5e-05,,,,
1.7.228,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.0,,,,
1.7.228,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.7.228,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00055,,,,
1.7.228,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00025,,,,
1.7.228,JSC,chunked seqs,[] (-first v),5.3e-05,,,,
1.7.228,JSC,chunked seqs,[] (-next v),0.000194,,,,
1.7.228,JSC,chunked seqs,[] (-rest v),5.8e-05,,,,
1.7.228,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),69.0,,,,
1.7.228,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.7.228,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.11,,,,
1.7.228,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.49,,,,
1.7.228,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),28.0,,,,
1.7.228,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),13.0,,,,
1.7.228,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.7.228,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),37.0,,,,
1.7.228,JSC,apply,[] (list 1 2 3 4 5),0.000184,,,,
1.7.228,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000161,,,,
1.7.228,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000224,,,,
1.7.228,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000163,,,,
1.7.228,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.00017,,,,
1.7.228,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000512,,,,
1.7.228,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000228,,,,
1.7.228,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000217,,,,
1.7.228,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000273,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5.2e-05,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00086,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.228,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.7.228,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001031,,,,
1.7.228,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000102,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000105,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.228,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000115,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.7e-05,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000118,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.5e-05,,,,
1.7.228,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.1e-05,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000111,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.00011,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7e-05,,,,
1.7.228,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.6e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.6e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",7.1e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000127,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.7e-05,,,,
1.7.228,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.5e-05,,,,
1.7.228,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.5e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.2e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.6e-05,,,,
1.7.228,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),71.0,,,,
1.7.228,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00195,,,,
1.7.228,JSC,persistent hash maps,[key :f0] (hash key),5e-05,,,,
1.7.228,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.228,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.7.228,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.3,,,,
1.7.228,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.27,,,,
1.7.228,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.59,,,,
1.7.228,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.64,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.9e-05,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.4e-05,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8e-05,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000106,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000164,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000229,,,,
1.7.228,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),116.0,,,,
1.7.228,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000144,,,,
1.7.228,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),42.0,,,,
1.7.228,JSC,set ops,[] #{},3.7e-05,,,,
1.7.228,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.7.228,JSC,set ops,[v [1 2 3]] (set v),0.00034,,,,
1.7.228,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.00016,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.1e-05,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.7.228,JSC,set ops,[coll #{1 3 2}] (coll 2),9.8e-05,,,,
1.7.228,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.228,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.023,,,,
1.7.228,JSC,reader,[s big-str-data] (reader/read-string s),0.649,,,,
1.7.228,JSC,range,[r (range 1000000)] (last r),31.0,,,,
1.7.228,JSC,lazy-seq - first run,[r r] (last r),194.0,,,,
1.7.228,JSC,lazy-seq - second run,[r r] (last r),66.0,,,,
1.7.228,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.624,,,,
1.7.228,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.2,,,,
1.7.228,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),142.0,,,,
1.7.228,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),39.25,,,,
1.7.228,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.0,,,,
1.7.228,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.228,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),45.0,,,,
1.7.228,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),45.0,,,,
1.7.228,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),93.0,,,,
1.7.228,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),789.0,,,,
1.7.228,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),45.0,,,,
1.7.228,JSC,multimethods,[] (simple-multi :foo),0.000362,,,,
1.7.228,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.228,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00034,,,,
1.7.228,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00081,,,,
1.7.228,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),143.2,,,,
1.7.189,V8,identity,[x 1] (identity x),9.21e-06,,,,
1.7.189,V8,symbol construction,[] (symbol (quote foo)),2.5e-05,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.23,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.2,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.7.189,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.1,,,,
1.7.189,V8,instance?,[coll []] (instance? PersistentVector coll),0.000521,,,,
1.7.189,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000504,,,,
1.7.189,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000515,,,,
1.7.189,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.9e-05,,,,
1.7.189,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.3e-05,,,,
1.7.189,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.189,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000114,,,,
1.7.189,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.7e-05,,,,
1.7.189,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.7.189,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.6e-05,,,,
1.7.189,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000574,,,,
1.7.189,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.6e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (first coll),1.9e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (-first coll),1.9e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (rest coll),1.5e-05,,,,
1.7.189,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.7.189,V8,list ops,[] (list),4e-06,,,,
1.7.189,V8,list ops,[] (list 1 2 3),0.000563,,,,
1.7.189,V8,vector ops,[] [],4e-06,,,,
1.7.189,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000578,,,,
1.7.189,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000561,,,,
1.7.189,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000561,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.3e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (coll 0),0.000507,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.189,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.189,V8,vector ops,[coll [1]] (-conj coll 2),4.1e-05,,,,
1.7.189,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (seq coll),3.8e-05,,,,
1.7.189,V8,vector ops,[coll [1 2 3]] (-seq coll),2.6e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.9e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.189,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.2e-05,,,,
1.7.189,V8,large vector ops,[] (reduce conj [] (range 40000)),7.0,,,,
1.7.189,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.189,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.7.189,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.189,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.7.189,V8,chunked seqs,[] (-next v),3.2e-05,,,,
1.7.189,V8,chunked seqs,[] (-rest v),2.8e-05,,,,
1.7.189,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),559.0,,,,
1.7.189,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),34.0,,,,
1.7.189,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.1,,,,
1.7.189,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.54,,,,
1.7.189,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),75.0,,,,
1.7.189,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.7.189,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),24.0,,,,
1.7.189,V8,apply,[coll (into [] (range 1000000))] (apply + coll),58.0,,,,
1.7.189,V8,apply,[] (list 1 2 3 4 5),0.000127,,,,
1.7.189,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000137,,,,
1.7.189,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000431,,,,
1.7.189,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000142,,,,
1.7.189,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000233,,,,
1.7.189,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000798,,,,
1.7.189,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000313,,,,
1.7.189,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000297,,,,
1.7.189,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000248,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001506,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.7.189,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.189,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001137,,,,
1.7.189,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.3e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.5e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.6e-05,,,,
1.7.189,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.6e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000103,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.7.189,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.8e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.4e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.4e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000103,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.9e-05,,,,
1.7.189,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.7e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.9e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.6e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.4e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.2e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.1e-05,,,,
1.7.189,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8e-05,,,,
1.7.189,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.4e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.7.189,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),37.0,,,,
1.7.189,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00336,,,,
1.7.189,V8,persistent hash maps,[key :f0] (hash key),2e-05,,,,
1.7.189,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.5e-05,,,,
1.7.189,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.7.189,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.15,,,,
1.7.189,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.0,,,,
1.7.189,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.84,,,,
1.7.189,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.07,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (:f0 coll),6.1e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (get coll :f0),5.4e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.7e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.6e-05,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000252,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000418,,,,
1.7.189,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),87.0,,,,
1.7.189,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000162,,,,
1.7.189,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),57.0,,,,
1.7.189,V8,set ops,[] #{},4e-06,,,,
1.7.189,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.189,V8,set ops,[v [1 2 3]] (set v),0.00032,,,,
1.7.189,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000296,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (get coll 2),6.5e-05,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.6e-05,,,,
1.7.189,V8,set ops,[coll #{1 3 2}] (coll 2),7.2e-05,,,,
1.7.189,V8,seq ops,[coll (range 500000)] (reduce + coll),30.0,,,,
1.7.189,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.7.189,V8,reader,[s big-str-data] (reader/read-string s),0.748,,,,
1.7.189,V8,range,[r (range 1000000)] (last r),37.0,,,,
1.7.189,V8,lazy-seq - first run,[r r] (last r),527.0,,,,
1.7.189,V8,lazy-seq - second run,[r r] (last r),85.0,,,,
1.7.189,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.484,,,,
1.7.189,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.133,,,,
1.7.189,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),316.0,,,,
1.7.189,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),55.5,,,,
1.7.189,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),43.5,,,,
1.7.189,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.189,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),89.0,,,,
1.7.189,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),116.0,,,,
1.7.189,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1946.0,,,,
1.7.189,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1664.0,,,,
1.7.189,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),80.0,,,,
1.7.189,V8,multimethods,[] (simple-multi :foo),0.000154,,,,
1.7.189,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.189,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00035,,,,
1.7.189,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00119,,,,
1.7.189,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),146.7,,,,
1.7.189,SM,identity,[x 1] (identity x),8.68e-06,,,,
1.7.189,SM,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.57,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),2.83,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.44,,,,
1.7.189,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.46,,,,
1.7.189,SM,instance?,[coll []] (instance? PersistentVector coll),1.8e-05,,,,
1.7.189,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.7e-05,,,,
1.7.189,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.9e-05,,,,
1.7.189,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000646,,,,
1.7.189,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001398,,,,
1.7.189,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000894,,,,
1.7.189,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001352,,,,
1.7.189,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000175,,,,
1.7.189,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000867,,,,
1.7.189,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000529,,,,
1.7.189,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001752,,,,
1.7.189,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (first coll),0.000119,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (-first coll),8.1e-05,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (rest coll),8.9e-05,,,,
1.7.189,SM,list ops,[coll (list 1 2 3)] (-rest coll),6.8e-05,,,,
1.7.189,SM,list ops,[] (list),1e-05,,,,
1.7.189,SM,list ops,[] (list 1 2 3),0.001308,,,,
1.7.189,SM,vector ops,[] [],8e-06,,,,
1.7.189,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000584,,,,
1.7.189,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00073,,,,
1.7.189,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000497,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (transient coll),0.00188,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000224,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.00021,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000216,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (coll 0),0.000193,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000858,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000872,,,,
1.7.189,SM,vector ops,[coll []] (-conj coll 1),0.001122,,,,
1.7.189,SM,vector ops,[coll [1]] (-conj coll 2),0.001181,,,,
1.7.189,SM,vector ops,[coll [1 2]] (-conj coll 3),0.001001,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (seq coll),0.000217,,,,
1.7.189,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000184,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000208,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000178,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000205,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000202,,,,
1.7.189,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000255,,,,
1.7.189,SM,large vector ops,[] (reduce conj [] (range 40000)),8.1,,,,
1.7.189,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00179,,,,
1.7.189,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00258,,,,
1.7.189,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00175,,,,
1.7.189,SM,chunked seqs,[] (-first v),0.000184,,,,
1.7.189,SM,chunked seqs,[] (-next v),0.000189,,,,
1.7.189,SM,chunked seqs,[] (-rest v),0.00019,,,,
1.7.189,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),233.0,,,,
1.7.189,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.189,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.49,,,,
1.7.189,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.98,,,,
1.7.189,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.7.189,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.189,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.7.189,SM,apply,[coll (into [] (range 1000000))] (apply + coll),42.0,,,,
1.7.189,SM,apply,[] (list 1 2 3 4 5),0.000364,,,,
1.7.189,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000336,,,,
1.7.189,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000419,,,,
1.7.189,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000399,,,,
1.7.189,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000379,,,,
1.7.189,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000974,,,,
1.7.189,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000386,,,,
1.7.189,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000376,,,,
1.7.189,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000402,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000203,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002552,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000194,,,,
1.7.189,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000198,,,,
1.7.189,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002634,,,,
1.7.189,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000272,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000229,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000331,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000227,,,,
1.7.189,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000225,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000303,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000222,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000352,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000243,,,,
1.7.189,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.00025,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000269,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000224,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000349,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000218,,,,
1.7.189,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000227,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000231,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000221,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000224,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000222,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000221,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000244,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000217,,,,
1.7.189,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000217,,,,
1.7.189,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",184.0,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000195,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000192,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.00024,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000231,,,,
1.7.189,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),252.0,,,,
1.7.189,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00357,,,,
1.7.189,SM,persistent hash maps,[key :f0] (hash key),0.000186,,,,
1.7.189,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000182,,,,
1.7.189,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000188,,,,
1.7.189,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.93,,,,
1.7.189,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.29,,,,
1.7.189,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.02,,,,
1.7.189,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.87,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000258,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000237,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000216,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000258,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000612,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000569,,,,
1.7.189,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),317.0,,,,
1.7.189,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000289,,,,
1.7.189,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),526.0,,,,
1.7.189,SM,set ops,[] #{},0.000155,,,,
1.7.189,SM,set ops,[] #{1 3 2},0.000149,,,,
1.7.189,SM,set ops,[v [1 2 3]] (set v),0.000384,,,,
1.7.189,SM,set ops,[] (hash-set 1 2 3),0.000148,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000413,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000211,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000202,,,,
1.7.189,SM,set ops,[coll #{1 3 2}] (coll 2),0.000205,,,,
1.7.189,SM,seq ops,[coll (range 500000)] (reduce + coll),16.0,,,,
1.7.189,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.102,,,,
1.7.189,SM,reader,[s big-str-data] (reader/read-string s),1.771,,,,
1.7.189,SM,range,[r (range 1000000)] (last r),49.0,,,,
1.7.189,SM,lazy-seq - first run,[r r] (last r),452.0,,,,
1.7.189,SM,lazy-seq - second run,[r r] (last r),58.0,,,,
1.7.189,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.609,,,,
1.7.189,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.459,,,,
1.7.189,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),215.0,,,,
1.7.189,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.0,,,,
1.7.189,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),196.0,,,,
1.7.189,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),125.0,,,,
1.7.189,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),27.0,,,,
1.7.189,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),30.0,,,,
1.7.189,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),247.0,,,,
1.7.189,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1564.0,,,,
1.7.189,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.7.189,SM,multimethods,[] (simple-multi :foo),0.000301,,,,
1.7.189,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00362,,,,
1.7.189,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00212,,,,
1.7.189,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00389,,,,
1.7.189,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),207.4,,,,
1.7.189,JSC,identity,[x 1] (identity x),1.278e-05,,,,
1.7.189,JSC,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.62,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.07,,,,
1.7.189,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.189,JSC,instance?,[coll []] (instance? PersistentVector coll),5.1e-05,,,,
1.7.189,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.2e-05,,,,
1.7.189,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.7e-05,,,,
1.7.189,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000136,,,,
1.7.189,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6.1e-05,,,,
1.7.189,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000189,,,,
1.7.189,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.2e-05,,,,
1.7.189,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.189,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.2e-05,,,,
1.7.189,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.2e-05,,,,
1.7.189,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000221,,,,
1.7.189,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (first coll),5e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.189,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.7.189,JSC,list ops,[] (list),3.6e-05,,,,
1.7.189,JSC,list ops,[] (list 1 2 3),9.6e-05,,,,
1.7.189,JSC,vector ops,[] [],3.4e-05,,,,
1.7.189,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.9e-05,,,,
1.7.189,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.8e-05,,,,
1.7.189,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.0001,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.8e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.5e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.7.189,JSC,vector ops,[coll []] (-conj coll 1),7.4e-05,,,,
1.7.189,JSC,vector ops,[coll [1]] (-conj coll 2),7.4e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2]] (-conj coll 3),8.1e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (seq coll),5.9e-05,,,,
1.7.189,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.9e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (first coll),4.8e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.4e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000169,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.2e-05,,,,
1.7.189,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.6e-05,,,,
1.7.189,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.7,,,,
1.7.189,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.7.189,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00054,,,,
1.7.189,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.189,JSC,chunked seqs,[] (-first v),5.8e-05,,,,
1.7.189,JSC,chunked seqs,[] (-next v),0.00019,,,,
1.7.189,JSC,chunked seqs,[] (-rest v),6.1e-05,,,,
1.7.189,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),68.0,,,,
1.7.189,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.7.189,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.13,,,,
1.7.189,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.55,,,,
1.7.189,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),29.0,,,,
1.7.189,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.189,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.7.189,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),38.0,,,,
1.7.189,JSC,apply,[] (list 1 2 3 4 5),0.000197,,,,
1.7.189,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000161,,,,
1.7.189,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000229,,,,
1.7.189,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000168,,,,
1.7.189,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000173,,,,
1.7.189,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000504,,,,
1.7.189,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000236,,,,
1.7.189,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000213,,,,
1.7.189,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000276,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000935,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.189,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.7.189,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001043,,,,
1.7.189,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000102,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000101,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.189,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000105,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.7e-05,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000111,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.2e-05,,,,
1.7.189,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.4e-05,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),9.9e-05,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.8e-05,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000106,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.1e-05,,,,
1.7.189,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.8e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.6e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.5e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",7.2e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.00012,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.9e-05,,,,
1.7.189,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.3e-05,,,,
1.7.189,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),7.2e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.3e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.7e-05,,,,
1.7.189,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),71.0,,,,
1.7.189,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00195,,,,
1.7.189,JSC,persistent hash maps,[key :f0] (hash key),5.2e-05,,,,
1.7.189,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.189,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),5e-05,,,,
1.7.189,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.31,,,,
1.7.189,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.29,,,,
1.7.189,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.6,,,,
1.7.189,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.68,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.8e-05,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (get coll :f0),8.9e-05,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),7.8e-05,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000109,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000168,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000239,,,,
1.7.189,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),115.0,,,,
1.7.189,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000142,,,,
1.7.189,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),40.0,,,,
1.7.189,JSC,set ops,[] #{},3.8e-05,,,,
1.7.189,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.7.189,JSC,set ops,[v [1 2 3]] (set v),0.000352,,,,
1.7.189,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000153,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.5e-05,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.189,JSC,set ops,[coll #{1 3 2}] (coll 2),9.6e-05,,,,
1.7.189,JSC,seq ops,[coll (range 500000)] (reduce + coll),22.0,,,,
1.7.189,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.025,,,,
1.7.189,JSC,reader,[s big-str-data] (reader/read-string s),0.628,,,,
1.7.189,JSC,range,[r (range 1000000)] (last r),24.0,,,,
1.7.189,JSC,lazy-seq - first run,[r r] (last r),201.0,,,,
1.7.189,JSC,lazy-seq - second run,[r r] (last r),60.0,,,,
1.7.189,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.636,,,,
1.7.189,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.203,,,,
1.7.189,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),145.0,,,,
1.7.189,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),39.75,,,,
1.7.189,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),44.25,,,,
1.7.189,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.189,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),44.0,,,,
1.7.189,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),43.0,,,,
1.7.189,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),92.0,,,,
1.7.189,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),787.0,,,,
1.7.189,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),45.0,,,,
1.7.189,JSC,multimethods,[] (simple-multi :foo),0.000366,,,,
1.7.189,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00013,,,,
1.7.189,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0003,,,,
1.7.189,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00087,,,,
1.7.189,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),143.9,,,,
1.7.170,V8,identity,[x 1] (identity x),9.2e-06,,,,
1.7.170,V8,symbol construction,[] (symbol (quote foo)),2.2e-05,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.33,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.3,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.19,,,,
1.7.170,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.2,,,,
1.7.170,V8,instance?,[coll []] (instance? PersistentVector coll),0.000521,,,,
1.7.170,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000514,,,,
1.7.170,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000513,,,,
1.7.170,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.9e-05,,,,
1.7.170,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.4e-05,,,,
1.7.170,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.170,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000113,,,,
1.7.170,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.170,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.7.170,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.8e-05,,,,
1.7.170,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000571,,,,
1.7.170,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.6e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (first coll),2.2e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (-first coll),1.7e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (rest coll),1.3e-05,,,,
1.7.170,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.3e-05,,,,
1.7.170,V8,list ops,[] (list),4e-06,,,,
1.7.170,V8,list ops,[] (list 1 2 3),0.00056,,,,
1.7.170,V8,vector ops,[] [],3e-06,,,,
1.7.170,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000582,,,,
1.7.170,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000552,,,,
1.7.170,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000569,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (transient coll),0.00025,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (coll 0),0.000515,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.5e-05,,,,
1.7.170,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.170,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.170,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (seq coll),3.8e-05,,,,
1.7.170,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.170,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.7e-05,,,,
1.7.170,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.7.170,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.0003,,,,
1.7.170,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00066,,,,
1.7.170,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.170,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.7.170,V8,chunked seqs,[] (-next v),3.6e-05,,,,
1.7.170,V8,chunked seqs,[] (-rest v),3.5e-05,,,,
1.7.170,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),558.0,,,,
1.7.170,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),34.0,,,,
1.7.170,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.19,,,,
1.7.170,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.59,,,,
1.7.170,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),83.0,,,,
1.7.170,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),27.0,,,,
1.7.170,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),40.0,,,,
1.7.170,V8,apply,[coll (into [] (range 1000000))] (apply + coll),67.0,,,,
1.7.170,V8,apply,[] (list 1 2 3 4 5),0.000121,,,,
1.7.170,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000136,,,,
1.7.170,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000441,,,,
1.7.170,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000139,,,,
1.7.170,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000235,,,,
1.7.170,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000821,,,,
1.7.170,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000318,,,,
1.7.170,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000298,,,,
1.7.170,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000251,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.5e-05,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001438,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.170,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.170,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001137,,,,
1.7.170,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.2e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.3e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.3e-05,,,,
1.7.170,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.8e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000104,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.9e-05,,,,
1.7.170,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.2e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),9.9e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.9e-05,,,,
1.7.170,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.8e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.1e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.5e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.9e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.8e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.9e-05,,,,
1.7.170,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.5e-05,,,,
1.7.170,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.5e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.4e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.7e-05,,,,
1.7.170,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.7.170,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00305,,,,
1.7.170,V8,persistent hash maps,[key :f0] (hash key),2.2e-05,,,,
1.7.170,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.3e-05,,,,
1.7.170,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.170,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.14,,,,
1.7.170,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.0,,,,
1.7.170,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.8,,,,
1.7.170,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.0,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (:f0 coll),6.8e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (get coll :f0),5.3e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.3e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.8e-05,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000255,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000424,,,,
1.7.170,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),94.0,,,,
1.7.170,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000161,,,,
1.7.170,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),57.0,,,,
1.7.170,V8,set ops,[] #{},3e-06,,,,
1.7.170,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.170,V8,set ops,[v [1 2 3]] (set v),0.000322,,,,
1.7.170,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000274,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (get coll 2),6.7e-05,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.6e-05,,,,
1.7.170,V8,set ops,[coll #{1 3 2}] (coll 2),7.1e-05,,,,
1.7.170,V8,seq ops,[coll (range 500000)] (reduce + coll),36.0,,,,
1.7.170,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.03,,,,
1.7.170,V8,reader,[s big-str-data] (reader/read-string s),0.749,,,,
1.7.170,V8,range,[r (range 1000000)] (last r),41.0,,,,
1.7.170,V8,lazy-seq - first run,[r r] (last r),510.0,,,,
1.7.170,V8,lazy-seq - second run,[r r] (last r),88.0,,,,
1.7.170,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.525,,,,
1.7.170,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.133,,,,
1.7.170,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),326.0,,,,
1.7.170,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.25,,,,
1.7.170,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.5,,,,
1.7.170,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),7.75,,,,
1.7.170,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),95.0,,,,
1.7.170,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),153.0,,,,
1.7.170,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1986.0,,,,
1.7.170,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1559.0,,,,
1.7.170,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),90.0,,,,
1.7.170,V8,multimethods,[] (simple-multi :foo),0.000164,,,,
1.7.170,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.170,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00033,,,,
1.7.170,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00111,,,,
1.7.170,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),174.2,,,,
1.7.170,SM,identity,[x 1] (identity x),8.3e-06,,,,
1.7.170,SM,symbol construction,[] (symbol (quote foo)),4.2e-05,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.87,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.42,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.5,,,,
1.7.170,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.53,,,,
1.7.170,SM,instance?,[coll []] (instance? PersistentVector coll),1.9e-05,,,,
1.7.170,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.7.170,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3e-05,,,,
1.7.170,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000673,,,,
1.7.170,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.00131,,,,
1.7.170,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000902,,,,
1.7.170,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001319,,,,
1.7.170,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000185,,,,
1.7.170,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.001007,,,,
1.7.170,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000443,,,,
1.7.170,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001786,,,,
1.7.170,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),5.9e-05,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (first coll),0.000114,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (-first coll),7.4e-05,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (rest coll),8e-05,,,,
1.7.170,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.6e-05,,,,
1.7.170,SM,list ops,[] (list),9e-06,,,,
1.7.170,SM,list ops,[] (list 1 2 3),0.001173,,,,
1.7.170,SM,vector ops,[] [],1.1e-05,,,,
1.7.170,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000573,,,,
1.7.170,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000619,,,,
1.7.170,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000493,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (transient coll),0.0018,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000227,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000212,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000219,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (coll 0),0.000193,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000898,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.00082,,,,
1.7.170,SM,vector ops,[coll []] (-conj coll 1),0.000718,,,,
1.7.170,SM,vector ops,[coll [1]] (-conj coll 2),0.000749,,,,
1.7.170,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000882,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (seq coll),0.000589,,,,
1.7.170,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000455,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000208,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000176,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000199,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000181,,,,
1.7.170,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.00026,,,,
1.7.170,SM,large vector ops,[] (reduce conj [] (range 40000)),8.3,,,,
1.7.170,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00173,,,,
1.7.170,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00256,,,,
1.7.170,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00177,,,,
1.7.170,SM,chunked seqs,[] (-first v),0.000181,,,,
1.7.170,SM,chunked seqs,[] (-next v),0.000192,,,,
1.7.170,SM,chunked seqs,[] (-rest v),0.000188,,,,
1.7.170,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),235.0,,,,
1.7.170,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.170,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.71,,,,
1.7.170,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.15,,,,
1.7.170,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.7.170,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),11.0,,,,
1.7.170,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.7.170,SM,apply,[coll (into [] (range 1000000))] (apply + coll),42.0,,,,
1.7.170,SM,apply,[] (list 1 2 3 4 5),0.000367,,,,
1.7.170,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000369,,,,
1.7.170,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000432,,,,
1.7.170,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000375,,,,
1.7.170,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000373,,,,
1.7.170,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000881,,,,
1.7.170,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000411,,,,
1.7.170,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000382,,,,
1.7.170,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000419,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.0002,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002193,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000194,,,,
1.7.170,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000196,,,,
1.7.170,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002478,,,,
1.7.170,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000264,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000224,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000346,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000227,,,,
1.7.170,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000254,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000282,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000221,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000346,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000239,,,,
1.7.170,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000242,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.00027,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000218,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000339,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000224,,,,
1.7.170,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000238,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000231,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000224,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000216,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000221,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000224,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000247,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000214,,,,
1.7.170,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000221,,,,
1.7.170,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",182.0,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000199,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000201,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000238,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000237,,,,
1.7.170,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),247.0,,,,
1.7.170,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00341,,,,
1.7.170,SM,persistent hash maps,[key :f0] (hash key),0.000194,,,,
1.7.170,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000181,,,,
1.7.170,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000189,,,,
1.7.170,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.49,,,,
1.7.170,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.29,,,,
1.7.170,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.03,,,,
1.7.170,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.73,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (:f0 coll),0.00026,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000237,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.00022,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000259,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.00061,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000554,,,,
1.7.170,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),302.0,,,,
1.7.170,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000302,,,,
1.7.170,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),522.0,,,,
1.7.170,SM,set ops,[] #{},0.000159,,,,
1.7.170,SM,set ops,[] #{1 3 2},0.000148,,,,
1.7.170,SM,set ops,[v [1 2 3]] (set v),0.000381,,,,
1.7.170,SM,set ops,[] (hash-set 1 2 3),0.000149,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000381,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000236,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000211,,,,
1.7.170,SM,set ops,[coll #{1 3 2}] (coll 2),0.000216,,,,
1.7.170,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.7.170,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.101,,,,
1.7.170,SM,reader,[s big-str-data] (reader/read-string s),1.823,,,,
1.7.170,SM,range,[r (range 1000000)] (last r),50.0,,,,
1.7.170,SM,lazy-seq - first run,[r r] (last r),444.0,,,,
1.7.170,SM,lazy-seq - second run,[r r] (last r),54.0,,,,
1.7.170,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.612,,,,
1.7.170,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.438,,,,
1.7.170,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),218.0,,,,
1.7.170,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),44.5,,,,
1.7.170,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),218.5,,,,
1.7.170,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),126.75,,,,
1.7.170,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),28.0,,,,
1.7.170,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.7.170,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),245.0,,,,
1.7.170,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1537.0,,,,
1.7.170,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),33.0,,,,
1.7.170,SM,multimethods,[] (simple-multi :foo),0.000319,,,,
1.7.170,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00368,,,,
1.7.170,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00214,,,,
1.7.170,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00393,,,,
1.7.170,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),208.6,,,,
1.7.170,JSC,identity,[x 1] (identity x),1.49e-05,,,,
1.7.170,JSC,symbol construction,[] (symbol (quote foo)),5e-05,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.97,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.44,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.7.170,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.7.170,JSC,instance?,[coll []] (instance? PersistentVector coll),5.1e-05,,,,
1.7.170,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.170,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.7.170,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000136,,,,
1.7.170,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6.1e-05,,,,
1.7.170,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000186,,,,
1.7.170,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.2e-05,,,,
1.7.170,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.170,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.170,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.9e-05,,,,
1.7.170,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000222,,,,
1.7.170,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (first coll),4.7e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (rest coll),4.1e-05,,,,
1.7.170,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.7.170,JSC,list ops,[] (list),3.2e-05,,,,
1.7.170,JSC,list ops,[] (list 1 2 3),9.7e-05,,,,
1.7.170,JSC,vector ops,[] [],3.5e-05,,,,
1.7.170,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000105,,,,
1.7.170,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.5e-05,,,,
1.7.170,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000101,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00029,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.5e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.4e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.7.170,JSC,vector ops,[coll []] (-conj coll 1),7.6e-05,,,,
1.7.170,JSC,vector ops,[coll [1]] (-conj coll 2),7.7e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2]] (-conj coll 3),8.1e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.7.170,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.9e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.5e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000189,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.7.170,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.7e-05,,,,
1.7.170,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.5,,,,
1.7.170,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00037,,,,
1.7.170,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0006,,,,
1.7.170,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.170,JSC,chunked seqs,[] (-first v),5.4e-05,,,,
1.7.170,JSC,chunked seqs,[] (-next v),0.000187,,,,
1.7.170,JSC,chunked seqs,[] (-rest v),6.3e-05,,,,
1.7.170,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),67.0,,,,
1.7.170,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.7.170,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.11,,,,
1.7.170,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.73,,,,
1.7.170,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),29.0,,,,
1.7.170,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),13.0,,,,
1.7.170,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),10.0,,,,
1.7.170,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),38.0,,,,
1.7.170,JSC,apply,[] (list 1 2 3 4 5),0.000183,,,,
1.7.170,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.00016,,,,
1.7.170,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000226,,,,
1.7.170,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000169,,,,
1.7.170,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000176,,,,
1.7.170,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.00051,,,,
1.7.170,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000231,,,,
1.7.170,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000216,,,,
1.7.170,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000282,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000982,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.9e-05,,,,
1.7.170,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.6e-05,,,,
1.7.170,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001028,,,,
1.7.170,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),9.9e-05,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000109,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.170,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.9e-05,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000107,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),8e-05,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000109,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.7e-05,,,,
1.7.170,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.8e-05,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000103,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000115,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.2e-05,,,,
1.7.170,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.5e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",7e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.7e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.3e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.8e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000119,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.8e-05,,,,
1.7.170,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.7.170,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.7e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.6e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.4e-05,,,,
1.7.170,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.7.170,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00192,,,,
1.7.170,JSC,persistent hash maps,[key :f0] (hash key),5e-05,,,,
1.7.170,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.170,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.7.170,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.31,,,,
1.7.170,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.28,,,,
1.7.170,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.58,,,,
1.7.170,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.63,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.9e-05,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.7e-05,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.4e-05,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000115,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000185,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000232,,,,
1.7.170,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),119.0,,,,
1.7.170,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.00014,,,,
1.7.170,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),46.0,,,,
1.7.170,JSC,set ops,[] #{},3.6e-05,,,,
1.7.170,JSC,set ops,[] #{1 3 2},3.5e-05,,,,
1.7.170,JSC,set ops,[v [1 2 3]] (set v),0.00036,,,,
1.7.170,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000154,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.4e-05,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.170,JSC,set ops,[coll #{1 3 2}] (coll 2),0.0001,,,,
1.7.170,JSC,seq ops,[coll (range 500000)] (reduce + coll),21.0,,,,
1.7.170,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.023,,,,
1.7.170,JSC,reader,[s big-str-data] (reader/read-string s),0.637,,,,
1.7.170,JSC,range,[r (range 1000000)] (last r),26.0,,,,
1.7.170,JSC,lazy-seq - first run,[r r] (last r),202.0,,,,
1.7.170,JSC,lazy-seq - second run,[r r] (last r),66.0,,,,
1.7.170,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.625,,,,
1.7.170,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.195,,,,
1.7.170,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),147.0,,,,
1.7.170,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.75,,,,
1.7.170,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.0,,,,
1.7.170,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.170,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),42.0,,,,
1.7.170,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),50.0,,,,
1.7.170,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),91.0,,,,
1.7.170,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),773.0,,,,
1.7.170,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),47.0,,,,
1.7.170,JSC,multimethods,[] (simple-multi :foo),0.000427,,,,
1.7.170,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.170,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0003,,,,
1.7.170,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00088,,,,
1.7.170,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),144.0,,,,
1.7.166,V8,identity,[x 1] (identity x),9.15e-06,,,,
1.7.166,V8,symbol construction,[] (symbol (quote foo)),2.6e-05,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.37,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.3,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.2,,,,
1.7.166,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.2,,,,
1.7.166,V8,instance?,[coll []] (instance? PersistentVector coll),0.000525,,,,
1.7.166,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000518,,,,
1.7.166,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000512,,,,
1.7.166,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.6e-05,,,,
1.7.166,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.8e-05,,,,
1.7.166,V8,array & string ops,[coll (array 1 2 3)] (first coll),4e-05,,,,
1.7.166,V8,array & string ops,"[coll ""foobar""] (first coll)",0.00011,,,,
1.7.166,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.166,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.7.166,V8,cloning & specify,[coll [1 2 3]] (clone coll),3e-05,,,,
1.7.166,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00058,,,,
1.7.166,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (first coll),2.2e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (-first coll),1.6e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (rest coll),1.3e-05,,,,
1.7.166,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.7.166,V8,list ops,[] (list),3e-06,,,,
1.7.166,V8,list ops,[] (list 1 2 3),0.000554,,,,
1.7.166,V8,vector ops,[] [],4e-06,,,,
1.7.166,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000575,,,,
1.7.166,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000557,,,,
1.7.166,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000568,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (transient coll),0.00025,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (coll 0),0.000507,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.7.166,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.166,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.166,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (seq coll),3.8e-05,,,,
1.7.166,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (first coll),4e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.166,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.166,V8,large vector ops,[] (reduce conj [] (range 40000)),7.1,,,,
1.7.166,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00029,,,,
1.7.166,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00067,,,,
1.7.166,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00026,,,,
1.7.166,V8,chunked seqs,[] (-first v),1.8e-05,,,,
1.7.166,V8,chunked seqs,[] (-next v),3.6e-05,,,,
1.7.166,V8,chunked seqs,[] (-rest v),3.7e-05,,,,
1.7.166,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),564.0,,,,
1.7.166,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.7.166,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.26,,,,
1.7.166,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.66,,,,
1.7.166,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),86.0,,,,
1.7.166,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),26.0,,,,
1.7.166,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),40.0,,,,
1.7.166,V8,apply,[coll (into [] (range 1000000))] (apply + coll),69.0,,,,
1.7.166,V8,apply,[] (list 1 2 3 4 5),0.000126,,,,
1.7.166,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000142,,,,
1.7.166,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000496,,,,
1.7.166,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000146,,,,
1.7.166,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000236,,,,
1.7.166,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000826,,,,
1.7.166,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00031,,,,
1.7.166,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000319,,,,
1.7.166,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000256,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.5e-05,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001506,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.166,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.166,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001145,,,,
1.7.166,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.1e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.166,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.6e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.6e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.2e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.0001,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.7.166,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.3e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.8e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000105,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.6e-05,,,,
1.7.166,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.1e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.6e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.4e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.3e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",5.7e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.9e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.8e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.8e-05,,,,
1.7.166,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.3e-05,,,,
1.7.166,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",5.0,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.6e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.8e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.6e-05,,,,
1.7.166,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),40.0,,,,
1.7.166,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00309,,,,
1.7.166,V8,persistent hash maps,[key :f0] (hash key),2.3e-05,,,,
1.7.166,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.4e-05,,,,
1.7.166,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.166,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.18,,,,
1.7.166,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.08,,,,
1.7.166,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.75,,,,
1.7.166,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.03,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (:f0 coll),6.6e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (get coll :f0),5.2e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.4e-05,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000249,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000422,,,,
1.7.166,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),82.0,,,,
1.7.166,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000164,,,,
1.7.166,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),59.0,,,,
1.7.166,V8,set ops,[] #{},4e-06,,,,
1.7.166,V8,set ops,[] #{1 3 2},3e-06,,,,
1.7.166,V8,set ops,[v [1 2 3]] (set v),0.00032,,,,
1.7.166,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000274,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (get coll 2),6.6e-05,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (contains? coll 2),5.2e-05,,,,
1.7.166,V8,set ops,[coll #{1 3 2}] (coll 2),7e-05,,,,
1.7.166,V8,seq ops,[coll (range 500000)] (reduce + coll),30.0,,,,
1.7.166,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.031,,,,
1.7.166,V8,reader,[s big-str-data] (reader/read-string s),0.766,,,,
1.7.166,V8,range,[r (range 1000000)] (last r),39.0,,,,
1.7.166,V8,lazy-seq - first run,[r r] (last r),515.0,,,,
1.7.166,V8,lazy-seq - second run,[r r] (last r),80.0,,,,
1.7.166,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.52,,,,
1.7.166,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.129,,,,
1.7.166,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),324.0,,,,
1.7.166,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),63.0,,,,
1.7.166,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),56.5,,,,
1.7.166,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.7.166,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),98.0,,,,
1.7.166,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),135.0,,,,
1.7.166,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2075.0,,,,
1.7.166,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1763.0,,,,
1.7.166,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),85.0,,,,
1.7.166,V8,multimethods,[] (simple-multi :foo),0.000153,,,,
1.7.166,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.166,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00037,,,,
1.7.166,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00106,,,,
1.7.166,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),157.5,,,,
1.7.166,SM,identity,[x 1] (identity x),8.75e-06,,,,
1.7.166,SM,symbol construction,[] (symbol (quote foo)),4.4e-05,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.92,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.48,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.6,,,,
1.7.166,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.52,,,,
1.7.166,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.7.166,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),2e-05,,,,
1.7.166,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3e-05,,,,
1.7.166,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.00052,,,,
1.7.166,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001309,,,,
1.7.166,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000785,,,,
1.7.166,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001243,,,,
1.7.166,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000199,,,,
1.7.166,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000847,,,,
1.7.166,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000448,,,,
1.7.166,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001768,,,,
1.7.166,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6e-05,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (first coll),0.000113,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (-first coll),7.4e-05,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (rest coll),7.9e-05,,,,
1.7.166,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.5e-05,,,,
1.7.166,SM,list ops,[] (list),9e-06,,,,
1.7.166,SM,list ops,[] (list 1 2 3),0.001469,,,,
1.7.166,SM,vector ops,[] [],9e-06,,,,
1.7.166,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000618,,,,
1.7.166,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000644,,,,
1.7.166,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000512,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (transient coll),0.00196,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000225,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000213,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000219,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (coll 0),0.000194,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000852,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000798,,,,
1.7.166,SM,vector ops,[coll []] (-conj coll 1),0.000725,,,,
1.7.166,SM,vector ops,[coll [1]] (-conj coll 2),0.000742,,,,
1.7.166,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000805,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (seq coll),0.000584,,,,
1.7.166,SM,vector ops,[coll [1 2 3]] (-seq coll),0.00044,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000338,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000181,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000198,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000194,,,,
1.7.166,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000271,,,,
1.7.166,SM,large vector ops,[] (reduce conj [] (range 40000)),8.5,,,,
1.7.166,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00175,,,,
1.7.166,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00253,,,,
1.7.166,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00179,,,,
1.7.166,SM,chunked seqs,[] (-first v),0.000179,,,,
1.7.166,SM,chunked seqs,[] (-next v),0.00019,,,,
1.7.166,SM,chunked seqs,[] (-rest v),0.00019,,,,
1.7.166,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),229.0,,,,
1.7.166,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.166,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.71,,,,
1.7.166,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.06,,,,
1.7.166,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.7.166,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),12.0,,,,
1.7.166,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),4.0,,,,
1.7.166,SM,apply,[coll (into [] (range 1000000))] (apply + coll),43.0,,,,
1.7.166,SM,apply,[] (list 1 2 3 4 5),0.000384,,,,
1.7.166,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000344,,,,
1.7.166,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000399,,,,
1.7.166,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000406,,,,
1.7.166,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.00038,,,,
1.7.166,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000837,,,,
1.7.166,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000432,,,,
1.7.166,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000422,,,,
1.7.166,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00042,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000199,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002245,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.0002,,,,
1.7.166,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000193,,,,
1.7.166,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002626,,,,
1.7.166,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000272,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000228,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000374,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000225,,,,
1.7.166,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000246,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000281,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000233,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000358,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000241,,,,
1.7.166,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000243,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.00028,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000223,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000353,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000219,,,,
1.7.166,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000244,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000226,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000218,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.00022,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000222,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000225,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000239,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000223,,,,
1.7.166,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000227,,,,
1.7.166,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",185.0,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000191,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000198,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000233,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000232,,,,
1.7.166,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),247.0,,,,
1.7.166,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00355,,,,
1.7.166,SM,persistent hash maps,[key :f0] (hash key),0.000192,,,,
1.7.166,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000192,,,,
1.7.166,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000178,,,,
1.7.166,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.54,,,,
1.7.166,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.22,,,,
1.7.166,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.17,,,,
1.7.166,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.94,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000245,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000255,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000224,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000265,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000636,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000553,,,,
1.7.166,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),314.0,,,,
1.7.166,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000319,,,,
1.7.166,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),522.0,,,,
1.7.166,SM,set ops,[] #{},0.000158,,,,
1.7.166,SM,set ops,[] #{1 3 2},0.000151,,,,
1.7.166,SM,set ops,[v [1 2 3]] (set v),0.000381,,,,
1.7.166,SM,set ops,[] (hash-set 1 2 3),0.000144,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000401,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (get coll 2),0.00022,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000207,,,,
1.7.166,SM,set ops,[coll #{1 3 2}] (coll 2),0.000198,,,,
1.7.166,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.7.166,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.099,,,,
1.7.166,SM,reader,[s big-str-data] (reader/read-string s),1.822,,,,
1.7.166,SM,range,[r (range 1000000)] (last r),45.0,,,,
1.7.166,SM,lazy-seq - first run,[r r] (last r),445.0,,,,
1.7.166,SM,lazy-seq - second run,[r r] (last r),53.0,,,,
1.7.166,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.672,,,,
1.7.166,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.462,,,,
1.7.166,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),213.0,,,,
1.7.166,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),42.25,,,,
1.7.166,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),206.75,,,,
1.7.166,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),126.75,,,,
1.7.166,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),27.0,,,,
1.7.166,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.7.166,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),241.0,,,,
1.7.166,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1533.0,,,,
1.7.166,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),30.0,,,,
1.7.166,SM,multimethods,[] (simple-multi :foo),0.000337,,,,
1.7.166,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00373,,,,
1.7.166,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0021,,,,
1.7.166,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00386,,,,
1.7.166,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),197.2,,,,
1.7.166,JSC,identity,[x 1] (identity x),1.594e-05,,,,
1.7.166,JSC,symbol construction,[] (symbol (quote foo)),4.6e-05,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.98,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.42,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.05,,,,
1.7.166,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.07,,,,
1.7.166,JSC,instance?,[coll []] (instance? PersistentVector coll),4.8e-05,,,,
1.7.166,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.4e-05,,,,
1.7.166,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),5e-05,,,,
1.7.166,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000138,,,,
1.7.166,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6.1e-05,,,,
1.7.166,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000184,,,,
1.7.166,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.5e-05,,,,
1.7.166,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.166,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.9e-05,,,,
1.7.166,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7e-05,,,,
1.7.166,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000222,,,,
1.7.166,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),4.1e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (first coll),4.7e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (-first coll),4.1e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.166,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.166,JSC,list ops,[] (list),3.2e-05,,,,
1.7.166,JSC,list ops,[] (list 1 2 3),9.6e-05,,,,
1.7.166,JSC,vector ops,[] [],3.9e-05,,,,
1.7.166,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.5e-05,,,,
1.7.166,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.7e-05,,,,
1.7.166,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.4e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.6e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (coll 0),5.3e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.7e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.7.166,JSC,vector ops,[coll []] (-conj coll 1),7.3e-05,,,,
1.7.166,JSC,vector ops,[coll [1]] (-conj coll 2),7.7e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (seq coll),5.4e-05,,,,
1.7.166,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.4e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.6e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000184,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.7.166,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.3e-05,,,,
1.7.166,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.5,,,,
1.7.166,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00034,,,,
1.7.166,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.7.166,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.166,JSC,chunked seqs,[] (-first v),5.4e-05,,,,
1.7.166,JSC,chunked seqs,[] (-next v),0.000195,,,,
1.7.166,JSC,chunked seqs,[] (-rest v),6e-05,,,,
1.7.166,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),72.0,,,,
1.7.166,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.7.166,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.11,,,,
1.7.166,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.78,,,,
1.7.166,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),28.0,,,,
1.7.166,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),15.0,,,,
1.7.166,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),10.0,,,,
1.7.166,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),37.0,,,,
1.7.166,JSC,apply,[] (list 1 2 3 4 5),0.000186,,,,
1.7.166,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000161,,,,
1.7.166,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000227,,,,
1.7.166,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000168,,,,
1.7.166,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000177,,,,
1.7.166,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000509,,,,
1.7.166,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000232,,,,
1.7.166,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000219,,,,
1.7.166,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000281,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001012,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.9e-05,,,,
1.7.166,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),5.1e-05,,,,
1.7.166,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.00104,,,,
1.7.166,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000103,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.4e-05,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000108,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.166,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.2e-05,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000105,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000111,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.2e-05,,,,
1.7.166,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.5e-05,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),9.9e-05,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.7e-05,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000113,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.2e-05,,,,
1.7.166,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.8e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.9e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.2e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",7.3e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000131,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.8e-05,,,,
1.7.166,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.6e-05,,,,
1.7.166,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.3e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),7.7e-05,,,,
1.7.166,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),75.0,,,,
1.7.166,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00195,,,,
1.7.166,JSC,persistent hash maps,[key :f0] (hash key),5e-05,,,,
1.7.166,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.166,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.7.166,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.34,,,,
1.7.166,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.29,,,,
1.7.166,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.59,,,,
1.7.166,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.64,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.8e-05,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.2e-05,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.1e-05,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000107,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000165,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000244,,,,
1.7.166,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),118.0,,,,
1.7.166,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000141,,,,
1.7.166,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),43.0,,,,
1.7.166,JSC,set ops,[] #{},3.4e-05,,,,
1.7.166,JSC,set ops,[] #{1 3 2},3.6e-05,,,,
1.7.166,JSC,set ops,[v [1 2 3]] (set v),0.000349,,,,
1.7.166,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000155,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.8e-05,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.7.166,JSC,set ops,[coll #{1 3 2}] (coll 2),9.6e-05,,,,
1.7.166,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.166,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.025,,,,
1.7.166,JSC,reader,[s big-str-data] (reader/read-string s),0.609,,,,
1.7.166,JSC,range,[r (range 1000000)] (last r),25.0,,,,
1.7.166,JSC,lazy-seq - first run,[r r] (last r),194.0,,,,
1.7.166,JSC,lazy-seq - second run,[r r] (last r),66.0,,,,
1.7.166,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.622,,,,
1.7.166,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.201,,,,
1.7.166,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),147.0,,,,
1.7.166,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),37.75,,,,
1.7.166,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.0,,,,
1.7.166,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.166,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),45.0,,,,
1.7.166,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),49.0,,,,
1.7.166,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),87.0,,,,
1.7.166,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),886.0,,,,
1.7.166,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),48.0,,,,
1.7.166,JSC,multimethods,[] (simple-multi :foo),0.000263,,,,
1.7.166,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00013,,,,
1.7.166,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00028,,,,
1.7.166,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00093,,,,
1.7.166,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),160.4,,,,
1.7.58,V8,identity,[x 1] (identity x),9.13e-06,,,,
1.7.58,V8,symbol construction,[] (symbol (quote foo)),2.5e-05,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.24,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.18,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.13,,,,
1.7.58,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.1,,,,
1.7.58,V8,instance?,[coll []] (instance? PersistentVector coll),0.000524,,,,
1.7.58,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000507,,,,
1.7.58,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000503,,,,
1.7.58,V8,array & string ops,[coll (array 1 2 3)] (seq coll),3e-05,,,,
1.7.58,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.2e-05,,,,
1.7.58,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.58,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000117,,,,
1.7.58,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.8e-05,,,,
1.7.58,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.7.58,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.7e-05,,,,
1.7.58,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000568,,,,
1.7.58,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (first coll),1.9e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (-first coll),1.7e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (rest coll),1.4e-05,,,,
1.7.58,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.7.58,V8,list ops,[] (list),3e-06,,,,
1.7.58,V8,list ops,[] (list 1 2 3),0.000547,,,,
1.7.58,V8,vector ops,[] [],3e-06,,,,
1.7.58,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000571,,,,
1.7.58,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000563,,,,
1.7.58,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000565,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2.3e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (coll 0),0.000518,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (conj coll 4),5.2e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.7.58,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.58,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.58,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (seq coll),4.2e-05,,,,
1.7.58,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.8e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.58,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.58,V8,large vector ops,[] (reduce conj [] (range 40000)),6.8,,,,
1.7.58,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00026,,,,
1.7.58,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.7.58,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.58,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.7.58,V8,chunked seqs,[] (-next v),3.2e-05,,,,
1.7.58,V8,chunked seqs,[] (-rest v),3.1e-05,,,,
1.7.58,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),557.0,,,,
1.7.58,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),34.0,,,,
1.7.58,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.19,,,,
1.7.58,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.42,,,,
1.7.58,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),82.0,,,,
1.7.58,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),16.0,,,,
1.7.58,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),29.0,,,,
1.7.58,V8,apply,[coll (into [] (range 1000000))] (apply + coll),60.0,,,,
1.7.58,V8,apply,[] (list 1 2 3 4 5),0.000129,,,,
1.7.58,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000137,,,,
1.7.58,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000436,,,,
1.7.58,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000161,,,,
1.7.58,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000242,,,,
1.7.58,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000894,,,,
1.7.58,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000312,,,,
1.7.58,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000297,,,,
1.7.58,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000248,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001425,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.5e-05,,,,
1.7.58,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.3e-05,,,,
1.7.58,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001142,,,,
1.7.58,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.2e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.3e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.5e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.8e-05,,,,
1.7.58,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),8e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.7e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),9.9e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.3e-05,,,,
1.7.58,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.8e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.7e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.4e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),9.7e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.6e-05,,,,
1.7.58,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.1e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.5e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.1e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.4e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.4e-05,,,,
1.7.58,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.1e-05,,,,
1.7.58,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.4e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.6e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.7.58,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.7.58,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00313,,,,
1.7.58,V8,persistent hash maps,[key :f0] (hash key),2e-05,,,,
1.7.58,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.1e-05,,,,
1.7.58,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.7.58,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.13,,,,
1.7.58,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.01,,,,
1.7.58,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.77,,,,
1.7.58,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.95,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (:f0 coll),5.9e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (get coll :f0),5.1e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.1e-05,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000253,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00042,,,,
1.7.58,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),84.0,,,,
1.7.58,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000169,,,,
1.7.58,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),58.0,,,,
1.7.58,V8,set ops,[] #{},3e-06,,,,
1.7.58,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.58,V8,set ops,[v [1 2 3]] (set v),0.000327,,,,
1.7.58,V8,set ops,[] (hash-set 1 2 3),3e-06,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000272,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (get coll 2),6.8e-05,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.2e-05,,,,
1.7.58,V8,set ops,[coll #{1 3 2}] (coll 2),7.1e-05,,,,
1.7.58,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.7.58,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.7.58,V8,reader,[s big-str-data] (reader/read-string s),0.75,,,,
1.7.58,V8,range,[r (range 1000000)] (last r),39.0,,,,
1.7.58,V8,lazy-seq - first run,[r r] (last r),513.0,,,,
1.7.58,V8,lazy-seq - second run,[r r] (last r),84.0,,,,
1.7.58,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.497,,,,
1.7.58,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.133,,,,
1.7.58,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),320.0,,,,
1.7.58,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),52.25,,,,
1.7.58,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.25,,,,
1.7.58,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.7.58,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),88.0,,,,
1.7.58,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),111.0,,,,
1.7.58,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1844.0,,,,
1.7.58,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1814.0,,,,
1.7.58,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),77.0,,,,
1.7.58,V8,multimethods,[] (simple-multi :foo),0.000158,,,,
1.7.58,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.58,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00033,,,,
1.7.58,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00109,,,,
1.7.58,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),149.1,,,,
1.7.58,SM,identity,[x 1] (identity x),8.13e-06,,,,
1.7.58,SM,symbol construction,[] (symbol (quote foo)),4.3e-05,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.79,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.24,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.43,,,,
1.7.58,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.45,,,,
1.7.58,SM,instance?,[coll []] (instance? PersistentVector coll),2e-05,,,,
1.7.58,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),2.1e-05,,,,
1.7.58,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.8e-05,,,,
1.7.58,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000535,,,,
1.7.58,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001408,,,,
1.7.58,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000772,,,,
1.7.58,SM,array & string ops,"[coll ""foobar""] (first coll)",0.00127,,,,
1.7.58,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000164,,,,
1.7.58,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.00081,,,,
1.7.58,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000433,,,,
1.7.58,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001787,,,,
1.7.58,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),7.2e-05,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (first coll),0.000119,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (-first coll),7.3e-05,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (rest coll),9.2e-05,,,,
1.7.58,SM,list ops,[coll (list 1 2 3)] (-rest coll),6e-05,,,,
1.7.58,SM,list ops,[] (list),8e-06,,,,
1.7.58,SM,list ops,[] (list 1 2 3),0.001323,,,,
1.7.58,SM,vector ops,[] [],8e-06,,,,
1.7.58,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000616,,,,
1.7.58,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000669,,,,
1.7.58,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000496,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (transient coll),0.00215,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000238,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000227,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000255,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (coll 0),0.000236,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000948,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.00082,,,,
1.7.58,SM,vector ops,[coll []] (-conj coll 1),0.000751,,,,
1.7.58,SM,vector ops,[coll [1]] (-conj coll 2),0.000788,,,,
1.7.58,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000811,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (seq coll),0.000555,,,,
1.7.58,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000601,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.00019,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.00018,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000205,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000185,,,,
1.7.58,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000256,,,,
1.7.58,SM,large vector ops,[] (reduce conj [] (range 40000)),8.2,,,,
1.7.58,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00175,,,,
1.7.58,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00259,,,,
1.7.58,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.0018,,,,
1.7.58,SM,chunked seqs,[] (-first v),0.000188,,,,
1.7.58,SM,chunked seqs,[] (-next v),0.000193,,,,
1.7.58,SM,chunked seqs,[] (-rest v),0.000189,,,,
1.7.58,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),230.0,,,,
1.7.58,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.58,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.57,,,,
1.7.58,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.95,,,,
1.7.58,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),82.0,,,,
1.7.58,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.58,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.7.58,SM,apply,[coll (into [] (range 1000000))] (apply + coll),42.0,,,,
1.7.58,SM,apply,[] (list 1 2 3 4 5),0.000359,,,,
1.7.58,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.00037,,,,
1.7.58,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000383,,,,
1.7.58,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000392,,,,
1.7.58,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000391,,,,
1.7.58,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000884,,,,
1.7.58,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00039,,,,
1.7.58,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000406,,,,
1.7.58,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00042,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.0002,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002272,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000202,,,,
1.7.58,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000195,,,,
1.7.58,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.00294,,,,
1.7.58,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000275,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000225,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000335,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000237,,,,
1.7.58,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000231,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000278,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000227,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000346,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000226,,,,
1.7.58,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000245,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000276,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000227,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000352,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000221,,,,
1.7.58,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000249,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000232,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000235,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.00022,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000223,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000227,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000245,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000226,,,,
1.7.58,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000234,,,,
1.7.58,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",183.0,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000193,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000195,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000239,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000241,,,,
1.7.58,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),255.0,,,,
1.7.58,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00355,,,,
1.7.58,SM,persistent hash maps,[key :f0] (hash key),0.000199,,,,
1.7.58,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000183,,,,
1.7.58,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000188,,,,
1.7.58,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.53,,,,
1.7.58,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.2,,,,
1.7.58,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.08,,,,
1.7.58,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.9,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000254,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000244,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000225,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000254,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000617,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000557,,,,
1.7.58,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),312.0,,,,
1.7.58,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000312,,,,
1.7.58,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),514.0,,,,
1.7.58,SM,set ops,[] #{},0.000161,,,,
1.7.58,SM,set ops,[] #{1 3 2},0.000149,,,,
1.7.58,SM,set ops,[v [1 2 3]] (set v),0.000416,,,,
1.7.58,SM,set ops,[] (hash-set 1 2 3),0.000148,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000405,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000209,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000208,,,,
1.7.58,SM,set ops,[coll #{1 3 2}] (coll 2),0.000207,,,,
1.7.58,SM,seq ops,[coll (range 500000)] (reduce + coll),15.0,,,,
1.7.58,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.098,,,,
1.7.58,SM,reader,[s big-str-data] (reader/read-string s),1.837,,,,
1.7.58,SM,range,[r (range 1000000)] (last r),47.0,,,,
1.7.58,SM,lazy-seq - first run,[r r] (last r),442.0,,,,
1.7.58,SM,lazy-seq - second run,[r r] (last r),54.0,,,,
1.7.58,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.63,,,,
1.7.58,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.43,,,,
1.7.58,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),216.0,,,,
1.7.58,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),44.0,,,,
1.7.58,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),208.75,,,,
1.7.58,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),126.5,,,,
1.7.58,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),29.0,,,,
1.7.58,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),30.0,,,,
1.7.58,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),242.0,,,,
1.7.58,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1600.0,,,,
1.7.58,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),34.0,,,,
1.7.58,SM,multimethods,[] (simple-multi :foo),0.000323,,,,
1.7.58,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00366,,,,
1.7.58,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00211,,,,
1.7.58,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00394,,,,
1.7.58,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),210.0,,,,
1.7.58,JSC,identity,[x 1] (identity x),1.139e-05,,,,
1.7.58,JSC,symbol construction,[] (symbol (quote foo)),4.8e-05,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.62,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.08,,,,
1.7.58,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.58,JSC,instance?,[coll []] (instance? PersistentVector coll),5.3e-05,,,,
1.7.58,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.2e-05,,,,
1.7.58,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.7.58,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000138,,,,
1.7.58,JSC,array & string ops,"[coll ""foobar""] (seq coll)",5.8e-05,,,,
1.7.58,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000187,,,,
1.7.58,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.3e-05,,,,
1.7.58,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),5.3e-05,,,,
1.7.58,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.9e-05,,,,
1.7.58,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.9e-05,,,,
1.7.58,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000222,,,,
1.7.58,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (first coll),4.5e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.58,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.58,JSC,list ops,[] (list),3.2e-05,,,,
1.7.58,JSC,list ops,[] (list 1 2 3),9.8e-05,,,,
1.7.58,JSC,vector ops,[] [],4e-05,,,,
1.7.58,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),9.9e-05,,,,
1.7.58,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.0001,,,,
1.7.58,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.3e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.2e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (coll 0),5.2e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.2e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.3e-05,,,,
1.7.58,JSC,vector ops,[coll []] (-conj coll 1),7.3e-05,,,,
1.7.58,JSC,vector ops,[coll [1]] (-conj coll 2),7.3e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (seq coll),6.1e-05,,,,
1.7.58,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.3e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (first coll),4.9e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.8e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000184,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.7.58,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.9e-05,,,,
1.7.58,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.7.58,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00034,,,,
1.7.58,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00056,,,,
1.7.58,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.58,JSC,chunked seqs,[] (-first v),6e-05,,,,
1.7.58,JSC,chunked seqs,[] (-next v),0.000189,,,,
1.7.58,JSC,chunked seqs,[] (-rest v),6.2e-05,,,,
1.7.58,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),72.0,,,,
1.7.58,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),17.0,,,,
1.7.58,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.13,,,,
1.7.58,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.59,,,,
1.7.58,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),28.0,,,,
1.7.58,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.58,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.7.58,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),40.0,,,,
1.7.58,JSC,apply,[] (list 1 2 3 4 5),0.000184,,,,
1.7.58,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000158,,,,
1.7.58,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000221,,,,
1.7.58,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000167,,,,
1.7.58,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000174,,,,
1.7.58,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000511,,,,
1.7.58,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000235,,,,
1.7.58,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000212,,,,
1.7.58,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000278,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5.4e-05,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00089,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.6e-05,,,,
1.7.58,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.7.58,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001048,,,,
1.7.58,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000108,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000101,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.58,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000111,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.8e-05,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000115,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.6e-05,,,,
1.7.58,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.9e-05,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000104,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000113,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.4e-05,,,,
1.7.58,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.7e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.5e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",7.5e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.3e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000127,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",7.7e-05,,,,
1.7.58,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",9.1e-05,,,,
1.7.58,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),7.1e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.2e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.1e-05,,,,
1.7.58,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),71.0,,,,
1.7.58,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00204,,,,
1.7.58,JSC,persistent hash maps,[key :f0] (hash key),5.2e-05,,,,
1.7.58,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.58,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.7.58,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.31,,,,
1.7.58,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.28,,,,
1.7.58,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.67,,,,
1.7.58,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.73,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.0001,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.3e-05,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),7.7e-05,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000106,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000165,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00023,,,,
1.7.58,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),121.0,,,,
1.7.58,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000132,,,,
1.7.58,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),39.0,,,,
1.7.58,JSC,set ops,[] #{},3.9e-05,,,,
1.7.58,JSC,set ops,[] #{1 3 2},3.4e-05,,,,
1.7.58,JSC,set ops,[v [1 2 3]] (set v),0.000352,,,,
1.7.58,JSC,set ops,[] (hash-set 1 2 3),3.3e-05,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.00016,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.1e-05,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.58,JSC,set ops,[coll #{1 3 2}] (coll 2),9.5e-05,,,,
1.7.58,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.58,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.025,,,,
1.7.58,JSC,reader,[s big-str-data] (reader/read-string s),0.623,,,,
1.7.58,JSC,range,[r (range 1000000)] (last r),27.0,,,,
1.7.58,JSC,lazy-seq - first run,[r r] (last r),198.0,,,,
1.7.58,JSC,lazy-seq - second run,[r r] (last r),62.0,,,,
1.7.58,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.618,,,,
1.7.58,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.201,,,,
1.7.58,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),148.0,,,,
1.7.58,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),39.75,,,,
1.7.58,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),47.25,,,,
1.7.58,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.58,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),43.0,,,,
1.7.58,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),44.0,,,,
1.7.58,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),92.0,,,,
1.7.58,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),868.0,,,,
1.7.58,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),48.0,,,,
1.7.58,JSC,multimethods,[] (simple-multi :foo),0.000249,,,,
1.7.58,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00013,,,,
1.7.58,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00032,,,,
1.7.58,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00094,,,,
1.7.58,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),146.2,,,,
1.7.48,V8,identity,[x 1] (identity x),9.15e-06,,,,
1.7.48,V8,symbol construction,[] (symbol (quote foo)),2.3e-05,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.25,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.21,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.11,,,,
1.7.48,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.48,V8,instance?,[coll []] (instance? PersistentVector coll),0.000525,,,,
1.7.48,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.000508,,,,
1.7.48,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000505,,,,
1.7.48,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.6e-05,,,,
1.7.48,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.4e-05,,,,
1.7.48,V8,array & string ops,[coll (array 1 2 3)] (first coll),4e-05,,,,
1.7.48,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000113,,,,
1.7.48,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.8e-05,,,,
1.7.48,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.6e-05,,,,
1.7.48,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.4e-05,,,,
1.7.48,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000573,,,,
1.7.48,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (first coll),1.9e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (-first coll),1.5e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (rest coll),1.9e-05,,,,
1.7.48,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.5e-05,,,,
1.7.48,V8,list ops,[] (list),4e-06,,,,
1.7.48,V8,list ops,[] (list 1 2 3),0.00055,,,,
1.7.48,V8,vector ops,[] [],4e-06,,,,
1.7.48,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00057,,,,
1.7.48,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000563,,,,
1.7.48,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000566,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (transient coll),0.00022,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.2e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-nth coll 0),2e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (coll 0),0.000505,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.7.48,V8,vector ops,[coll []] (-conj coll 1),3.8e-05,,,,
1.7.48,V8,vector ops,[coll [1]] (-conj coll 2),4.1e-05,,,,
1.7.48,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (seq coll),4.1e-05,,,,
1.7.48,V8,vector ops,[coll [1 2 3]] (-seq coll),2.2e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.8e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2e-05,,,,
1.7.48,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.2e-05,,,,
1.7.48,V8,large vector ops,[] (reduce conj [] (range 40000)),6.9,,,,
1.7.48,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00026,,,,
1.7.48,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.7.48,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00024,,,,
1.7.48,V8,chunked seqs,[] (-first v),1.7e-05,,,,
1.7.48,V8,chunked seqs,[] (-next v),3.3e-05,,,,
1.7.48,V8,chunked seqs,[] (-rest v),2.9e-05,,,,
1.7.48,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),555.0,,,,
1.7.48,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),34.0,,,,
1.7.48,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.18,,,,
1.7.48,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.59,,,,
1.7.48,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),77.0,,,,
1.7.48,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),16.0,,,,
1.7.48,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),28.0,,,,
1.7.48,V8,apply,[coll (into [] (range 1000000))] (apply + coll),78.0,,,,
1.7.48,V8,apply,[] (list 1 2 3 4 5),0.000124,,,,
1.7.48,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.00014,,,,
1.7.48,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000431,,,,
1.7.48,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.00014,,,,
1.7.48,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000254,,,,
1.7.48,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000807,,,,
1.7.48,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000315,,,,
1.7.48,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000298,,,,
1.7.48,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000246,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.5e-05,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001476,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.3e-05,,,,
1.7.48,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.5e-05,,,,
1.7.48,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001151,,,,
1.7.48,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.4e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.2e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.5e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.7e-05,,,,
1.7.48,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.6e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.1e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.9e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000102,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.3e-05,,,,
1.7.48,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.2e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),8.5e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.4e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.0001,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),8e-05,,,,
1.7.48,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),8.7e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.9e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.7e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.4e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.3e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",9.3e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.1e-05,,,,
1.7.48,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.4e-05,,,,
1.7.48,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.4e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.2e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.7e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.7.48,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.7.48,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00325,,,,
1.7.48,V8,persistent hash maps,[key :f0] (hash key),2.4e-05,,,,
1.7.48,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.3e-05,,,,
1.7.48,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.7.48,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.17,,,,
1.7.48,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.1,,,,
1.7.48,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.78,,,,
1.7.48,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.0,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (:f0 coll),6.2e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (get coll :f0),5.1e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.1e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8e-05,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000249,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000416,,,,
1.7.48,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),82.0,,,,
1.7.48,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000161,,,,
1.7.48,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),56.0,,,,
1.7.48,V8,set ops,[] #{},4e-06,,,,
1.7.48,V8,set ops,[] #{1 3 2},3e-06,,,,
1.7.48,V8,set ops,[v [1 2 3]] (set v),0.000323,,,,
1.7.48,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.00027,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (get coll 2),6.8e-05,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.2e-05,,,,
1.7.48,V8,set ops,[coll #{1 3 2}] (coll 2),7.5e-05,,,,
1.7.48,V8,seq ops,[coll (range 500000)] (reduce + coll),25.0,,,,
1.7.48,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.031,,,,
1.7.48,V8,reader,[s big-str-data] (reader/read-string s),0.734,,,,
1.7.48,V8,range,[r (range 1000000)] (last r),42.0,,,,
1.7.48,V8,lazy-seq - first run,[r r] (last r),506.0,,,,
1.7.48,V8,lazy-seq - second run,[r r] (last r),83.0,,,,
1.7.48,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.465,,,,
1.7.48,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.135,,,,
1.7.48,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),339.0,,,,
1.7.48,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),58.0,,,,
1.7.48,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),46.5,,,,
1.7.48,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),8.0,,,,
1.7.48,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),83.0,,,,
1.7.48,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),125.0,,,,
1.7.48,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1860.0,,,,
1.7.48,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1658.0,,,,
1.7.48,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),78.0,,,,
1.7.48,V8,multimethods,[] (simple-multi :foo),0.000153,,,,
1.7.48,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.48,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00036,,,,
1.7.48,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00108,,,,
1.7.48,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),151.1,,,,
1.7.48,SM,identity,[x 1] (identity x),8.17e-06,,,,
1.7.48,SM,symbol construction,[] (symbol (quote foo)),4.7e-05,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.68,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.9,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.42,,,,
1.7.48,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.46,,,,
1.7.48,SM,instance?,[coll []] (instance? PersistentVector coll),1.7e-05,,,,
1.7.48,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.9e-05,,,,
1.7.48,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),3e-05,,,,
1.7.48,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000546,,,,
1.7.48,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001226,,,,
1.7.48,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000808,,,,
1.7.48,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001333,,,,
1.7.48,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000173,,,,
1.7.48,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.00082,,,,
1.7.48,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000405,,,,
1.7.48,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00185,,,,
1.7.48,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.4e-05,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (first coll),0.000126,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (-first coll),7.6e-05,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (rest coll),8e-05,,,,
1.7.48,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.5e-05,,,,
1.7.48,SM,list ops,[] (list),8e-06,,,,
1.7.48,SM,list ops,[] (list 1 2 3),0.001192,,,,
1.7.48,SM,vector ops,[] [],9e-06,,,,
1.7.48,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.00055,,,,
1.7.48,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000631,,,,
1.7.48,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000531,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (transient coll),0.00186,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000224,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.00021,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000216,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (coll 0),0.000196,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000843,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000786,,,,
1.7.48,SM,vector ops,[coll []] (-conj coll 1),0.000718,,,,
1.7.48,SM,vector ops,[coll [1]] (-conj coll 2),0.000747,,,,
1.7.48,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000776,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (seq coll),0.000649,,,,
1.7.48,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000421,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000114,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (-first coll),9.2e-05,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000519,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000203,,,,
1.7.48,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.00027,,,,
1.7.48,SM,large vector ops,[] (reduce conj [] (range 40000)),8.3,,,,
1.7.48,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00178,,,,
1.7.48,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00259,,,,
1.7.48,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00177,,,,
1.7.48,SM,chunked seqs,[] (-first v),0.000181,,,,
1.7.48,SM,chunked seqs,[] (-next v),0.000189,,,,
1.7.48,SM,chunked seqs,[] (-rest v),0.000188,,,,
1.7.48,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),232.0,,,,
1.7.48,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.48,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.55,,,,
1.7.48,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),14.0,,,,
1.7.48,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),76.0,,,,
1.7.48,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.48,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.7.48,SM,apply,[coll (into [] (range 1000000))] (apply + coll),45.0,,,,
1.7.48,SM,apply,[] (list 1 2 3 4 5),0.000406,,,,
1.7.48,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000339,,,,
1.7.48,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000418,,,,
1.7.48,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000399,,,,
1.7.48,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000359,,,,
1.7.48,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000782,,,,
1.7.48,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000387,,,,
1.7.48,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000388,,,,
1.7.48,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000423,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000206,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002382,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000198,,,,
1.7.48,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000193,,,,
1.7.48,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002902,,,,
1.7.48,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000264,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.00023,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000334,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000223,,,,
1.7.48,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000228,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000288,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000234,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000353,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.00025,,,,
1.7.48,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000243,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.00028,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000222,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000349,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000226,,,,
1.7.48,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000243,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000231,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000222,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.00022,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000219,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000217,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000242,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000226,,,,
1.7.48,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000222,,,,
1.7.48,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",185.0,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000195,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000189,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000233,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000236,,,,
1.7.48,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),254.0,,,,
1.7.48,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0035,,,,
1.7.48,SM,persistent hash maps,[key :f0] (hash key),0.000187,,,,
1.7.48,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.00018,,,,
1.7.48,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000182,,,,
1.7.48,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.53,,,,
1.7.48,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.22,,,,
1.7.48,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.05,,,,
1.7.48,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.75,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000259,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000248,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000215,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000256,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000609,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00056,,,,
1.7.48,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),316.0,,,,
1.7.48,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000287,,,,
1.7.48,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),531.0,,,,
1.7.48,SM,set ops,[] #{},0.000154,,,,
1.7.48,SM,set ops,[] #{1 3 2},0.000148,,,,
1.7.48,SM,set ops,[v [1 2 3]] (set v),0.000388,,,,
1.7.48,SM,set ops,[] (hash-set 1 2 3),0.000148,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000384,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (get coll 2),0.00021,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000202,,,,
1.7.48,SM,set ops,[coll #{1 3 2}] (coll 2),0.000208,,,,
1.7.48,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.48,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.097,,,,
1.7.48,SM,reader,[s big-str-data] (reader/read-string s),1.821,,,,
1.7.48,SM,range,[r (range 1000000)] (last r),45.0,,,,
1.7.48,SM,lazy-seq - first run,[r r] (last r),451.0,,,,
1.7.48,SM,lazy-seq - second run,[r r] (last r),56.0,,,,
1.7.48,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.616,,,,
1.7.48,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.462,,,,
1.7.48,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),216.0,,,,
1.7.48,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),43.75,,,,
1.7.48,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),200.5,,,,
1.7.48,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),126.5,,,,
1.7.48,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),26.0,,,,
1.7.48,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),34.0,,,,
1.7.48,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),241.0,,,,
1.7.48,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1569.0,,,,
1.7.48,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),27.0,,,,
1.7.48,SM,multimethods,[] (simple-multi :foo),0.000319,,,,
1.7.48,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00372,,,,
1.7.48,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00211,,,,
1.7.48,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00389,,,,
1.7.48,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),201.8,,,,
1.7.48,JSC,identity,[x 1] (identity x),1.128e-05,,,,
1.7.48,JSC,symbol construction,[] (symbol (quote foo)),4.5e-05,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.66,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.61,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.08,,,,
1.7.48,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.05,,,,
1.7.48,JSC,instance?,[coll []] (instance? PersistentVector coll),5.2e-05,,,,
1.7.48,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.5e-05,,,,
1.7.48,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.8e-05,,,,
1.7.48,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000136,,,,
1.7.48,JSC,array & string ops,"[coll ""foobar""] (seq coll)",6e-05,,,,
1.7.48,JSC,array & string ops,[coll (array 1 2 3)] (first coll),0.000183,,,,
1.7.48,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.6e-05,,,,
1.7.48,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.5e-05,,,,
1.7.48,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.8e-05,,,,
1.7.48,JSC,cloning & specify,[coll [1 2 3]] (clone coll),7.3e-05,,,,
1.7.48,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000223,,,,
1.7.48,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.8e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (first coll),4.2e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.48,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.7e-05,,,,
1.7.48,JSC,list ops,[] (list),3.2e-05,,,,
1.7.48,JSC,list ops,[] (list 1 2 3),9.6e-05,,,,
1.7.48,JSC,vector ops,[] [],3.8e-05,,,,
1.7.48,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.7.48,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.8e-05,,,,
1.7.48,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.6e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.4e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.5e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.7.48,JSC,vector ops,[coll []] (-conj coll 1),8e-05,,,,
1.7.48,JSC,vector ops,[coll [1]] (-conj coll 2),7.6e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (seq coll),5.8e-05,,,,
1.7.48,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (first coll),4.8e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.7e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.00021,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),6.1e-05,,,,
1.7.48,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.7e-05,,,,
1.7.48,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.1,,,,
1.7.48,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.7.48,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00059,,,,
1.7.48,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00022,,,,
1.7.48,JSC,chunked seqs,[] (-first v),5.4e-05,,,,
1.7.48,JSC,chunked seqs,[] (-next v),0.000226,,,,
1.7.48,JSC,chunked seqs,[] (-rest v),7.2e-05,,,,
1.7.48,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),78.0,,,,
1.7.48,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),18.0,,,,
1.7.48,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.86,,,,
1.7.48,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),10.36,,,,
1.7.48,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),29.0,,,,
1.7.48,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),13.0,,,,
1.7.48,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.7.48,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),40.0,,,,
1.7.48,JSC,apply,[] (list 1 2 3 4 5),0.000207,,,,
1.7.48,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.00019,,,,
1.7.48,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000245,,,,
1.7.48,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000175,,,,
1.7.48,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.00018,,,,
1.7.48,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000522,,,,
1.7.48,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000232,,,,
1.7.48,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000209,,,,
1.7.48,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000276,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),5e-05,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001004,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),5.1e-05,,,,
1.7.48,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.9e-05,,,,
1.7.48,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001041,,,,
1.7.48,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000103,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.0001,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.48,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.2e-05,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000112,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.9e-05,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000115,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.5e-05,,,,
1.7.48,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8.5e-05,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000101,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),6.9e-05,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000116,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),7.3e-05,,,,
1.7.48,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),7.8e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.7e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",6.8e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",6.1e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",6.7e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.7e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000122,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8e-05,,,,
1.7.48,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.7e-05,,,,
1.7.48,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),7.1e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),6e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.7e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8.5e-05,,,,
1.7.48,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),74.0,,,,
1.7.48,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00193,,,,
1.7.48,JSC,persistent hash maps,[key :f0] (hash key),5.4e-05,,,,
1.7.48,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.48,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.7.48,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.31,,,,
1.7.48,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.28,,,,
1.7.48,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.59,,,,
1.7.48,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.66,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (:f0 coll),9.7e-05,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (get coll :f0),9e-05,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.3e-05,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000105,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000164,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000229,,,,
1.7.48,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),120.0,,,,
1.7.48,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000134,,,,
1.7.48,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),39.0,,,,
1.7.48,JSC,set ops,[] #{},3.7e-05,,,,
1.7.48,JSC,set ops,[] #{1 3 2},3.9e-05,,,,
1.7.48,JSC,set ops,[v [1 2 3]] (set v),0.000347,,,,
1.7.48,JSC,set ops,[] (hash-set 1 2 3),3.7e-05,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.00016,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.5e-05,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.6e-05,,,,
1.7.48,JSC,set ops,[coll #{1 3 2}] (coll 2),9.3e-05,,,,
1.7.48,JSC,seq ops,[coll (range 500000)] (reduce + coll),18.0,,,,
1.7.48,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.028,,,,
1.7.48,JSC,reader,[s big-str-data] (reader/read-string s),0.647,,,,
1.7.48,JSC,range,[r (range 1000000)] (last r),29.0,,,,
1.7.48,JSC,lazy-seq - first run,[r r] (last r),196.0,,,,
1.7.48,JSC,lazy-seq - second run,[r r] (last r),64.0,,,,
1.7.48,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.63,,,,
1.7.48,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.202,,,,
1.7.48,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),157.0,,,,
1.7.48,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),39.25,,,,
1.7.48,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),45.25,,,,
1.7.48,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),12.75,,,,
1.7.48,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),46.0,,,,
1.7.48,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),44.0,,,,
1.7.48,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),94.0,,,,
1.7.48,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),782.0,,,,
1.7.48,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),46.0,,,,
1.7.48,JSC,multimethods,[] (simple-multi :foo),0.000361,,,,
1.7.48,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.48,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0003,,,,
1.7.48,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00081,,,,
1.7.48,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),143.5,,,,
1.7.28,V8,identity,[x 1] (identity x),9.13e-06,,,,
1.7.28,V8,symbol construction,[] (symbol (quote foo)),0.000568,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.23,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.19,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.7.28,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.09,,,,
1.7.28,V8,instance?,[coll []] (instance? PersistentVector coll),0.000538,,,,
1.7.28,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.00051,,,,
1.7.28,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.000507,,,,
1.7.28,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.5e-05,,,,
1.7.28,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.9e-05,,,,
1.7.28,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.28,V8,array & string ops,"[coll ""foobar""] (first coll)",0.000111,,,,
1.7.28,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.8e-05,,,,
1.7.28,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.4e-05,,,,
1.7.28,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.3e-05,,,,
1.7.28,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000576,,,,
1.7.28,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.3e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (first coll),2.3e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (-first coll),1.5e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (rest coll),1.6e-05,,,,
1.7.28,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.5e-05,,,,
1.7.28,V8,list ops,[] (list),5e-06,,,,
1.7.28,V8,list ops,[] (list 1 2 3),0.000554,,,,
1.7.28,V8,vector ops,[] [],4e-06,,,,
1.7.28,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000577,,,,
1.7.28,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000556,,,,
1.7.28,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.00057,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (transient coll),0.00021,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.5e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.8e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (coll 0),0.000512,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.8e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.7.28,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.28,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.28,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (seq coll),3.9e-05,,,,
1.7.28,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.6e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.28,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.2e-05,,,,
1.7.28,V8,large vector ops,[] (reduce conj [] (range 40000)),6.7,,,,
1.7.28,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00026,,,,
1.7.28,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00068,,,,
1.7.28,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.28,V8,chunked seqs,[] (-first v),1.5e-05,,,,
1.7.28,V8,chunked seqs,[] (-next v),3.4e-05,,,,
1.7.28,V8,chunked seqs,[] (-rest v),2.9e-05,,,,
1.7.28,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),62.0,,,,
1.7.28,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),35.0,,,,
1.7.28,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.18,,,,
1.7.28,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.48,,,,
1.7.28,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),78.0,,,,
1.7.28,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.7.28,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),29.0,,,,
1.7.28,V8,apply,[coll (into [] (range 1000000))] (apply + coll),59.0,,,,
1.7.28,V8,apply,[] (list 1 2 3 4 5),0.000122,,,,
1.7.28,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.00013,,,,
1.7.28,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000426,,,,
1.7.28,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.000138,,,,
1.7.28,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000233,,,,
1.7.28,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000826,,,,
1.7.28,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.00031,,,,
1.7.28,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000301,,,,
1.7.28,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00025,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.4e-05,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00141,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.7.28,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.7.28,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001146,,,,
1.7.28,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.4e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.2e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.2e-05,,,,
1.7.28,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.7e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.2e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.3e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000108,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.7.28,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.9e-05,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.00016,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000103,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000174,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000118,,,,
1.7.28,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000128,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.6e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000104,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.7e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",9.8e-05,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",5.5e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.00013,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.3e-05,,,,
1.7.28,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.8e-05,,,,
1.7.28,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4.5e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.4e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.5e-05,,,,
1.7.28,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),37.0,,,,
1.7.28,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.0033,,,,
1.7.28,V8,persistent hash maps,[key :f0] (hash key),2.1e-05,,,,
1.7.28,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.2e-05,,,,
1.7.28,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),1.9e-05,,,,
1.7.28,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.13,,,,
1.7.28,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.03,,,,
1.7.28,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.8,,,,
1.7.28,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.1,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (:f0 coll),6.1e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (get coll :f0),5.3e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),8.8e-05,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000358,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000438,,,,
1.7.28,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),80.0,,,,
1.7.28,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000164,,,,
1.7.28,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),54.0,,,,
1.7.28,V8,set ops,[] #{},5e-06,,,,
1.7.28,V8,set ops,[] #{1 3 2},5e-06,,,,
1.7.28,V8,set ops,[v [1 2 3]] (set v),0.000318,,,,
1.7.28,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000279,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (get coll 2),6.9e-05,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.5e-05,,,,
1.7.28,V8,set ops,[coll #{1 3 2}] (coll 2),7.4e-05,,,,
1.7.28,V8,seq ops,[coll (range 500000)] (reduce + coll),24.0,,,,
1.7.28,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.031,,,,
1.7.28,V8,reader,[s big-str-data] (reader/read-string s),0.756,,,,
1.7.28,V8,range,[r (range 1000000)] (last r),39.0,,,,
1.7.28,V8,lazy-seq - first run,[r r] (last r),521.0,,,,
1.7.28,V8,lazy-seq - second run,[r r] (last r),90.0,,,,
1.7.28,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.479,,,,
1.7.28,V8,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.13,,,,
1.7.28,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),321.0,,,,
1.7.28,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),57.25,,,,
1.7.28,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),55.75,,,,
1.7.28,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),138.25,,,,
1.7.28,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),87.0,,,,
1.7.28,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),130.0,,,,
1.7.28,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),2275.0,,,,
1.7.28,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1641.0,,,,
1.7.28,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),83.0,,,,
1.7.28,V8,multimethods,[] (simple-multi :foo),0.00064,,,,
1.7.28,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.28,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0003,,,,
1.7.28,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.0012,,,,
1.7.28,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),205.6,,,,
1.7.28,SM,identity,[x 1] (identity x),8.3e-06,,,,
1.7.28,SM,symbol construction,[] (symbol (quote foo)),0.000378,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.58,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),3.1,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.37,,,,
1.7.28,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.38,,,,
1.7.28,SM,instance?,[coll []] (instance? PersistentVector coll),1.5e-05,,,,
1.7.28,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.8e-05,,,,
1.7.28,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.8e-05,,,,
1.7.28,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000592,,,,
1.7.28,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001494,,,,
1.7.28,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000782,,,,
1.7.28,SM,array & string ops,"[coll ""foobar""] (first coll)",0.001366,,,,
1.7.28,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000163,,,,
1.7.28,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000786,,,,
1.7.28,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000425,,,,
1.7.28,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.002015,,,,
1.7.28,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),7.2e-05,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (first coll),0.000108,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (-first coll),6.5e-05,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (rest coll),8.2e-05,,,,
1.7.28,SM,list ops,[coll (list 1 2 3)] (-rest coll),5.7e-05,,,,
1.7.28,SM,list ops,[] (list),9e-06,,,,
1.7.28,SM,list ops,[] (list 1 2 3),0.001312,,,,
1.7.28,SM,vector ops,[] [],9e-06,,,,
1.7.28,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000554,,,,
1.7.28,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000694,,,,
1.7.28,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000496,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (transient coll),0.00188,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000244,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000262,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000233,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (coll 0),0.000194,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000931,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.0009,,,,
1.7.28,SM,vector ops,[coll []] (-conj coll 1),0.000728,,,,
1.7.28,SM,vector ops,[coll [1]] (-conj coll 2),0.000763,,,,
1.7.28,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000797,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (seq coll),0.000751,,,,
1.7.28,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000391,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000198,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (-first coll),0.000186,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000209,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000194,,,,
1.7.28,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000276,,,,
1.7.28,SM,large vector ops,[] (reduce conj [] (range 40000)),8.2,,,,
1.7.28,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00177,,,,
1.7.28,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.0025,,,,
1.7.28,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.0018,,,,
1.7.28,SM,chunked seqs,[] (-first v),0.000186,,,,
1.7.28,SM,chunked seqs,[] (-next v),0.000199,,,,
1.7.28,SM,chunked seqs,[] (-rest v),0.000231,,,,
1.7.28,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),295.0,,,,
1.7.28,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),16.0,,,,
1.7.28,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),7.76,,,,
1.7.28,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),15.98,,,,
1.7.28,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),79.0,,,,
1.7.28,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.28,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.7.28,SM,apply,[coll (into [] (range 1000000))] (apply + coll),47.0,,,,
1.7.28,SM,apply,[] (list 1 2 3 4 5),0.0004,,,,
1.7.28,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000365,,,,
1.7.28,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000393,,,,
1.7.28,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000372,,,,
1.7.28,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000416,,,,
1.7.28,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000782,,,,
1.7.28,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000392,,,,
1.7.28,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000409,,,,
1.7.28,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000439,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000209,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002455,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000205,,,,
1.7.28,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000198,,,,
1.7.28,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.003012,,,,
1.7.28,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000286,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000235,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000436,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000265,,,,
1.7.28,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000256,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000276,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000235,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000358,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000229,,,,
1.7.28,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000253,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000888,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000501,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.00093,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000495,,,,
1.7.28,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000521,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000223,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000544,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000233,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.000501,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000222,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.0005,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000222,,,,
1.7.28,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000224,,,,
1.7.28,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",191.0,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000196,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000197,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000243,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000246,,,,
1.7.28,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),257.0,,,,
1.7.28,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00337,,,,
1.7.28,SM,persistent hash maps,[key :f0] (hash key),0.00019,,,,
1.7.28,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000184,,,,
1.7.28,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.000197,,,,
1.7.28,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.52,,,,
1.7.28,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.29,,,,
1.7.28,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.04,,,,
1.7.28,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.85,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000251,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000246,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000226,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000282,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000621,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000624,,,,
1.7.28,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),297.0,,,,
1.7.28,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000297,,,,
1.7.28,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),513.0,,,,
1.7.28,SM,set ops,[] #{},0.000163,,,,
1.7.28,SM,set ops,[] #{1 3 2},0.000156,,,,
1.7.28,SM,set ops,[v [1 2 3]] (set v),0.000425,,,,
1.7.28,SM,set ops,[] (hash-set 1 2 3),0.000148,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000404,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000214,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000213,,,,
1.7.28,SM,set ops,[coll #{1 3 2}] (coll 2),0.000218,,,,
1.7.28,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.28,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.103,,,,
1.7.28,SM,reader,[s big-str-data] (reader/read-string s),1.819,,,,
1.7.28,SM,range,[r (range 1000000)] (last r),50.0,,,,
1.7.28,SM,lazy-seq - first run,[r r] (last r),449.0,,,,
1.7.28,SM,lazy-seq - second run,[r r] (last r),52.0,,,,
1.7.28,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.617,,,,
1.7.28,SM,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.429,,,,
1.7.28,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),232.0,,,,
1.7.28,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),44.25,,,,
1.7.28,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),213.0,,,,
1.7.28,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),127.75,,,,
1.7.28,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),30.0,,,,
1.7.28,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.7.28,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),243.0,,,,
1.7.28,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1545.0,,,,
1.7.28,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),33.0,,,,
1.7.28,SM,multimethods,[] (simple-multi :foo),0.000325,,,,
1.7.28,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00371,,,,
1.7.28,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00215,,,,
1.7.28,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00393,,,,
1.7.28,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),234.9,,,,
1.7.28,JSC,identity,[x 1] (identity x),1.382e-05,,,,
1.7.28,JSC,symbol construction,[] (symbol (quote foo)),0.000183,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.11,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.14,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.7.28,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.7.28,JSC,instance?,[coll []] (instance? PersistentVector coll),5e-05,,,,
1.7.28,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.2e-05,,,,
1.7.28,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.7.28,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000155,,,,
1.7.28,JSC,array & string ops,"[coll ""foobar""] (seq coll)",0.000199,,,,
1.7.28,JSC,array & string ops,[coll (array 1 2 3)] (first coll),7.5e-05,,,,
1.7.28,JSC,array & string ops,"[coll ""foobar""] (first coll)",8.2e-05,,,,
1.7.28,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.28,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",4.9e-05,,,,
1.7.28,JSC,cloning & specify,[coll [1 2 3]] (clone coll),6.2e-05,,,,
1.7.28,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.00023,,,,
1.7.28,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.9e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (first coll),4.7e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (-first coll),3.9e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.8e-05,,,,
1.7.28,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.8e-05,,,,
1.7.28,JSC,list ops,[] (list),3.3e-05,,,,
1.7.28,JSC,list ops,[] (list 1 2 3),0.000101,,,,
1.7.28,JSC,vector ops,[] [],3.6e-05,,,,
1.7.28,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000102,,,,
1.7.28,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000102,,,,
1.7.28,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),9.8e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (transient coll),0.00031,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.5e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.7e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (coll 0),5.1e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (conj coll 4),9.5e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),7.7e-05,,,,
1.7.28,JSC,vector ops,[coll []] (-conj coll 1),7.9e-05,,,,
1.7.28,JSC,vector ops,[coll [1]] (-conj coll 2),7.2e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.6e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (seq coll),5.9e-05,,,,
1.7.28,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.1e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),6.1e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000192,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.1e-05,,,,
1.7.28,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.3e-05,,,,
1.7.28,JSC,large vector ops,[] (reduce conj [] (range 40000)),4.9,,,,
1.7.28,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00036,,,,
1.7.28,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00058,,,,
1.7.28,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.28,JSC,chunked seqs,[] (-first v),5.6e-05,,,,
1.7.28,JSC,chunked seqs,[] (-next v),0.000193,,,,
1.7.28,JSC,chunked seqs,[] (-rest v),6.2e-05,,,,
1.7.28,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),69.0,,,,
1.7.28,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),18.0,,,,
1.7.28,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.08,,,,
1.7.28,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.65,,,,
1.7.28,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),26.0,,,,
1.7.28,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),12.0,,,,
1.7.28,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),9.0,,,,
1.7.28,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),43.0,,,,
1.7.28,JSC,apply,[] (list 1 2 3 4 5),0.000188,,,,
1.7.28,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000159,,,,
1.7.28,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000227,,,,
1.7.28,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000167,,,,
1.7.28,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.000175,,,,
1.7.28,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000519,,,,
1.7.28,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000228,,,,
1.7.28,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000208,,,,
1.7.28,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000273,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.9e-05,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.001009,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.28,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.8e-05,,,,
1.7.28,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001039,,,,
1.7.28,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000101,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.8e-05,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000107,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.4e-05,,,,
1.7.28,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),6.8e-05,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000108,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),7.6e-05,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000113,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.4e-05,,,,
1.7.28,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),8e-05,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000148,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),9.2e-05,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000157,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),9.1e-05,,,,
1.7.28,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),9.6e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.9e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",8.8e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",8.6e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6.9e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000134,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8e-05,,,,
1.7.28,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.5e-05,,,,
1.7.28,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.2e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8e-05,,,,
1.7.28,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),70.0,,,,
1.7.28,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00204,,,,
1.7.28,JSC,persistent hash maps,[key :f0] (hash key),5.3e-05,,,,
1.7.28,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.6e-05,,,,
1.7.28,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.6e-05,,,,
1.7.28,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.33,,,,
1.7.28,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.32,,,,
1.7.28,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.59,,,,
1.7.28,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.67,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.000102,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (get coll :f0),8.9e-05,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8e-05,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000108,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000187,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00024,,,,
1.7.28,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),118.0,,,,
1.7.28,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000141,,,,
1.7.28,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),43.0,,,,
1.7.28,JSC,set ops,[] #{},3.7e-05,,,,
1.7.28,JSC,set ops,[] #{1 3 2},3.9e-05,,,,
1.7.28,JSC,set ops,[v [1 2 3]] (set v),0.000345,,,,
1.7.28,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000153,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.1e-05,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),7.7e-05,,,,
1.7.28,JSC,set ops,[coll #{1 3 2}] (coll 2),9.7e-05,,,,
1.7.28,JSC,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.28,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.025,,,,
1.7.28,JSC,reader,[s big-str-data] (reader/read-string s),0.649,,,,
1.7.28,JSC,range,[r (range 1000000)] (last r),24.0,,,,
1.7.28,JSC,lazy-seq - first run,[r r] (last r),198.0,,,,
1.7.28,JSC,lazy-seq - second run,[r r] (last r),64.0,,,,
1.7.28,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.625,,,,
1.7.28,JSC,Direct iterator,[] (let [iter (-iterator ipmap)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.197,,,,
1.7.28,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),145.0,,,,
1.7.28,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),40.75,,,,
1.7.28,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),44.75,,,,
1.7.28,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.28,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),43.0,,,,
1.7.28,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),46.0,,,,
1.7.28,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),96.0,,,,
1.7.28,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),777.0,,,,
1.7.28,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),48.0,,,,
1.7.28,JSC,multimethods,[] (simple-multi :foo),0.000352,,,,
1.7.28,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),9e-05,,,,
1.7.28,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00032,,,,
1.7.28,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00081,,,,
1.7.28,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),143.7,,,,
1.7.10,V8,identity,[x 1] (identity x),9.06e-06,,,,
1.7.10,V8,symbol construction,[] (symbol (quote foo)),0.000578,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.28,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.2,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.1,,,,
1.7.10,V8,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.08,,,,
1.7.10,V8,instance?,[coll []] (instance? PersistentVector coll),0.000521,,,,
1.7.10,V8,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),0.00053,,,,
1.7.10,V8,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),0.00051,,,,
1.7.10,V8,array & string ops,[coll (array 1 2 3)] (seq coll),2.8e-05,,,,
1.7.10,V8,array & string ops,"[coll ""foobar""] (seq coll)",9.9e-05,,,,
1.7.10,V8,array & string ops,[coll (array 1 2 3)] (first coll),3.9e-05,,,,
1.7.10,V8,array & string ops,"[coll ""foobar""] (first coll)",0.00011,,,,
1.7.10,V8,array & string ops,[coll (array 1 2 3)] (nth coll 2),3.8e-05,,,,
1.7.10,V8,array & string ops,"[coll ""foobar""] (nth coll 2)",2.5e-05,,,,
1.7.10,V8,cloning & specify,[coll [1 2 3]] (clone coll),2.6e-05,,,,
1.7.10,V8,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000577,,,,
1.7.10,V8,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),2.2e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (first coll),2e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (-first coll),1.7e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (rest coll),1.7e-05,,,,
1.7.10,V8,list ops,[coll (list 1 2 3)] (-rest coll),1.4e-05,,,,
1.7.10,V8,list ops,[] (list),4e-06,,,,
1.7.10,V8,list ops,[] (list 1 2 3),0.000557,,,,
1.7.10,V8,vector ops,[] [],4e-06,,,,
1.7.10,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000583,,,,
1.7.10,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.00055,,,,
1.7.10,V8,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000567,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (transient coll),0.00021,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (nth coll 0),2.6e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-nth coll 0),1.9e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (coll 0),0.000515,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (conj coll 4),4.9e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-conj coll 4),4.6e-05,,,,
1.7.10,V8,vector ops,[coll []] (-conj coll 1),3.9e-05,,,,
1.7.10,V8,vector ops,[coll [1]] (-conj coll 2),4e-05,,,,
1.7.10,V8,vector ops,[coll [1 2]] (-conj coll 3),4.2e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (seq coll),4e-05,,,,
1.7.10,V8,vector ops,[coll [1 2 3]] (-seq coll),2.3e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (first coll),3.9e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (-first coll),1.7e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (rest coll),2.2e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (-rest coll),2.1e-05,,,,
1.7.10,V8,vector ops,[coll (seq [1 2 3])] (next coll),2.3e-05,,,,
1.7.10,V8,large vector ops,[] (reduce conj [] (range 40000)),7.0,,,,
1.7.10,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00027,,,,
1.7.10,V8,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00067,,,,
1.7.10,V8,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00023,,,,
1.7.10,V8,chunked seqs,[] (-first v),1.6e-05,,,,
1.7.10,V8,chunked seqs,[] (-next v),3.2e-05,,,,
1.7.10,V8,chunked seqs,[] (-rest v),2.9e-05,,,,
1.7.10,V8,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),57.0,,,,
1.7.10,V8,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),34.0,,,,
1.7.10,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.15,,,,
1.7.10,V8,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),8.53,,,,
1.7.10,V8,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),83.0,,,,
1.7.10,V8,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),17.0,,,,
1.7.10,V8,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),29.0,,,,
1.7.10,V8,apply,[coll (into [] (range 1000000))] (apply + coll),56.0,,,,
1.7.10,V8,apply,[] (list 1 2 3 4 5),0.000121,,,,
1.7.10,V8,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000139,,,,
1.7.10,V8,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000432,,,,
1.7.10,V8,apply,[xs [1 2 3 4 5]] (apply list xs),0.00014,,,,
1.7.10,V8,apply,[f (fn [a b & more])] (apply f (range 32)),0.000245,,,,
1.7.10,V8,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000812,,,,
1.7.10,V8,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000312,,,,
1.7.10,V8,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000297,,,,
1.7.10,V8,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000255,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),2.8e-05,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.00148,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),2.2e-05,,,,
1.7.10,V8,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),2.2e-05,,,,
1.7.10,V8,array-map,"[] {[1] true, [2] true, [3] true}",0.001161,,,,
1.7.10,V8,array-map,[coll (array-map)] (assoc coll :foo :bar),6.2e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),5.1e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),8.4e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.10,V8,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.6e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map)] (assoc coll a b),9.1e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),6.8e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),9.9e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),8.1e-05,,,,
1.7.10,V8,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),9.4e-05,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000157,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000106,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000171,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000119,,,,
1.7.10,V8,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000127,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",5.6e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000102,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",4.5e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",9.5e-05,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",6e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000129,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",6.2e-05,,,,
1.7.10,V8,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",7.5e-05,,,,
1.7.10,V8,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",6.0,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (:bar coll),4e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),3.3e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),4.3e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),6.3e-05,,,,
1.7.10,V8,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),39.0,,,,
1.7.10,V8,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00299,,,,
1.7.10,V8,persistent hash maps,[key :f0] (hash key),2.3e-05,,,,
1.7.10,V8,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",2.5e-05,,,,
1.7.10,V8,persistent hash maps,[key :unsynchronized-mutable] (hash key),2e-05,,,,
1.7.10,V8,persistent hash maps,[coll hash-coll-test] (hash-coll coll),1.22,,,,
1.7.10,V8,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),1.11,,,,
1.7.10,V8,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.76,,,,
1.7.10,V8,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),1.02,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (:f0 coll),6.4e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (get coll :f0),5.2e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),4.2e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),7.9e-05,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000248,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000417,,,,
1.7.10,V8,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),82.0,,,,
1.7.10,V8,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000161,,,,
1.7.10,V8,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),52.0,,,,
1.7.10,V8,set ops,[] #{},4e-06,,,,
1.7.10,V8,set ops,[] #{1 3 2},4e-06,,,,
1.7.10,V8,set ops,[v [1 2 3]] (set v),0.000322,,,,
1.7.10,V8,set ops,[] (hash-set 1 2 3),4e-06,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (conj coll 4),0.000272,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (get coll 2),7e-05,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (contains? coll 2),4.3e-05,,,,
1.7.10,V8,set ops,[coll #{1 3 2}] (coll 2),7.3e-05,,,,
1.7.10,V8,seq ops,[coll (range 500000)] (reduce + coll),23.0,,,,
1.7.10,V8,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.029,,,,
1.7.10,V8,reader,[s big-str-data] (reader/read-string s),0.753,,,,
1.7.10,V8,range,[r (range 1000000)] (last r),45.0,,,,
1.7.10,V8,lazy-seq - first run,[r r] (last r),526.0,,,,
1.7.10,V8,lazy-seq - second run,[r r] (last r),102.0,,,,
1.7.10,V8,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.483,,,,
1.7.10,V8,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),315.0,,,,
1.7.10,V8,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),54.25,,,,
1.7.10,V8,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),50.5,,,,
1.7.10,V8,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),140.5,,,,
1.7.10,V8,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),85.0,,,,
1.7.10,V8,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),111.0,,,,
1.7.10,V8,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),1861.0,,,,
1.7.10,V8,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1620.0,,,,
1.7.10,V8,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),81.0,,,,
1.7.10,V8,multimethods,[] (simple-multi :foo),0.00063,,,,
1.7.10,V8,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.10,V8,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.0003,,,,
1.7.10,V8,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00103,,,,
1.7.10,V8,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),205.8,,,,
1.7.10,SM,identity,[x 1] (identity x),8.21e-06,,,,
1.7.10,SM,symbol construction,[] (symbol (quote foo)),0.000379,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),1.55,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),2.72,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.35,,,,
1.7.10,SM,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.37,,,,
1.7.10,SM,instance?,[coll []] (instance? PersistentVector coll),1.5e-05,,,,
1.7.10,SM,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),1.7e-05,,,,
1.7.10,SM,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),2.8e-05,,,,
1.7.10,SM,array & string ops,[coll (array 1 2 3)] (seq coll),0.000606,,,,
1.7.10,SM,array & string ops,"[coll ""foobar""] (seq coll)",0.001324,,,,
1.7.10,SM,array & string ops,[coll (array 1 2 3)] (first coll),0.000782,,,,
1.7.10,SM,array & string ops,"[coll ""foobar""] (first coll)",0.00135,,,,
1.7.10,SM,array & string ops,[coll (array 1 2 3)] (nth coll 2),0.000174,,,,
1.7.10,SM,array & string ops,"[coll ""foobar""] (nth coll 2)",0.000913,,,,
1.7.10,SM,cloning & specify,[coll [1 2 3]] (clone coll),0.000406,,,,
1.7.10,SM,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.001734,,,,
1.7.10,SM,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),6.1e-05,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (first coll),0.000104,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (-first coll),6.3e-05,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (rest coll),9.1e-05,,,,
1.7.10,SM,list ops,[coll (list 1 2 3)] (-rest coll),6.8e-05,,,,
1.7.10,SM,list ops,[] (list),9e-06,,,,
1.7.10,SM,list ops,[] (list 1 2 3),0.001235,,,,
1.7.10,SM,vector ops,[] [],9e-06,,,,
1.7.10,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.000557,,,,
1.7.10,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),0.000664,,,,
1.7.10,SM,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000482,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (transient coll),0.00175,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (nth coll 0),0.000227,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.000219,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-nth coll 0),0.00026,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (coll 0),0.000223,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (conj coll 4),0.000909,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-conj coll 4),0.000828,,,,
1.7.10,SM,vector ops,[coll []] (-conj coll 1),0.000765,,,,
1.7.10,SM,vector ops,[coll [1]] (-conj coll 2),0.000773,,,,
1.7.10,SM,vector ops,[coll [1 2]] (-conj coll 3),0.000817,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (seq coll),0.000605,,,,
1.7.10,SM,vector ops,[coll [1 2 3]] (-seq coll),0.000428,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (first coll),0.000101,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (-first coll),8e-05,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (rest coll),0.000375,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (-rest coll),0.000187,,,,
1.7.10,SM,vector ops,[coll (seq [1 2 3])] (next coll),0.000259,,,,
1.7.10,SM,large vector ops,[] (reduce conj [] (range 40000)),8.0,,,,
1.7.10,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00176,,,,
1.7.10,SM,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00247,,,,
1.7.10,SM,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.0018,,,,
1.7.10,SM,chunked seqs,[] (-first v),0.000185,,,,
1.7.10,SM,chunked seqs,[] (-next v),0.000188,,,,
1.7.10,SM,chunked seqs,[] (-rest v),0.000186,,,,
1.7.10,SM,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),241.0,,,,
1.7.10,SM,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),14.0,,,,
1.7.10,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),6.63,,,,
1.7.10,SM,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),13.97,,,,
1.7.10,SM,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),79.0,,,,
1.7.10,SM,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.10,SM,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),5.0,,,,
1.7.10,SM,apply,[coll (into [] (range 1000000))] (apply + coll),43.0,,,,
1.7.10,SM,apply,[] (list 1 2 3 4 5),0.000373,,,,
1.7.10,SM,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000366,,,,
1.7.10,SM,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000423,,,,
1.7.10,SM,apply,[xs [1 2 3 4 5]] (apply list xs),0.000371,,,,
1.7.10,SM,apply,[f (fn [a b & more])] (apply f (range 32)),0.000366,,,,
1.7.10,SM,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000779,,,,
1.7.10,SM,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000428,,,,
1.7.10,SM,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000383,,,,
1.7.10,SM,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.00041,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),0.000205,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.002205,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000205,,,,
1.7.10,SM,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000199,,,,
1.7.10,SM,array-map,"[] {[1] true, [2] true, [3] true}",0.002814,,,,
1.7.10,SM,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000279,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),0.000228,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000337,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),0.000228,,,,
1.7.10,SM,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),0.000254,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000286,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),0.000226,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000354,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),0.000253,,,,
1.7.10,SM,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),0.000247,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000773,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),0.000472,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000844,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),0.000471,,,,
1.7.10,SM,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.000494,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",0.000237,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",0.000472,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",0.000228,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",0.00047,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",0.000229,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000493,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",0.000225,,,,
1.7.10,SM,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",0.000224,,,,
1.7.10,SM,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",186.0,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (:bar coll),0.000194,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),0.000198,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),0.000235,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),0.000235,,,,
1.7.10,SM,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),250.0,,,,
1.7.10,SM,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00341,,,,
1.7.10,SM,persistent hash maps,[key :f0] (hash key),0.000188,,,,
1.7.10,SM,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",0.000184,,,,
1.7.10,SM,persistent hash maps,[key :unsynchronized-mutable] (hash key),0.00019,,,,
1.7.10,SM,persistent hash maps,[coll hash-coll-test] (hash-coll coll),2.62,,,,
1.7.10,SM,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),2.31,,,,
1.7.10,SM,persistent hash maps,[coll hash-imap-test] (hash-imap coll),1.02,,,,
1.7.10,SM,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),2.79,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (:f0 coll),0.000247,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (get coll :f0),0.000246,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),0.000221,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000259,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000633,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.00057,,,,
1.7.10,SM,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),301.0,,,,
1.7.10,SM,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000313,,,,
1.7.10,SM,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),523.0,,,,
1.7.10,SM,set ops,[] #{},0.000167,,,,
1.7.10,SM,set ops,[] #{1 3 2},0.000155,,,,
1.7.10,SM,set ops,[v [1 2 3]] (set v),0.000391,,,,
1.7.10,SM,set ops,[] (hash-set 1 2 3),0.000148,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (conj coll 4),0.000396,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (get coll 2),0.000212,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (contains? coll 2),0.000206,,,,
1.7.10,SM,set ops,[coll #{1 3 2}] (coll 2),0.00021,,,,
1.7.10,SM,seq ops,[coll (range 500000)] (reduce + coll),17.0,,,,
1.7.10,SM,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.102,,,,
1.7.10,SM,reader,[s big-str-data] (reader/read-string s),1.808,,,,
1.7.10,SM,range,[r (range 1000000)] (last r),48.0,,,,
1.7.10,SM,lazy-seq - first run,[r r] (last r),447.0,,,,
1.7.10,SM,lazy-seq - second run,[r r] (last r),51.0,,,,
1.7.10,SM,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.596,,,,
1.7.10,SM,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),219.0,,,,
1.7.10,SM,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),43.0,,,,
1.7.10,SM,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),223.25,,,,
1.7.10,SM,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),130.75,,,,
1.7.10,SM,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),28.0,,,,
1.7.10,SM,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),33.0,,,,
1.7.10,SM,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),246.0,,,,
1.7.10,SM,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),1544.0,,,,
1.7.10,SM,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),31.0,,,,
1.7.10,SM,multimethods,[] (simple-multi :foo),0.000309,,,,
1.7.10,SM,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.00371,,,,
1.7.10,SM,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00215,,,,
1.7.10,SM,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00399,,,,
1.7.10,SM,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),219.3,,,,
1.7.10,JSC,identity,[x 1] (identity x),1.037e-05,,,,
1.7.10,JSC,symbol construction,[] (symbol (quote foo)),0.000183,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll + 0),0.12,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll (seq arr)] (ci-reduce coll sum 0),0.11,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll + 0),0.04,,,,
1.7.10,JSC,array-reduce & ci-reduce,[coll arr] (array-reduce coll sum 0),0.06,,,,
1.7.10,JSC,instance?,[coll []] (instance? PersistentVector coll),5.2e-05,,,,
1.7.10,JSC,satisfies?,[coll (list 1 2 3)] (satisfies? ISeq coll),4.3e-05,,,,
1.7.10,JSC,satisfies?,[coll [1 2 3]] (satisfies? ISeq coll),4.9e-05,,,,
1.7.10,JSC,array & string ops,[coll (array 1 2 3)] (seq coll),0.000167,,,,
1.7.10,JSC,array & string ops,"[coll ""foobar""] (seq coll)",0.000206,,,,
1.7.10,JSC,array & string ops,[coll (array 1 2 3)] (first coll),7.4e-05,,,,
1.7.10,JSC,array & string ops,"[coll ""foobar""] (first coll)",9.2e-05,,,,
1.7.10,JSC,array & string ops,[coll (array 1 2 3)] (nth coll 2),4.6e-05,,,,
1.7.10,JSC,array & string ops,"[coll ""foobar""] (nth coll 2)",5.3e-05,,,,
1.7.10,JSC,cloning & specify,[coll [1 2 3]] (clone coll),5.5e-05,,,,
1.7.10,JSC,cloning & specify,[coll [1 2 3]] (specify coll IFoo (foo [_] :bar)),0.000227,,,,
1.7.10,JSC,cloning & specify,[coll (specify [1 2 3] IFoo (foo [_] :bar))] (foo coll),3.9e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (first coll),4.9e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (-first coll),4e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (rest coll),3.9e-05,,,,
1.7.10,JSC,list ops,[coll (list 1 2 3)] (-rest coll),3.9e-05,,,,
1.7.10,JSC,list ops,[] (list),3.2e-05,,,,
1.7.10,JSC,list ops,[] (list 1 2 3),0.000102,,,,
1.7.10,JSC,vector ops,[] [],3.9e-05,,,,
1.7.10,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count [a b c]),0.0001,,,,
1.7.10,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vec (array a b c))),9.9e-05,,,,
1.7.10,JSC,vector ops,[[a b c] (take 3 (repeatedly (fn* [] (rand-int 10))))] (-count (vector a b c)),0.000101,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (transient coll),0.0003,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (nth coll 0),4.9e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.4e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-nth coll 0),4.3e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (coll 0),5.5e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (conj coll 4),8.2e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-conj coll 4),8e-05,,,,
1.7.10,JSC,vector ops,[coll []] (-conj coll 1),7.7e-05,,,,
1.7.10,JSC,vector ops,[coll [1]] (-conj coll 2),7.7e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2]] (-conj coll 3),7.8e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (seq coll),5.9e-05,,,,
1.7.10,JSC,vector ops,[coll [1 2 3]] (-seq coll),5.6e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (first coll),5.2e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (-first coll),5.6e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (rest coll),0.000189,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (-rest coll),5.8e-05,,,,
1.7.10,JSC,vector ops,[coll (seq [1 2 3])] (next coll),5.6e-05,,,,
1.7.10,JSC,large vector ops,[] (reduce conj [] (range 40000)),5.3,,,,
1.7.10,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 32)))] (conj coll :foo),0.00034,,,,
1.7.10,JSC,large vector ops,[coll (reduce conj [] (range 40000))] (assoc coll 123 :foo),0.00057,,,,
1.7.10,JSC,large vector ops,[coll (reduce conj [] (range (+ 32768 33)))] (pop coll),0.00025,,,,
1.7.10,JSC,chunked seqs,[] (-first v),5.1e-05,,,,
1.7.10,JSC,chunked seqs,[] (-next v),0.000191,,,,
1.7.10,JSC,chunked seqs,[] (-rest v),5.9e-05,,,,
1.7.10,JSC,"transient vector, conj! 1000000 items",[v (transient [])] (loop [i 0 v v] (if (> i 1000000) (persistent! v) (recur (inc i) (conj! v i)))),68.0,,,,
1.7.10,JSC,vector equality,[a (into [] (range 1000000)) b (into [] (range 1000000))] (= a b),15.0,,,,
1.7.10,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed)))))] (.sort arr compare),3.08,,,,
1.7.10,JSC,keyword compare,[arr (into-array (repeatedly 10000 (fn* [] (keyword (rand-nth seed) (rand-nth seed)))))] (.sort arr compare),5.51,,,,
1.7.10,JSC,"reduce lazy-seqs, vectors, ranges",[coll (take 100000 (iterate inc 0))] (reduce + 0 coll),30.0,,,,
1.7.10,JSC,"reduce lazy-seqs, vectors, ranges",[coll (range 1000000)] (reduce + 0 coll),10.0,,,,
1.7.10,JSC,"reduce lazy-seqs, vectors, ranges",[coll (into [] (range 1000000))] (reduce + 0 coll),8.0,,,,
1.7.10,JSC,apply,[coll (into [] (range 1000000))] (apply + coll),41.0,,,,
1.7.10,JSC,apply,[] (list 1 2 3 4 5),0.00019,,,,
1.7.10,JSC,apply,[xs (array-seq (array 1 2 3 4 5))] (apply list xs),0.000158,,,,
1.7.10,JSC,apply,[xs (list 1 2 3 4 5)] (apply list xs),0.000225,,,,
1.7.10,JSC,apply,[xs [1 2 3 4 5]] (apply list xs),0.000169,,,,
1.7.10,JSC,apply,[f (fn [a b & more])] (apply f (range 32)),0.00017,,,,
1.7.10,JSC,apply,[f (fn [a b c d e f g h i j & more])] (apply f (range 32)),0.000506,,,,
1.7.10,JSC,update-in,[coll {:foo 1} ks [:foo]] (update-in coll ks inc),0.000229,,,,
1.7.10,JSC,update-in,[coll (array-map :foo 1) ks [:foo]] (update-in coll ks inc),0.000216,,,,
1.7.10,JSC,obj-map,[coll (obj-map)] (assoc coll :foo :bar),0.000281,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar)] (-lookup coll :foo),4.8e-05,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar)] (assoc coll :baz :woz),0.000861,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz)] (-lookup coll :baz),4.7e-05,,,,
1.7.10,JSC,obj-map,[coll (obj-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),4.7e-05,,,,
1.7.10,JSC,array-map,"[] {[1] true, [2] true, [3] true}",0.001057,,,,
1.7.10,JSC,array-map,[coll (array-map)] (assoc coll :foo :bar),0.000103,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar)] (-lookup coll :foo),6.5e-05,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar)] (assoc coll :baz :woz),0.000107,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar :baz :woz)] (-lookup coll :baz),6.5e-05,,,,
1.7.10,JSC,array-map,[coll (array-map :foo :bar :baz :woz :lol :rofl)] (-lookup coll :lol),7.2e-05,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map)] (assoc coll a b),0.000108,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b)] (-lookup coll a),8e-05,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b)] (assoc coll c d),0.000107,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b c d)] (-lookup coll c),7.4e-05,,,,
1.7.10,JSC,array-map w/ symbols,[coll (array-map a b c d e f)] (-lookup coll e),7.8e-05,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map)] (assoc coll (quote foo) (quote bar)),0.000145,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (-lookup coll (quote foo)),9.1e-05,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar))] (assoc coll (quote baz) (quote woz)),0.000152,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz))] (-lookup coll (quote baz)),9.7e-05,,,,
1.7.10,JSC,array-map w/ inline symbols,[coll (array-map (quote foo) (quote bar) (quote baz) (quote woz) (quote lol) (quote rofl))] (-lookup coll (quote lol)),0.0001,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (get coll :foo)",6.9e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (get coll (quote foo))",8.8e-05,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (-lookup coll :foo nil)",5.6e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (-lookup coll (quote foo) nil)",9e-05,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (:foo coll)",7.2e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] ((quote foo) coll)",0.000128,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (kw coll)",8.5e-05,,,,
1.7.10,JSC,map / record ops,"[coll {(quote foo) 1, (quote bar) 2}] (sym coll)",8.7e-05,,,,
1.7.10,JSC,map / record ops,"[coll {:foo 1, :bar 2}] (loop [i 0 m coll] (if (< i 100000) (recur (inc i) (assoc m :foo 2)) m))",7.0,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (:bar coll),6.6e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (-lookup coll :bar),5.5e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :bar 2),7.3e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (assoc coll :baz 3),8e-05,,,,
1.7.10,JSC,map / record ops,[coll (Foo. 1 2)] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :bar 2)) m)),71.0,,,,
1.7.10,JSC,zipmap,"[m {:a 1, :b 2, :c 3}] (zipmap (keys m) (map inc (vals m)))",0.00194,,,,
1.7.10,JSC,persistent hash maps,[key :f0] (hash key),5.4e-05,,,,
1.7.10,JSC,persistent hash maps,"[key ""f0""] (m3-hash-unencoded-chars key)",4.5e-05,,,,
1.7.10,JSC,persistent hash maps,[key :unsynchronized-mutable] (hash key),4.5e-05,,,,
1.7.10,JSC,persistent hash maps,[coll hash-coll-test] (hash-coll coll),0.32,,,,
1.7.10,JSC,persistent hash maps,[coll hash-coll-test] (hash-ordered-coll coll),0.3,,,,
1.7.10,JSC,persistent hash maps,[coll hash-imap-test] (hash-imap coll),0.59,,,,
1.7.10,JSC,persistent hash maps,[coll hash-imap-test] (hash-unordered-coll coll),0.65,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (:f0 coll),0.0001,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (get coll :f0),9.3e-05,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (-lookup coll :f0 nil),8.4e-05,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-test :foo500 nil),0.000104,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (-lookup hash-imap-int-test 500 nil),0.000174,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (assoc coll :g0 32),0.000238,,,,
1.7.10,JSC,persistent hash maps,[coll pmap] (loop [i 0 m coll] (if (< i 1000000) (recur (inc i) (assoc m :a 1)) m)),117.0,,,,
1.7.10,JSC,persistent hash maps,[coll cljs.core.PersistentHashMap.EMPTY] (assoc coll :f0 1),0.000148,,,,
1.7.10,JSC,"transient map, conj! 100000 items",[m (transient cljs.core.PersistentHashMap.EMPTY)] (loop [i 0 m m] (if (> i 100000) (persistent! m) (recur (inc i) (assoc! m i i)))),39.0,,,,
1.7.10,JSC,set ops,[] #{},3.7e-05,,,,
1.7.10,JSC,set ops,[] #{1 3 2},3.9e-05,,,,
1.7.10,JSC,set ops,[v [1 2 3]] (set v),0.000347,,,,
1.7.10,JSC,set ops,[] (hash-set 1 2 3),3.4e-05,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (conj coll 4),0.000157,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (get coll 2),9.4e-05,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (contains? coll 2),8.1e-05,,,,
1.7.10,JSC,set ops,[coll #{1 3 2}] (coll 2),9.4e-05,,,,
1.7.10,JSC,seq ops,[coll (range 500000)] (reduce + coll),18.0,,,,
1.7.10,JSC,reader,"[s ""{:foo [1 2 3]}""] (reader/read-string s)",0.024,,,,
1.7.10,JSC,reader,[s big-str-data] (reader/read-string s),0.648,,,,
1.7.10,JSC,range,[r (range 1000000)] (last r),25.0,,,,
1.7.10,JSC,lazy-seq - first run,[r r] (last r),200.0,,,,
1.7.10,JSC,lazy-seq - second run,[r r] (last r),62.0,,,,
1.7.10,JSC,Sequence iterator,[s (seq ipmap)] (let [iter (seq-iter s)] (loop [v nil] (if (.hasNext iter) (recur (.next iter)) v))),0.658,,,,
1.7.10,JSC,comprehensions,[xs (range 512)] (last (for [x xs y xs] (+ x y))),144.0,,,,
1.7.10,JSC,comprehensions,[xs (vec (range 512))] (last (for [x xs y xs] (+ x y))),36.25,,,,
1.7.10,JSC,comprehensions,[a (Box. 0) xs (range 512)] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),56.0,,,,
1.7.10,JSC,comprehensions,[a (Box. 0) xs (vec (range 512))] (doseq [x xs y xs] (set! a -val (+ (.-val a) x))),13.0,,,,
1.7.10,JSC,reducers,[xs (into [] (range 1000000))] (r/reduce + (r/map inc (r/map inc (r/map inc xs)))),46.0,,,,
1.7.10,JSC,transducers,[xs (into [] (range 1000000))] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),44.0,,,,
1.7.10,JSC,primitive array reduce 1000000 many ops,[xs (into-array (range 1000000))] (-> xs (.map inc) (.map inc) (.map inc) (.reduce (fn [a b] (+ a b)) 0)),97.0,,,,
1.7.10,JSC,reduce range 1000000 many ops,[xs (range 1000000)] (reduce + 0 (map inc (map inc (map inc xs)))),762.0,,,,
1.7.10,JSC,transduce range 1000000 many ops,[xs (range 1000000)] (transduce (comp (map inc) (map inc) (map inc)) + 0 xs),44.0,,,,
1.7.10,JSC,multimethods,[] (simple-multi :foo),0.000315,,,,
1.7.10,JSC,higher-order variadic function calls,[f array] (f 1 2 3 4 5 6 7 8 9 0),0.0001,,,,
1.7.10,JSC,higher-order variadic function calls,[f vector] (f 1 2 3 4 5 6 7 8 9 0),0.00038,,,,
1.7.10,JSC,higher-order variadic function calls,[] (= 1 1 1 1 1 1 1 1 1 0),0.00195,,,,
1.7.10,JSC,Destructuring a sequence,[v (into [] (range 1000000))] (loop [[x & xs] v] (if-not (nil? xs) (recur xs) x)),144.9,,,,
